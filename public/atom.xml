<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Pimi&#39;s Blog</title>
  
  <subtitle>A lazy youth, a lousy age.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://pimichen.com/"/>
  <updated>2018-01-22T10:49:33.889Z</updated>
  <id>http://pimichen.com/</id>
  
  <author>
    <name>Pimi Chen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端算法集合</title>
    <link href="http://pimichen.com/javascript/%E5%89%8D%E7%AB%AF%E7%AE%97%E6%B3%95%E9%9B%86%E5%90%88.html"/>
    <id>http://pimichen.com/javascript/前端算法集合.html</id>
    <published>2017-12-26T11:09:55.043Z</published>
    <updated>2018-01-22T10:49:33.889Z</updated>
    
    <content type="html"><![CDATA[<h2 id="不借助临时变量，进行整数量交换"><a href="#不借助临时变量，进行整数量交换" class="headerlink" title="不借助临时变量，进行整数量交换"></a>不借助临时变量，进行整数量交换</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 利用 + 、- 来进行运算</span></div><div class="line">funtion swap(a, b) &#123;</div><div class="line">  b = b - a;</div><div class="line">  a = a + b;</div><div class="line">  b = a - b;</div><div class="line">  <span class="keyword">return</span> [a， b];</div><div class="line">&#125;</div><div class="line"><span class="built_in">module</span>.exports = swap; --&gt; 对应 <span class="keyword">var</span> s = <span class="built_in">require</span>(<span class="string">'../*.js'</span>);</div><div class="line"><span class="comment">// 或：</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> swap --&gt; 对应 <span class="keyword">import</span> s <span class="keyword">from</span> <span class="string">'../*.js'</span></div><div class="line"><span class="comment">// 或:</span></div><div class="line"><span class="keyword">export</span> &#123;swap&#125; --&gt; 对应 <span class="keyword">import</span> &#123;swap&#125; <span class="keyword">from</span> <span class="string">'../*.js'</span></div></pre></td></tr></table></figure><h2 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h2><ul><li><p>方法1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">uniqueArr</span>(<span class="params">arr</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> newArr = []; <span class="comment">//一个新的临时数组</span></div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123; <span class="comment">//遍历当前数组</span></div><div class="line">    <span class="comment">//如果当前数组的第i项已经保存进了临时数组，那么跳过，</span></div><div class="line">    <span class="comment">//否则把当前项push到临时数组里面</span></div><div class="line">    <span class="keyword">if</span> (newArr.indexOf(arr[i]) == <span class="number">-1</span>)&#123; <span class="comment">//在新数组中查找原数组的每一项是否存在</span></div><div class="line">      newArr.push(arr[i]); <span class="comment">//如果不存在就加到新数组中</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> newArr;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>方法2</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">uniqueArr</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> obj = &#123;&#125;, newArr = []; <span class="comment">//n为hash表，r为临时数组</span></div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123; <span class="comment">//遍历当前数组 , 可改成 for (var i in arr) &#123;</span></div><div class="line">    <span class="keyword">if</span> (!obj[arr[i]])&#123; <span class="comment">//如果hash表中没有当前项</span></div><div class="line">      obj[arr[i]] = <span class="literal">true</span>; <span class="comment">//存入hash表</span></div><div class="line">      newArr.push(arr[i]); <span class="comment">//把当前数组的当前项push到临时数组里面</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> newArr;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>方法3</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">uniqueArr</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> newArr = [arr[<span class="number">0</span>]]; <span class="comment">//结果数组</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123; <span class="comment">//从第二项开始遍历</span></div><div class="line">    <span class="comment">//如果当前数组的第i项在当前数组中第一次出现的位置不是i，</span></div><div class="line">    <span class="comment">//那么表示第i项是重复的，忽略掉。否则存入结果数组</span></div><div class="line">    <span class="keyword">if</span> (arr.indexOf(arr[i]) == i) &#123;</div><div class="line">      newArr.push(arr[i]);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> newArr;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>方法4（同时排序）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">uniqueArr</span>(<span class="params">arr</span>)</span>&#123;</div><div class="line">  arr.sort(); <span class="comment">//数组排序</span></div><div class="line">  <span class="keyword">var</span> newArr = [arr[<span class="number">0</span>]]; <span class="comment">//先提取最小的</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</div><div class="line">    <span class="keyword">if</span> (arr[i] !== newArr[newArr.length<span class="number">-1</span>]) &#123; <span class="comment">//将不等于的放在新数组的后面，等于的跳过</span></div><div class="line">      newArr.push(arr[i]);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> newArr;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h2 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h2><ul><li><p>数字、英文排序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 顺序：</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortArr</span> (<span class="params">arr</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> arr.sort();</div><div class="line">&#125;</div><div class="line"><span class="comment">// 或：</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortArr</span> (<span class="params">arr</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> arr.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> a &gt; b</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 倒序：</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortArr</span> (<span class="params">arr</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> arr.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> a &lt; b</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>中文姓名排序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 顺序</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortNameArr</span> (<span class="params">arr</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> arr.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> b.localeCompare(a, <span class="string">'zh-Hans-CN'</span>)</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 倒序</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortNameArr</span> (<span class="params">arr</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> arr.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> a.localeCompare(b, <span class="string">'zh-Hans-CN'</span>)</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h2 id="数组乱序"><a href="#数组乱序" class="headerlink" title="数组乱序"></a>数组乱序</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">shuffle</span>(<span class="params">array</span>) </span>&#123;</div><div class="line">   <span class="keyword">for</span> (<span class="keyword">var</span> i = array.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</div><div class="line">     <span class="keyword">var</span> j = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (i + <span class="number">1</span>));</div><div class="line">     <span class="keyword">var</span> temp = array[i];</div><div class="line">     array[i] = array[j];</div><div class="line">     array[j] = temp;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> array;</div><div class="line"> &#125;</div></pre></td></tr></table></figure><h2 id="Number数组中最大差值"><a href="#Number数组中最大差值" class="headerlink" title="Number数组中最大差值"></a>Number数组中最大差值</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMaxProfit</span> (<span class="params">arr</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> min = arr[<span class="number">0</span>], max = arr[<span class="number">0</span>];</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</div><div class="line">    <span class="keyword">if</span> (arr[i] &lt; min) &#123;</div><div class="line">      min = arr[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (arr[i] &gt; max) &#123;</div><div class="line">      max = arr[i];</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> max - min;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="字符串翻转"><a href="#字符串翻转" class="headerlink" title="字符串翻转"></a>字符串翻转</h2><ul><li><p>转换成array</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverseString</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> str.split(<span class="string">''</span>).reverse().join();</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>反向遍历</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverseString</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> tmp = <span class="string">''</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=str.length<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</div><div class="line">        tmp += str[i];</div><div class="line">    <span class="keyword">return</span> tmp</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h2 id="生成指定长度的随机字符串"><a href="#生成指定长度的随机字符串" class="headerlink" title="生成指定长度的随机字符串"></a>生成指定长度的随机字符串</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomString</span>(<span class="params">n</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> str = <span class="string">'abcdefghijklmnopqrstuvwxyz0123456789'</span>;</div><div class="line">    <span class="keyword">var</span> tmp = <span class="string">''</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;n;i++)</div><div class="line">        tmp += str.charAt(<span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random()*str.length));</div><div class="line">    <span class="keyword">return</span> tmp;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="判断回文"><a href="#判断回文" class="headerlink" title="判断回文"></a>判断回文</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 算法思想：每次判断第一个字符和最后一个字符是否相等，然后取第二个字符到倒数第二个字符之间的字符串递归</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">palindrome</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">    <span class="comment">// \W匹配任何非单词字符，即去除非正常字符。等价于“[^A-Za-z0-9_]”。</span></div><div class="line">    <span class="keyword">var</span> re = <span class="regexp">/[\W_]/g</span>;</div><div class="line">    <span class="comment">// 将字符串变成小写字符,并干掉除字母数字外的字符</span></div><div class="line">    <span class="keyword">var</span> lowRegStr = str.toLowerCase().replace(re,<span class="string">''</span>);</div><div class="line">    <span class="comment">// 如果字符串lowRegStr的length长度为0时，字符串即是palindrome</span></div><div class="line">    <span class="keyword">if</span>(lowRegStr.length===<span class="number">0</span>)</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    <span class="comment">// 如果字符串的第一个和最后一个字符不相同，那么字符串就不是palindrome</span></div><div class="line">    <span class="keyword">if</span>(lowRegStr[<span class="number">0</span>]!=lowRegStr[lowRegStr.length<span class="number">-1</span>])</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    <span class="comment">//递归</span></div><div class="line">    <span class="keyword">return</span> palindrome(lowRegStr.slice(<span class="number">1</span>,lowRegStr.length<span class="number">-1</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="二路归并排序"><a href="#二路归并排序" class="headerlink" title="二路归并排序"></a>二路归并排序</h2><p>将两个按值有序序列合并成一个按值有序序列<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params">left, right</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> result = [],</div><div class="line">        il = <span class="number">0</span>,</div><div class="line">        ir = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (il &lt; left.length &amp;&amp; ir &lt; right.length) &#123;</div><div class="line">        <span class="keyword">if</span> (left[il] &lt; right[ir]) &#123;</div><div class="line">            result.push(left[il++]);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            result.push(right[ir++]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span>(left[il])&#123;</div><div class="line">        result.push(left[il++]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span>(right[ir])&#123;</div><div class="line">        result.push(right[ir++]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="统计字符串中次数最多的字母"><a href="#统计字符串中次数最多的字母" class="headerlink" title="统计字符串中次数最多的字母"></a>统计字符串中次数最多的字母</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 算法思想：先遍历，将出现的字符和次数以object的形式输出；再obj遍历，输出次数最多的字符</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">findMaxDuplicateChar</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(str.length == <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">return</span> str;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> charObj = &#123;&#125;;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</div><div class="line">        <span class="keyword">if</span>(!charObj[str.charAt(i)]) &#123;</div><div class="line">            charObj[str.charAt(i)] = <span class="number">1</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            charObj[str.charAt(i)] += <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'charObj'</span>, charObj)</div><div class="line">    <span class="keyword">var</span> maxChar = <span class="string">''</span>,</div><div class="line">        maxValue = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> charObj) &#123; <span class="comment">// k为key, charObj[k]为value</span></div><div class="line">        <span class="keyword">if</span>(charObj[k] &gt;= maxValue) &#123;</div><div class="line">            maxChar = k;</div><div class="line">            maxValue = charObj[k];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> maxChar + <span class="string">'：'</span> + maxValue;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="阶乘"><a href="#阶乘" class="headerlink" title="阶乘"></a>阶乘</h2><p>1x2x3x4x5…</p><ul><li><p>方法1（非递归实现）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorialize</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> result = <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(num &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    <span class="keyword">if</span>(num == <span class="number">0</span> || num == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(num&gt;<span class="number">1</span>)</div><div class="line">        result *= num--;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>方法2（递归实现）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorialize</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> result = <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(num &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    <span class="keyword">if</span>(num == <span class="number">0</span> || num == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(num &gt; <span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">return</span> num*factorialize(num<span class="number">-1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h2 id="生成斐波那契数列（黄金分割数列）"><a href="#生成斐波那契数列（黄金分割数列）" class="headerlink" title="生成斐波那契数列（黄金分割数列）"></a>生成斐波那契数列（黄金分割数列）</h2><p>斐波那契数列: 0、1、1、2、3、5、8、13、21、34，考察递归</p><ul><li><p>方法1（强行递归实现）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getfib</span>(<span class="params">n</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(n == <span class="number">0</span>)</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span>(n == <span class="number">1</span>)</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(n &gt; <span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">return</span> getfib(n<span class="number">-1</span>) + getfib(n<span class="number">-2</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibo</span>(<span class="params">len</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> fibo = [];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;len;i++)</div><div class="line">        fibo.push(getfib(i));</div><div class="line">    <span class="keyword">return</span> fibo;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>方法2（简约非递归实现）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFibonacci</span>(<span class="params">n</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> fibarr = [];</div><div class="line">    <span class="keyword">var</span> i = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(i &lt; n) &#123;</div><div class="line">        <span class="keyword">if</span>(i &lt;= <span class="number">1</span>) &#123;</div><div class="line">            fibarr.push(i);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            fibarr.push(fibarr[i - <span class="number">1</span>] + fibarr[i - <span class="number">2</span>])</div><div class="line">        &#125;</div><div class="line">        i++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> fibarr;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><p>查找某个值是否在有序数组中，数组必须是有序的</p><ul><li><p>方法1（非递归实现）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">binary_search</span>(<span class="params">arr, key</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> low = <span class="number">0</span>,</div><div class="line">        high = arr.length - <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(low &lt;= high)&#123;</div><div class="line">        <span class="keyword">var</span> mid = <span class="built_in">parseInt</span>((high + low) / <span class="number">2</span>);</div><div class="line">        <span class="keyword">if</span>(key == arr[mid])&#123;</div><div class="line">            <span class="keyword">return</span>  mid;</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(key &gt; arr[mid])&#123;</div><div class="line">            low = mid + <span class="number">1</span>;</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(key &lt; arr[mid])&#123;</div><div class="line">            high = mid - <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></li><li><p>方法2（递归实现）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">binary_search2</span>(<span class="params">arr, low, high, key</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(low &gt; high)</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    <span class="keyword">var</span> mid = <span class="built_in">parseInt</span>((low + high)/<span class="number">2</span>);</div><div class="line">    <span class="keyword">if</span>(key == arr[mid])</div><div class="line">        <span class="keyword">return</span> mid;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(key &gt; arr[mid])</div><div class="line">        <span class="keyword">return</span> binary_search2(arr, mid+<span class="number">1</span>, high, key);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(key &lt; arr[mid])</div><div class="line">        <span class="keyword">return</span> binary_search2(arr, low, mid<span class="number">-1</span>, key);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      前端常见的算法
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://pimichen.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>React官方CDN</title>
    <link href="http://pimichen.com/react/react%E5%AE%98%E6%96%B9cdn.html"/>
    <id>http://pimichen.com/react/react官方cdn.html</id>
    <published>2017-12-25T10:32:50.263Z</published>
    <updated>2017-12-25T10:33:17.408Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>开发版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;script crossorigin src=&quot;https://unpkg.com/react@16/umd/react.development.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script crossorigin src=&quot;https://unpkg.com/react-dom@16/umd/react-dom.development.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure></li><li><p>生产版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;script crossorigin src=&quot;https://unpkg.com/react@16/umd/react.production.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script crossorigin src=&quot;https://unpkg.com/react-dom@16/umd/react-dom.production.min.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      React官方CDN
    
    </summary>
    
    
      <category term="React" scheme="http://pimichen.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>vue-router懒加载</title>
    <link href="http://pimichen.com/vue/vue-router%E8%B5%96%E5%8A%A0%E8%BD%BD%E5%86%99%E6%B3%95.html"/>
    <id>http://pimichen.com/vue/vue-router赖加载写法.html</id>
    <published>2017-12-22T09:44:25.215Z</published>
    <updated>2017-12-22T09:50:40.258Z</updated>
    
    <content type="html"><![CDATA[<p>默认的加载模式：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></div><div class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'vue-router'</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> HelloWorld <span class="keyword">from</span> <span class="string">'@/components/HelloWorld'</span></div><div class="line"></div><div class="line">Vue.use(Router)</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</div><div class="line">  routes: [</div><div class="line">    &#123;</div><div class="line">      path: <span class="string">'/'</span>,</div><div class="line">      name: <span class="string">'HelloWorld'</span>,</div><div class="line">      component: HelloWorld</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><p>但当项目过大时需要使用懒加载方法</p><p>用法1：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></div><div class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'vue-router'</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> HelloWorld = <span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">require</span>([<span class="string">'@/components/HelloWorld'</span>], resolve)</div><div class="line"></div><div class="line">Vue.use(Router)</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</div><div class="line">  routes: [</div><div class="line">    &#123;</div><div class="line">      path: <span class="string">'/'</span>,</div><div class="line">      name: <span class="string">'HelloWorld'</span>,</div><div class="line">      component: HelloWorld</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><p>用法2：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></div><div class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'vue-router'</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> HelloWorld = <span class="function"><span class="params">resolve</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/components/HelloWorld'</span>).then(<span class="function">(<span class="params"><span class="built_in">module</span></span>) =&gt;</span> resolve(<span class="built_in">module</span>))</div><div class="line"></div><div class="line">Vue.use(Router)</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</div><div class="line">  routes: [</div><div class="line">    &#123;</div><div class="line">      path: <span class="string">'/'</span>,</div><div class="line">      name: <span class="string">'HelloWorld'</span>,</div><div class="line">      component: HelloWorld</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><p>用法3：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></div><div class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'vue-router'</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> HelloWorld = <span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">require</span>.ensure([], () =&gt; resolve(<span class="built_in">require</span>(<span class="string">'@/components/HelloWorld'</span>)), <span class="string">'HelloWorld'</span>)</div><div class="line"></div><div class="line">Vue.use(Router)</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</div><div class="line">  routes: [</div><div class="line">    &#123;</div><div class="line">      path: <span class="string">'/'</span>,</div><div class="line">      name: <span class="string">'HelloWorld'</span>,</div><div class="line">      component: HelloWorld</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      vue-router懒加载的几种写法
    
    </summary>
    
    
      <category term="Vue" scheme="http://pimichen.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>初识requirejs</title>
    <link href="http://pimichen.com/javascript/%E5%88%9D%E8%AF%86%E6%A8%A1%E5%9D%97%E5%8C%96%E5%8A%A0%E8%BD%BDrequirejs.html"/>
    <id>http://pimichen.com/javascript/初识模块化加载requirejs.html</id>
    <published>2017-12-20T09:57:12.826Z</published>
    <updated>2017-12-21T03:06:01.274Z</updated>
    
    <content type="html"><![CDATA[<p>在浏览器中可以作为js文件的模块加载器，也可以用在Node和Rhino环境。</p><h2 id="初识requirejs"><a href="#初识requirejs" class="headerlink" title="初识requirejs"></a>初识requirejs</h2><p>先看一个小demo：</p><p>index.html:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"a.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>body<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p><p>a.js:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="string">"it works"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">fun1();</div><div class="line"></div><div class="line"><span class="comment">// 或 使用块作用域来申明function防止污染全局变量</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(<span class="string">"it works"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    fun1();</div><div class="line">&#125;)()</div></pre></td></tr></table></figure></p><p>运行结果：<br>alert执行的时候，页面上的span元素还未显示。这是因为js阻塞浏览器渲染，导致body内容未能被读取。</p><p>requirejs写法:<br>先去<a href="http://requirejs.org" target="_blank" rel="external">require官网</a>下载js<br>index.html:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"require.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">            <span class="built_in">require</span>([<span class="string">"a"</span>]);</span></div><div class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>body<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p><p>a.js:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">func1</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      alert(<span class="string">'it works'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    func1();</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><p>运行结果：<br>alert执行的时候，页面能正常显示body了</p><p>这个时候可以知道require的优点：<br>1.防止js加载阻塞页面渲染<br>2.管理模块之间的依赖性，便于代码的编写和维护，防止出现如下丑陋的场景。这种写法需要将依赖最大的放在最后加载，如j.js依赖前面的js，就必须放到最后，当关系很复杂时，极难维护。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"a.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"b.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"c.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"d.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"e.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"f.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"g.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"h.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"i.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"j.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure></p><h2 id="基本API"><a href="#基本API" class="headerlink" title="基本API"></a>基本API</h2><p>require会定义三个变量：define、require、requirejs，require = requirejs，一般使用require更简短</p><ul><li><p>define 用来定义一个模块<br>define后面也可以增加参数[“jqueyr”],即保证jquery加载完成后读取该js文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">define([&quot;jquery&quot;], function ($) &#123;</div><div class="line">    console.log(&apos;it is loaded&apos;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></li><li><p>require 加载依赖模块，并执行加载后的回调函数</p></li></ul><p>require([“js/a.js”, “js/b.js”])的第一个参数时一个数组，即加载的脚本，第二个参数时callback，处理加载完毕后的回调<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>([<span class="string">"js/a.js"</span>, <span class="string">"js/b.js"</span>], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'load finished'</span>);</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><h2 id="加载文件"><a href="#加载文件" class="headerlink" title="加载文件"></a>加载文件</h2><p>使用require()来加载模块的使用只能加载本地js，但如果需要加载服务器、其他网站或CDN，就需要用require.config来配置加载<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>.config(&#123;</div><div class="line">    paths: &#123;</div><div class="line">        <span class="string">"jquery"</span>: [<span class="string">"https://cdn.bootcss.com/jquery/2.2.4/jquery"</span>], <span class="comment">// 或省略中括号</span></div><div class="line">        <span class="string">"bootstrap"</span>: [<span class="string">"https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap"</span>]</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">require</span>([<span class="string">"jquery"</span>, <span class="string">"js/a.js"</span>], <span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</div><div class="line">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'load finished'</span>);</div><div class="line">    &#125;)</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>require.config 用来配置加载位置，给模块起一个更短更好记的名字，配置别名之后就可以再require中使用别名了。<br>注意：require中的可以带.js后缀；paths中的路径不能带.js后缀，否则会报错，paths中的每个别名对应的js如果只有一个时可以省略中括号；</p><p>require.config 中也可以用来配置本地的js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>.config(&#123;</div><div class="line">    paths: &#123;</div><div class="line">        <span class="string">"jquery"</span>: [<span class="string">"https://cdn.bootcss.com/jquery/2.2.4/jquery"</span>],</div><div class="line">        <span class="string">"bootstrap"</span>: [<span class="string">"https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap"</span>],</div><div class="line">        <span class="string">"a"</span>: <span class="string">"js/a"</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">require</span>([<span class="string">"jquery"</span>, <span class="string">"a"</span>], <span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</div><div class="line">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'load finished'</span>);</div><div class="line">    &#125;)</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>最终渲染成下面这样：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span> <span class="keyword">async</span>=<span class="string">""</span> data-requirecontext=<span class="string">"_"</span> data-requiremodule=<span class="string">"jquery"</span> src=<span class="string">"http://cdn.bootcss.com/jquery/2.2.4/jquery.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line">&lt;script type=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span> <span class="keyword">async</span>=<span class="string">""</span> data-requirecontext=<span class="string">"_"</span> data-requiremodule=<span class="string">"a"</span> src=<span class="string">"./a.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure></p><p>通过require.config配置模块名称时可以配置多个路径，比如配置一个CDN路径，再配一个本地的库<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>.config(&#123;</div><div class="line">    paths: &#123;</div><div class="line">        <span class="string">"jquery"</span>: [<span class="string">"https://cdn.bootcss.com/jquery/2.2.4/jquery"</span>, <span class="string">'js/jquery'</span>],</div><div class="line">        <span class="string">"a"</span>: <span class="string">"js/a"</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">require</span>([<span class="string">"jquery"</span>, <span class="string">"a"</span>], <span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</div><div class="line">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'load finished'</span>);</div><div class="line">    &#125;)</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>当paths中都是本地路径时，可以指定一个baseUrl表示目录<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>.config(&#123;</div><div class="line">    baseUrl: <span class="string">"js/lib"</span>,</div><div class="line">    paths: &#123;</div><div class="line">        <span class="string">"jquery"</span>: jquery<span class="string">',</span></div><div class="line"><span class="string">        "a": "a"</span></div><div class="line"><span class="string">    &#125;</span></div><div class="line"><span class="string">&#125;);</span></div><div class="line"><span class="string">require(["jquery", "a"], function ($) &#123;</span></div><div class="line"><span class="string">    $(function () &#123;</span></div><div class="line"><span class="string">        console.log('</span>load finished<span class="string">');</span></div><div class="line"><span class="string">    &#125;)</span></div><div class="line"><span class="string">&#125;);</span></div></pre></td></tr></table></figure></p><p>上例中require的callback中的参数$是jquery模块的输出变量，如果依赖多个模块，可以依次写入多个参数。将需要输出的模块写在前面，位置不能错乱。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>([<span class="string">"jquery"</span>, <span class="string">"underscore"</span>, <span class="string">"js/a"</span>], <span class="function"><span class="keyword">function</span>(<span class="params">$, _</span>) </span>&#123;</div><div class="line">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        _.each([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], alert);</div><div class="line">    &#125;);</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><h2 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h2><p>require.config配置如果在每个页面中都加入，显然会十分不雅，requirejs提供了一种叫”主数据“的功能，我们首先创建一个main.js：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="built_in">require</span>.config(&#123;</div><div class="line">    paths: &#123;</div><div class="line">        <span class="string">"jquery"</span>: [<span class="string">"https://cdn.bootcss.com/jquery/2.2.4/jquery"</span>, <span class="string">'js/jquery'</span>],</div><div class="line">        <span class="string">"a"</span>: <span class="string">"js/a"</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>然后在页面中使用下面的方式来使用requirejs：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script data-main=<span class="string">"js/main src="</span>js/<span class="built_in">require</span>.js<span class="string">"&gt;&lt;/script&gt;</span></div></pre></td></tr></table></figure></p><p>data-main属性表示指定的js将在加载完require.js后处理，我们把require.config的配置加入到data-main后，就可以使每一个页面都使用这个配置，然后页面中就可以直接使用require来加载所有的短模块名<br>data-main还有一个功能，当script标签指定data-main属性时，require会默认将data-main指定的js为根路径。如上面的data-main=”js/main”设定后，我们在直接使用require([“jquery”])，而不是require([“js/jquery”])，require会自动加载js/jquery这个文件，而不是jquery.js。<br>相当于默认配置了：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>.config(&#123;</div><div class="line">    baseUrl: <span class="string">'js'</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><h2 id="第三方模块"><a href="#第三方模块" class="headerlink" title="第三方模块"></a>第三方模块</h2><p>通过require加载的模块一般都要符合AMD规范及使用define来申明模块，但是部分时候需要加载非AMD规范的js，这时候就需要用到另一个功能：shim，中文意思”垫“.</p><p>1、非AMD模块输出，例如，在老版本的jquery中，是没有继承AMD规范的，所以不能只能require([“jquery”])，这个时候就需要用到 shim，比如要使用underscore类库，但是它并没有实现AMD规范，可以这样配置<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">requier.config(&#123;</div><div class="line">    shim: &#123;</div><div class="line">        <span class="string">"underscore"</span>: &#123;</div><div class="line">            <span class="keyword">export</span>: <span class="string">"_"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><p>这样配置后，我们就可以再其他模块中引用underscore模块：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>([<span class="string">"underscore"</span>], <span class="function"><span class="keyword">function</span> (<span class="params">_</span>) </span>&#123;</div><div class="line">    _.each([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], alert)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><p>2、插件形式的非AMD模块，我们经常会用到jquery的插件，而这些插件基本都不符合AMD规范比如，jquery的form插件，这时候就需要将form插件”垫“到jquery中<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>.config(&#123;</div><div class="line">    shim: &#123;</div><div class="line">        <span class="string">"underscore"</span> : &#123;</div><div class="line">            exports : <span class="string">"_"</span>;</div><div class="line">        &#125;,</div><div class="line">        <span class="string">"jquery.form"</span> : &#123;</div><div class="line">            deps : [<span class="string">"jquery"</span>]</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>也可以简写成：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>.config(&#123;</div><div class="line">    shim: &#123;</div><div class="line">        <span class="string">"underscore"</span> : &#123;</div><div class="line">            exports : <span class="string">"_"</span>;</div><div class="line">        &#125;,</div><div class="line">        <span class="string">"jquery.form"</span> : [<span class="string">"jquery"</span>]</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>exports表明该模块外部调用时的名称，deps数组表示该模块的依赖</p><p>这样配置之后我们就可以使用加载插件后的jquery了<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>.config([<span class="string">"jquery"</span>, <span class="string">"jquery.form"</span>], <span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</div><div class="line">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        $(<span class="string">"#form"</span>).ajaxSubmit(&#123;...&#125;);</div><div class="line">    &#125;)</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><blockquote><p>来源：<a href="http://www.runoob.com/w3cnote/requirejs-tutorial-1.html" target="_blank" rel="external">runoob文档</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      初识JS模块化工具requirejs
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://pimichen.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>vue中使用mint-ui移动端组件库</title>
    <link href="http://pimichen.com/vue/vue%E4%B8%AD%E4%BD%BF%E7%94%A8mint-ui%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%BB%84%E4%BB%B6%E5%BA%93.html"/>
    <id>http://pimichen.com/vue/vue中使用mint-ui移动端组件库.html</id>
    <published>2017-12-20T06:40:53.585Z</published>
    <updated>2017-12-26T07:52:24.710Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="http://mint-ui.github.io/#!/zh-cn" target="_blank" rel="external">mint-ui官网</a><br><a href="http://mint-ui.github.io/docs/#/zh-cn" target="_blank" rel="external">mint-ui 1.0文档</a><br><a href="http://mint-ui.github.io/docs/#/zh-cn2" target="_blank" rel="external">mint-ui 2.0文档</a></p></blockquote><h2 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h2><p><a href="http://elemefe.github.io/mint-ui/#/" target="_blank" rel="external">http://elemefe.github.io/mint-ui/#/</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># Vue 1.x</div><div class="line">npm install mint-ui@1 -S</div><div class="line"></div><div class="line"># Vue 2.0</div><div class="line">npm install mint-ui -S</div></pre></td></tr></table></figure><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// main.js引入全部组件</div><div class="line">import Vue from &apos;vue&apos;;</div><div class="line">import Mint from &apos;mint-ui&apos;;</div><div class="line">import &apos;mint-ui/lib/style.css&apos; </div><div class="line">Vue.use(Mint);</div><div class="line"></div><div class="line">// 按需引入部分组件</div><div class="line">import &#123; Toast, Indicator &#125; from &apos;minu-ui&apos;;</div><div class="line">import &apos;mint-ui/lib/style.css&apos; </div><div class="line"></div><div class="line">components: &#123;Toast, Indicator&#125;</div></pre></td></tr></table></figure><h2 id="部分用法"><a href="#部分用法" class="headerlink" title="部分用法"></a>部分用法</h2><ul><li><p>Toast</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">Toast(<span class="string">'我就是那个3s的toast'</span>) <span class="comment">// 默认3s</span></div><div class="line"></div><div class="line">Toast(&#123;</div><div class="line">  message: <span class="string">'哈哈，我是5s的toast'</span>,</div><div class="line">  position: <span class="string">'bottom'</span>,</div><div class="line">  duration: <span class="number">5000</span> <span class="comment">// -1表示一直开启</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line">Toast(&#123;</div><div class="line">  message: <span class="string">'操作成功'</span>,</div><div class="line">  iconClass: <span class="string">'icon icon-success'</span> <span class="comment">// 增加icon class类名</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">let</span> instance = Toast(<span class="string">'提示信息'</span>);</div><div class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  instance.close(); <span class="comment">// 手动关闭</span></div><div class="line">&#125;, <span class="number">2000</span>);</div></pre></td></tr></table></figure></li><li><p>Indicator加载</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Indicator.open(<span class="string">'加载中...'</span>)</div><div class="line"></div><div class="line">Indicator.open(&#123;</div><div class="line">  text: <span class="string">'加载中...'</span>,</div><div class="line">  spinnerType: <span class="string">'triple-bounce'</span> <span class="comment">// snake(默认)、fading-circle、double-bounce、triple-bounce</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line">Indicator.close(); <span class="comment">// 手动关闭</span></div></pre></td></tr></table></figure></li><li><p>MessageBox</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">MessageBox(<span class="string">'提示'</span>, <span class="string">'操作成功'</span>)</div><div class="line"></div><div class="line">MessageBox(&#123;</div><div class="line">  title: <span class="string">'提示'</span>,</div><div class="line">  message: <span class="string">'操作成功'</span>,</div><div class="line">  showCancelButton: <span class="literal">true</span> <span class="comment">// 带取消按钮</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line">MessageBox.alert(<span class="string">'操作成功'</span>, <span class="string">'提示'</span>)</div><div class="line">MessageBox.alert(<span class="string">'操作成功'</span>, <span class="string">'提示'</span>).then(<span class="function"><span class="params">action</span> =&gt;</span> &#123;</div><div class="line">  <span class="comment">// 点击按钮的回调</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">MessageBox.confirm(<span class="string">'确定执行此操作'</span>, <span class="string">'提示'</span>)</div><div class="line">MessageBox.confirm(<span class="string">'确定执行此操作'</span>, <span class="string">'提示'</span>).then(<span class="function"><span class="params">action</span> =&gt;</span> &#123;</div><div class="line">  <span class="comment">// 点击按钮的回调</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">MessageBox.prompt(<span class="string">'请输入姓名'</span>, <span class="string">'提示'</span>);</div><div class="line">MessageBox.prompt(<span class="string">'确定执行此操作'</span>, <span class="string">'提示'</span>).then(<span class="function">(<span class="params">&#123;value, action&#125;</span>) =&gt;</span> &#123;</div><div class="line">  <span class="comment">// 点击按钮的回调</span></div><div class="line">  <span class="built_in">console</span>.log(value)</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// title: 标题</span></div><div class="line"><span class="comment">// message: 提示框内容</span></div><div class="line"><span class="comment">// showConfirmButton: 是否显示确认按钮，默认true</span></div><div class="line"><span class="comment">// showCancelButton: 是否显示取消按钮，默认false</span></div><div class="line"><span class="comment">// confirmButtonText、confirmButtonHighlight、confirmButtonClass: 确认按钮文本、加粗、类名</span></div><div class="line"><span class="comment">// cancelButtonText、cancelButtonHighlight、cancelButtonClass: 取消按钮文本、加粗、类名</span></div><div class="line"><span class="comment">// closeOnClickModal: 点击遮罩关闭提示框</span></div><div class="line"><span class="comment">// showInput、inputType、inputValue、inputPlaceholder: 是否显示输入框、输入框类型、输入框的值、输入框的占位符</span></div></pre></td></tr></table></figure></li><li><p>Action sheet操作表</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// template</span></div><div class="line">&lt;button @click=<span class="string">"showActionSheet"</span>&gt;点击上拉 action sheet&lt;<span class="regexp">/button&gt;</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">&lt;mt-actionsheet</span></div><div class="line"><span class="regexp">      :actions="actions"</span></div><div class="line"><span class="regexp">      :cancelText="cancelText"</span></div><div class="line"><span class="regexp">      :closeOnClickModal="true"</span></div><div class="line"><span class="regexp">      v-model="sheetVisible"&gt;&lt;/m</span>t-actionsheet&gt;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// js:</span></div><div class="line">data () &#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    actions: [ <span class="comment">// 可选择的</span></div><div class="line">      &#123;</div><div class="line">        name: <span class="string">'拍照'</span>,</div><div class="line">        method: <span class="keyword">this</span>.choiceCamera <span class="comment">// 点击后回调</span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        name: <span class="string">'从相册中选择'</span>,</div><div class="line">        method: <span class="keyword">this</span>.choicePhoto</div><div class="line">      &#125;</div><div class="line">    ],</div><div class="line">    sheetVisible: <span class="literal">false</span>,</div><div class="line">    cancelText: <span class="string">'取消'</span>, <span class="comment">// 取消按钮的文本</span></div><div class="line">  &#125;</div><div class="line">&#125;,</div><div class="line">methods: &#123;</div><div class="line">  showActionSheet () &#123;</div><div class="line">    <span class="keyword">this</span>.sheetVisible = <span class="literal">true</span></div><div class="line">  &#125;,</div><div class="line">  choiceCamera () &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'选择了拍照'</span>)</div><div class="line">  &#125;,</div><div class="line">  choicePhoto () &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'选择了从相册中选择'</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><p>更多用法请查看官方文档</p><blockquote><p><a href="http://mint-ui.github.io/docs/#/zh-cn" target="_blank" rel="external">mint-ui 1.0文档</a><br><a href="http://mint-ui.github.io/docs/#/zh-cn2" target="_blank" rel="external">mint-ui 2.0文档</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      在vue-cli中使用ElemeFE提供的mint-ui移动端组件库
    
    </summary>
    
    
      <category term="Vue" scheme="http://pimichen.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>在js文件中调用一个vue组件</title>
    <link href="http://pimichen.com/vue/%E5%9C%A8js%E9%87%8C%E9%9D%A2%E8%B0%83%E7%94%A8%E4%B8%80%E4%B8%AAvue%E7%BB%84%E4%BB%B6.html"/>
    <id>http://pimichen.com/vue/在js里面调用一个vue组件.html</id>
    <published>2017-12-07T06:36:54.391Z</published>
    <updated>2017-12-07T07:01:35.282Z</updated>
    
    <content type="html"><![CDATA[<p>通常情况下我们都是在一个父组件中调用一个子组件，有时我们可能需要在一个js文件内来调用子组件，如在全局的index.js中设置请求拦截器时调用一个message弹窗子组件，用来显示报错信息</p><p>component中有一个message子组件：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// html</span></div><div class="line">div.message-mask(v-<span class="keyword">if</span>=<span class="string">"alertMsg.isShowMessage"</span>)</div><div class="line">  div</div><div class="line">    p &#123;&#123;alertMsg.errInfo&#125;&#125;</div><div class="line">    button(@click=<span class="string">"close"</span>) 关闭</div><div class="line"></div><div class="line"><span class="comment">// script</span></div><div class="line">methods: &#123;</div><div class="line">  close () &#123;</div><div class="line">    <span class="keyword">this</span>.$emit(<span class="string">'close'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>如果是在父组件中调用message组件，这样写：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// html</span></div><div class="line">div</div><div class="line">  message(:alert-msg=<span class="string">"alertMessage"</span>, @close=<span class="string">"closeEvent"</span>)</div><div class="line"></div><div class="line"><span class="comment">// script</span></div><div class="line">data () &#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    alertMessage: &#123;</div><div class="line">      isShowMessage: <span class="literal">true</span>,</div><div class="line">      errInfo: <span class="string">''</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;，</div><div class="line">methods: &#123;</div><div class="line">  closeEvent () &#123;</div><div class="line">    <span class="keyword">this</span>.alertMessage.isShowMessage = <span class="literal">false</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>如果是在其他js中调用，这样写：</p><p>在util文件中设置一个alert.js文件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</div><div class="line"><span class="keyword">import</span> alert <span class="keyword">from</span> <span class="string">'../components/alert'</span>;</div><div class="line"></div><div class="line"><span class="keyword">let</span> instance = <span class="literal">null</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> MessageConstructor = Vue.extend(alert);</div><div class="line"></div><div class="line"><span class="keyword">const</span> Message = <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</div><div class="line">  instance = <span class="keyword">new</span> MessageConstructor(&#123;</div><div class="line">    el: <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</div><div class="line">  &#125;);</div><div class="line">  <span class="built_in">document</span>.body.appendChild(instance.$el);</div><div class="line"></div><div class="line">  Vue.nextTick(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">    instance.alertMsg = config;</div><div class="line">    instance.$on(<span class="string">'close'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="built_in">document</span>.body.removeChild(<span class="keyword">this</span>.$el);</div><div class="line">    &#125;)</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> Message;</div></pre></td></tr></table></figure></p><p>在全局的index.js文件中这样使用（Message处）：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</div><div class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">"axios"</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> Message <span class="keyword">from</span> <span class="string">'./util/alert'</span>;</div><div class="line"></div><div class="line">Vue.prototype.$ajax = axios;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// axios相关配置</span></div><div class="line">axios.interceptors.request.use(</div><div class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">config</span>) </span>&#123;</div><div class="line">        config.data=qs.stringify(config.data);</div><div class="line">        <span class="keyword">return</span> config;</div><div class="line">    &#125;,</div><div class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</div><div class="line">        <span class="comment">// Do something with request error</span></div><div class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</div><div class="line">    &#125;</div><div class="line">);</div><div class="line"></div><div class="line"><span class="comment">// Add a response interceptor</span></div><div class="line">axios.interceptors.response.use(</div><div class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</div><div class="line">        <span class="comment">// Do something with response data</span></div><div class="line">        <span class="keyword">if</span> (response.data.success) &#123;</div><div class="line">            <span class="keyword">return</span> response.data;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">//此处需要弹框组件</span></div><div class="line">            <span class="keyword">var</span> isShowAlert = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'message-mask'</span>).length != <span class="number">0</span>;</div><div class="line">            <span class="keyword">if</span> (!isShowAlert) &#123; <span class="comment">// 此处设置检查弹窗，只出现一次，防止同步请求都请求失败时弹窗出现两次bug</span></div><div class="line">                Message(&#123;</div><div class="line">                    isShowMessage: <span class="literal">true</span>,</div><div class="line">                    errInfo: response.data.errorInfo || <span class="string">'请求失败，稍后重试'</span></div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(response.data.error);</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</div><div class="line">        <span class="comment">// Do something with response error</span></div><div class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</div><div class="line">    &#125;</div><div class="line">);</div></pre></td></tr></table></figure></p><p>实际上我们在构建时就应当考虑这种写法的弊端，正确的做法应该是在顶层组件中挂载message组件，需要显示是通过$emit派发事件显示或关闭即可</p>]]></content>
    
    <summary type="html">
    
      在js文件中调用一个vue组件，如在全局的请求拦截器中处理请求失败调用共用弹窗组件
    
    </summary>
    
    
      <category term="Vue" scheme="http://pimichen.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>viewport各宽高值</title>
    <link href="http://pimichen.com/html/viewport%E5%90%84%E5%AE%BD%E9%AB%98%E5%80%BC.html"/>
    <id>http://pimichen.com/html/viewport各宽高值.html</id>
    <published>2017-11-08T03:34:14.850Z</published>
    <updated>2017-11-08T03:39:54.479Z</updated>
    
    <content type="html"><![CDATA[<p>js中viewport的各个宽高值如下：</p><p><img src="../images/html/viewport.png" class="full-image"></p>]]></content>
    
    <summary type="html">
    
      js-viewport下各个宽高值
    
    </summary>
    
    
      <category term="HTML" scheme="http://pimichen.com/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>在ftl的js中获取freemarker的值</title>
    <link href="http://pimichen.com/freemarker/js%E8%8E%B7%E5%8F%96freemarker%E7%9A%84%E5%80%BC.html"/>
    <id>http://pimichen.com/freemarker/js获取freemarker的值.html</id>
    <published>2017-11-03T09:23:10.059Z</published>
    <updated>2017-11-03T10:33:18.063Z</updated>
    
    <content type="html"><![CDATA[<p>假设后端往ftl模板中注入了下列值<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">testA: <span class="string">'aaaa'</span></div><div class="line"></div><div class="line">testB: &#123;</div><div class="line">  bDataOne: <span class="string">'b1'</span>,</div><div class="line">  bDateTwo: <span class="string">'b2'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">testC: [</div><div class="line">  &#123;</div><div class="line">    cDateOne: <span class="string">'c11'</span></div><div class="line">    cDateTwo: <span class="string">'c12'</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    cDateOne: <span class="string">'c21'</span></div><div class="line">    cDateTwo: <span class="string">'c22'</span></div><div class="line">  &#125;</div><div class="line">]</div></pre></td></tr></table></figure></p><p>想在ftl页面的js中获取testA、testB、testC<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">// 获取testA</div><div class="line">var getA = &quot;$&#123;testA!&apos;&apos;&#125;&quot;;</div><div class="line"></div><div class="line"></div><div class="line">// 获取testB</div><div class="line">&lt;#if testB?? &amp;&amp; testB.bDataOne??&gt;</div><div class="line">  var getB1 = &quot;$&#123;testB.bDataOne!&apos;&apos;&#125;&quot;;</div><div class="line">  var getB2 = &quot;$&#123;testB.bDataTwo!&apos;&apos;&#125;&quot;;</div><div class="line">&lt;/#if&gt;</div><div class="line"></div><div class="line"></div><div class="line">// 获取testC，对于list，我们不能直接使用list数据，必选转换一下才能正常使用</div><div class="line">// 收集list中每一项的某个key</div><div class="line">&lt;#if testC??&gt;</div><div class="line">  var arr = [];</div><div class="line">  &lt;#list testC as c&gt;</div><div class="line">    arr.push(&apos;$&#123;c.cDateOne&#125;&apos;)</div><div class="line">  &lt;/#list&gt;</div><div class="line">&lt;/#if&gt;</div><div class="line">console.log(arr); // 然后将可以正常的使用了</div><div class="line"></div><div class="line">// 获取整个list，正在搜索中...</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      在ftl的js中获取freemarker的值
    
    </summary>
    
    
      <category term="FreeMarker" scheme="http://pimichen.com/tags/freemarker/"/>
    
  </entry>
  
  <entry>
    <title>freemarker部分语法</title>
    <link href="http://pimichen.com/freemarker/freemarker%E9%83%A8%E5%88%86%E8%AF%AD%E6%B3%95.html"/>
    <id>http://pimichen.com/freemarker/freemarker部分语法.html</id>
    <published>2017-11-03T09:21:53.788Z</published>
    <updated>2017-11-03T09:46:40.636Z</updated>
    
    <content type="html"><![CDATA[<p>假设后端往ftl模板中注入了下列值<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">testA: <span class="string">'1111'</span></div><div class="line"></div><div class="line">testB: &#123;</div><div class="line">  bDataOne: <span class="string">'b1'</span>,</div><div class="line">  bDateTwo: <span class="string">'b2'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">testC: [</div><div class="line">  &#123;</div><div class="line">    cDateOne: <span class="string">'c11'</span></div><div class="line">    cDateTwo: <span class="string">'c12'</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    cDateOne: <span class="string">'c21'</span></div><div class="line">    cDateTwo: <span class="string">'c22'</span></div><div class="line">  &#125;</div><div class="line">]</div><div class="line"></div><div class="line">testD: <span class="literal">false</span></div><div class="line"></div><div class="line">testE: &#123;</div><div class="line">  eData: <span class="literal">false</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在ftl中页面中我们可以这样获取：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">$&#123;testA&#125; // 直接获取</div><div class="line"></div><div class="line">$&#123;testA!&#125; // 获取，取不到时为空串，空序列或空哈希表（arr or object）</div><div class="line"></div><div class="line">$&#123;testA!&apos;&apos;&#125; // 获取，取不到时为空字符串</div><div class="line"></div><div class="line">$&#123;testA!&apos;test&apos;&#125; // 获取，取不到位test字符串</div><div class="line"></div><div class="line">$&#123;testD.eData!false&#125; // 获取testD里面的eData，取不到为false;取到testD，取不到eData，为false;取不到testD会出问题</div><div class="line"></div><div class="line">$&#123;(testD.eData)!false&#125; // 获取testD里面的eData，取不到testD或testD.eData，均为false</div><div class="line"></div><div class="line">// 判断testA存在时</div><div class="line">&lt;#if testA&gt;</div><div class="line">  ***</div><div class="line">&lt;/#if&gt;</div><div class="line"></div><div class="line">// 判断testA存在时</div><div class="line">&lt;#if testA??&gt;</div><div class="line">  ***</div><div class="line">&lt;/#if&gt;</div><div class="line"></div><div class="line">// 判断testA存在时</div><div class="line">&lt;#if testA?has_content&gt;</div><div class="line">  ***</div><div class="line">&lt;/#if&gt;</div><div class="line"></div><div class="line">// 判断testA为&apos;1111&apos;时</div><div class="line">&lt;#if testA === &apos;1111&apos;&gt;</div><div class="line">  ***</div><div class="line">&lt;/#if&gt;</div><div class="line"></div><div class="line">// 判断testD为false存在时，如果取不到就用false</div><div class="line">&lt;#if testD!false&gt;</div><div class="line">  ***</div><div class="line">&lt;/#if&gt;</div><div class="line"></div><div class="line">// 判断testB及testB.bDataOne存在时</div><div class="line">&lt;#if testB?? &amp;&amp; testB.bDataOne??&gt;</div><div class="line">  ***</div><div class="line">&lt;/#if&gt;</div><div class="line"></div><div class="line">// 渲染列表testC</div><div class="line">&lt;#list testC as c&gt;</div><div class="line">  &lt;p&gt;&lt;span&gt;$&#123;c.cDateOne!&#125;&lt;/span&gt;和&lt;span&gt;$&#123;c.cDateTwo!&#125;&lt;/span&gt;&lt;/p&gt;</div><div class="line">&lt;/#list&gt;</div><div class="line"></div><div class="line">// data属性存储testD</div><div class="line">&lt;p data-isShow=&quot;$&#123;(testD!false)?string(&apos;yes&apos;, &apos;no&apos;)&#125;&quot;&gt; // testD为true时，属性记录为yes，为false时或取不到时为false</div><div class="line"></div><div class="line">// data属性存储testE.eData</div><div class="line">&lt;p data-isShow=&quot;$&#123;((testE.eData)!false)?string(&apos;yes&apos;, &apos;no&apos;)&#125;&quot;&gt; // testD为true时，属性记录为yes，为false时或取不到时为false</div><div class="line"></div><div class="line">...</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      freemarker部分语法
    
    </summary>
    
    
      <category term="FreeMarker" scheme="http://pimichen.com/tags/freemarker/"/>
    
  </entry>
  
  <entry>
    <title>复选框全选和取消全选问题</title>
    <link href="http://pimichen.com/jquery/%E5%A4%8D%E9%80%89%E6%A1%86%E5%85%A8%E9%80%89%E5%8F%96%E6%B6%88%E5%85%A8%E9%80%89%E9%97%AE%E9%A2%98.html"/>
    <id>http://pimichen.com/jquery/复选框全选取消全选问题.html</id>
    <published>2017-11-02T11:18:47.841Z</published>
    <updated>2017-12-20T06:37:24.047Z</updated>
    
    <content type="html"><![CDATA[<p>结构如下<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">全选：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"choiceAll"</span>&gt;</span></div><div class="line"></div><div class="line">北京：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"choiceSingle"</span>&gt;</span></div><div class="line">上海：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"choiceSingle"</span>&gt;</span></div><div class="line">广州：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"choiceSingle"</span>&gt;</span></div><div class="line">深圳：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"choiceSingle"</span>&gt;</span></div></pre></td></tr></table></figure></p><p>最初想到的解决办法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">$(&apos;.choiceAll&apos;).on(&apos;click&apos;, function () &#123;</div><div class="line">    if ($(this).is(&quot;:checked&quot;)) &#123;</div><div class="line">        toChoiceAll();</div><div class="line">    &#125; else &#123;</div><div class="line">        toCancelChoiceAll();</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">// 全选</div><div class="line">var toChoiceAll = function () &#123;</div><div class="line">    $(&quot;.choiceSingle&quot;).(&quot;checked&quot;, true);</div><div class="line">&#125;;</div><div class="line">// 取消全选</div><div class="line">var toCancelChoiceAll = function () &#123;</div><div class="line">    $(&quot;.choiceSingle&quot;).(&quot;checked&quot;, false);</div><div class="line">    // 或 $(&quot;.choiceSingle&quot;).removeAttr(&quot;checked&quot;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><p>测试的时候我们会发现，第一次全选和取消全选是OK的，但是第二次后会出问题，观察dom，发现第二次全选之后，每个自己复选框的checked确实是移除了，但是页面却没有及时更新，这个时候我们需要遍历每一个然后再处理</p><p>正确的处理方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">// 点击全选复选框</div><div class="line">$(&apos;.choiceAll&apos;).on(&apos;click&apos;, function () &#123;</div><div class="line">    if ($(this).is(&quot;:checked&quot;)) &#123;</div><div class="line">        toChoiceAll();</div><div class="line">    &#125; else &#123;</div><div class="line">        toCancelChoiceAll();</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">// 全选</div><div class="line">var toChoiceAll = function () &#123;</div><div class="line">    $(&quot;.choiceSingle&quot;).each(function()&#123;</div><div class="line">        $(this).prop(&quot;checked&quot;, true);</div><div class="line">    &#125;);</div><div class="line">&#125;;</div><div class="line">// 取消全选</div><div class="line">var toCancelChoiceAll = function () &#123;</div><div class="line">    $(&quot;.choiceSingle&quot;).each(function()&#123;</div><div class="line">        $(this).prop(&quot;checked&quot;, false);</div><div class="line">    &#125;);</div><div class="line">&#125;;</div><div class="line">// 点击批量退款按钮</div><div class="line">$(&apos;#refundBtn&apos;).on(&apos;click&apos;, function (event) &#123;</div><div class="line">    // 下面增加了一个收集子级（其他页面结构）中的某个id值</div><div class="line">    var checkNode = $(&apos;.choiceSingle&apos;);</div><div class="line">    var idNode = $(&apos;.refundId&apos;);</div><div class="line">    var checkedList = [];</div><div class="line">    for (var i = 0, len = idNode.length; i &lt; len; i++) &#123;</div><div class="line">        if (checkNode.eq(i).is(&quot;:checked&quot;)) &#123;</div><div class="line">            checkedList.push(idNode.eq(i).text());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    if (checkedList.length === 0) return false;</div><div class="line">    // 用checkedList发起请求</div><div class="line">    // ...</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      复选框全选和取消全选问题
    
    </summary>
    
    
      <category term="jQuery" scheme="http://pimichen.com/tags/jquery/"/>
    
  </entry>
  
  <entry>
    <title>移动端开发devtools</title>
    <link href="http://pimichen.com/javascript/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BC%80%E5%8F%91devtools.html"/>
    <id>http://pimichen.com/javascript/移动端开发devtools.html</id>
    <published>2017-10-27T07:00:50.448Z</published>
    <updated>2017-10-30T03:16:21.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>来源：<a href="https://github.com/liriliri/eruda" target="_blank" rel="external">eruda</a></p></blockquote><p>CDN:<a href="https://cdn.bootcss.com/eruda/1.2.6/eruda.min.js" target="_blank" rel="external">https://cdn.bootcss.com/eruda/1.2.6/eruda.min.js</a></p><p>用法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;script src=<span class="string">"https://cdn.bootcss.com/eruda/1.2.6/eruda.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line">&lt;script&gt;</div><div class="line">  <span class="built_in">window</span>.eruda.init();</div><div class="line">  <span class="comment">// 自定义显示面板，默认全显示</span></div><div class="line">  <span class="comment">// window.eruda.init(&#123;</span></div><div class="line">  <span class="comment">//   tool: ['console', 'element']</span></div><div class="line">  <span class="comment">// &#125;);</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">&lt;script&gt;</span></div><div class="line"><span class="regexp">  /</span><span class="regexp">/ test</span></div><div class="line"><span class="regexp">  console.log('11111');</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">  var obj = &#123;</span></div><div class="line"><span class="regexp">    a: '1',</span></div><div class="line"><span class="regexp">    b: '2', </span></div><div class="line"><span class="regexp">    c: '3'</span></div><div class="line"><span class="regexp">  &#125;;</span></div><div class="line"><span class="regexp">  console.log(obj);</span></div><div class="line"><span class="regexp">  console.dir(obj);</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">  window.localStorage.setItem('a', '123');</span></div><div class="line"><span class="regexp">&lt;/</span>script&gt;</div></pre></td></tr></table></figure></p><p>DEMO:<br><img src="../images/javascript/mobile-console-demo.png" width="200px"></p><blockquote><p>非常感谢<a href="https://github.com/liriliri" target="_blank" rel="external">liriliri</a>提供的<a href="https://github.com/liriliri/eruda" target="_blank" rel="external">eruda</a>工具，非常赞</p></blockquote>]]></content>
    
    <summary type="html">
    
      移动端开发devtools迷你版
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://pimichen.com/tags/javascript/"/>
    
      <category term="Tools" scheme="http://pimichen.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>js判断对象object中存在某个key</title>
    <link href="http://pimichen.com/javascript/%E5%88%A4%E6%96%AD%E5%AF%B9%E8%B1%A1%E4%B8%AD%E5%AD%98%E5%9C%A8%E6%9F%90%E4%B8%AAkey.html"/>
    <id>http://pimichen.com/javascript/判断对象中存在某个key.html</id>
    <published>2017-10-27T03:33:18.964Z</published>
    <updated>2017-10-27T03:51:54.389Z</updated>
    
    <content type="html"><![CDATA[<p>判断某个object中是否存在某个key，此处不作value真实值判断，key存在即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var obj = &#123;</div><div class="line">  a: &quot;Jack&quot;,</div><div class="line">  b: &quot;Mark&quot;,</div><div class="line">  methodA: function () &#123;</div><div class="line"></div><div class="line">  &#125;,</div><div class="line">  methodB: function () &#123;</div><div class="line"></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><p>直接取key（返回vlaue/undefined）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (obj &amp;&amp; obj.a) &#123;</div><div class="line">  <span class="comment">// 存在的处理</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (obj &amp;&amp; obj.methodA) &#123;</div><div class="line">  <span class="comment">// 存在的处理</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>[]取值（返回value/undefined）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (obj &amp;&amp; obj[<span class="string">"a"</span>]) &#123;</div><div class="line">  <span class="comment">// 存在的处理</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (obj &amp;&amp; obj[<span class="string">"methodA"</span>]) &#123;</div><div class="line">  <span class="comment">// 存在的处理</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>in 关键字（返回true/false）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (obj &amp;&amp; <span class="string">"a"</span> <span class="keyword">in</span> obj) &#123;</div><div class="line">  <span class="comment">// 存在的处理</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (obj &amp;&amp; <span class="string">"methodA"</span> <span class="keyword">in</span> obj) &#123;</div><div class="line">  <span class="comment">// 存在的处理</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>hasOwnProperty判断属性是否存在（返回true/false）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (obj &amp;&amp; obj.hasOwnProperty(<span class="string">"a"</span>)) &#123;</div><div class="line">  <span class="comment">// 存在的处理</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (obj &amp;&amp; obj.hasOwnProperty(<span class="string">"methodA"</span>)) &#123;</div><div class="line">  <span class="comment">// 存在的处理</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><p>注：<br>方法1和方法2通过取值的方式不够稳妥，假如改key的真实取值就是undefined，那么便会出问题，方法3和方法4比较靠谱。</p>]]></content>
    
    <summary type="html">
    
      js判断对象object中存在某个key值，检测存不存在
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://pimichen.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>jquery上传excel等文件</title>
    <link href="http://pimichen.com/jquery/jquery%E4%B8%8A%E4%BC%A0excel%E7%AD%89%E6%96%87%E4%BB%B6.html"/>
    <id>http://pimichen.com/jquery/jquery上传excel等文件.html</id>
    <published>2017-10-16T07:07:12.315Z</published>
    <updated>2017-10-16T09:33:47.479Z</updated>
    
    <content type="html"><![CDATA[<p>在实际应用中，有时我们需要将一个excel表上传给后端同学进行数据传递，那么怎么实现呢？</p><p>FormData对象法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!doctype html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span></span></div><div class="line"><span class="tag">          <span class="attr">content</span>=<span class="string">"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css">        <span class="selector-class">.test-form</span>&#123;</span></div><div class="line"><span class="undefined">            display: inline-block;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="css">        <span class="selector-class">.show-name</span>&#123;</span></div><div class="line"><span class="undefined">            display: inline-block;</span></div><div class="line"><span class="undefined">            width: 200px;</span></div><div class="line"><span class="undefined">            height: 36px;</span></div><div class="line"><span class="undefined">            line-height: 36px;</span></div><div class="line"><span class="undefined">            padding: 0 10px;</span></div><div class="line"><span class="undefined">            overflow: hidden;</span></div><div class="line"><span class="undefined">            text-overflow: ellipsis;</span></div><div class="line"><span class="undefined">            white-space: nowrap;</span></div><div class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></div><div class="line"><span class="undefined">            vertical-align: middle;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="css">        <span class="selector-class">.submit-btn</span>&#123;</span></div><div class="line"><span class="undefined">            display: inline-block;</span></div><div class="line"><span class="undefined">            width: 80px;</span></div><div class="line"><span class="undefined">            height: 36px;</span></div><div class="line"><span class="undefined">            border: none;</span></div><div class="line"><span class="undefined">            outline: none;</span></div><div class="line"><span class="undefined">            vertical-align: middle;</span></div><div class="line"><span class="undefined">            font-size: 16px;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="css">        <span class="selector-class">.show-error</span>&#123;</span></div><div class="line"><span class="undefined">            display: inline-block;</span></div><div class="line"><span class="undefined">            height: 36px;</span></div><div class="line"><span class="undefined">            line-height: 36px;</span></div><div class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#f00</span>;</span></div><div class="line"><span class="undefined">            display: none;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"testInput"</span> <span class="attr">accept</span>=<span class="string">".xls, .xlsx"</span> <span class="attr">style</span>=<span class="string">"left:-9999px;position:absolute;"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"show-name"</span> <span class="attr">id</span>=<span class="string">"showName"</span>&gt;</span>请选择你要上传的文件<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"submit-btn"</span> <span class="attr">id</span>=<span class="string">"submitBtn"</span>&gt;</span>上传<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"show-error"</span> <span class="attr">id</span>=<span class="string">"showError"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/2.2.3/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">        _fileUpload();</span></div><div class="line"><span class="javascript">        $(<span class="string">'#submitBtn'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span></div><div class="line"><span class="javascript">            <span class="keyword">var</span> fileInput = $(<span class="string">"#testInput"</span>);</span></div><div class="line"><span class="javascript">            <span class="keyword">var</span> errorText = $(<span class="string">'#showError'</span>);</span></div><div class="line"><span class="javascript">            <span class="keyword">if</span> (fileInput.val() === <span class="string">''</span>) &#123;</span></div><div class="line"><span class="javascript">                errorText.show().text(<span class="string">'对不起，您还没有上传文件'</span>);</span></div><div class="line"><span class="javascript">                <span class="keyword">return</span> <span class="literal">false</span>;</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="javascript">            <span class="keyword">var</span> formData = <span class="keyword">new</span> FormData(); <span class="comment">// new FormData对象</span></span></div><div class="line"><span class="javascript">            <span class="keyword">var</span> file = fileInput[<span class="number">0</span>].files[<span class="number">0</span>]; <span class="comment">// 此处必须这样去到file对象</span></span></div><div class="line"><span class="javascript">            formData.append(<span class="string">'importTeacher'</span>, file);</span></div><div class="line"><span class="javascript">            $.ajax(&#123;</span></div><div class="line"><span class="javascript">                url: <span class="string">"/test.vpage"</span>,</span></div><div class="line"><span class="javascript">                type: <span class="string">"POST"</span>,</span></div><div class="line"><span class="undefined">                data: formData,</span></div><div class="line"><span class="javascript">                processData: <span class="literal">false</span>, <span class="comment">// 此处必须设置processData</span></span></div><div class="line"><span class="javascript">                contentType: <span class="literal">false</span>, <span class="comment">// 此处必须设置contentType</span></span></div><div class="line"><span class="javascript">                <span class="keyword">async</span>: <span class="literal">true</span>,</span></div><div class="line"><span class="undefined">                timeout: 5 * 60 * 1000,</span></div><div class="line"><span class="javascript">                success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></div><div class="line"><span class="javascript">                    <span class="keyword">if</span> (data.success) &#123;</span></div><div class="line"><span class="javascript">                        <span class="built_in">window</span>.alert(<span class="string">'上传成功'</span>);</span></div><div class="line"><span class="javascript">                    &#125; <span class="keyword">else</span> &#123;</span></div><div class="line"><span class="undefined">                        errorText.show().text(data.info);</span></div><div class="line"><span class="undefined">                    &#125;</span></div><div class="line"><span class="undefined">                &#125;</span></div><div class="line"><span class="undefined">            &#125;)</span></div><div class="line"><span class="undefined">        &#125;);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">_fileUpload</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">            $(<span class="built_in">document</span>).on(<span class="string">"change"</span>, <span class="string">'#testInput'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">                $(<span class="string">'#showError'</span>).hide().text(<span class="string">''</span>);</span></div><div class="line"><span class="javascript">                <span class="keyword">var</span> fileInput = $(<span class="string">'#testInput'</span>).val();</span></div><div class="line"><span class="javascript">                fileInput = fileInput.substring(fileInput.lastIndexOf(<span class="string">"\\"</span>) + <span class="number">1</span>);</span></div><div class="line"><span class="javascript">                $(<span class="string">'#showName'</span>).text(fileInput);</span></div><div class="line"><span class="undefined">            &#125;);</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><p>温馨提示：FormData()在IE8下会有兼容性</p><p>结果图例：<br><img src="../images/jquery/upload-reult-demo.png" width="300px"></p><blockquote><p>参考：<a href="http://www.toutiao.com/a6477148984946197006/?tt_from=mobile_qq&amp;utm_campaign=client_share&amp;app=news_article&amp;utm_source=mobile_qq&amp;iid=15966553967&amp;utm_medium=toutiao_ios" target="_blank" rel="external">web上传的几种方式</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      jquery上传excel等文件
    
    </summary>
    
    
      <category term="jQuery" scheme="http://pimichen.com/tags/jquery/"/>
    
  </entry>
  
  <entry>
    <title>获取form表单的文件名</title>
    <link href="http://pimichen.com/jquery/%E8%8E%B7%E5%8F%96form%E8%A1%A8%E5%8D%95%E4%B8%8A%E4%BC%A0%E7%9A%84%E6%96%87%E4%BB%B6%E5%90%8D.html"/>
    <id>http://pimichen.com/jquery/获取form表单上传的文件名.html</id>
    <published>2017-10-16T03:40:54.132Z</published>
    <updated>2017-10-16T03:45:05.806Z</updated>
    
    <content type="html"><![CDATA[<h2 id="正则法取文件名"><a href="#正则法取文件名" class="headerlink" title="正则法取文件名"></a>正则法取文件名</h2><p>上传后input的value值为：”C:\fakepath\工作簿1.xlsx”这种格式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#testInput'</span>).val().substring($(<span class="string">'#testInput'</span>).val().lastIndexOf(<span class="string">"\\"</span>) + <span class="number">1</span>) <span class="comment">// 第一个表示转义符号</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      获取form表单的文件名，如上传的图片名称或excel文件名
    
    </summary>
    
    
      <category term="jQuery" scheme="http://pimichen.com/tags/jquery/"/>
    
  </entry>
  
  <entry>
    <title>等宽数字字体</title>
    <link href="http://pimichen.com/css/%E7%AD%89%E5%AE%BD%E6%95%B0%E5%AD%97%E5%AD%97%E4%BD%93.html"/>
    <id>http://pimichen.com/css/等宽数字字体.html</id>
    <published>2017-10-13T07:27:20.434Z</published>
    <updated>2017-10-13T07:31:46.212Z</updated>
    
    <content type="html"><![CDATA[<p>对于变化的数字来说，每个数字的宽度会直接影响视觉上是否有颤动的效果。</p><p>如在进行倒计时时，12:59:59 和 12:11:11 ，由于数字1的默认宽度会比数字5和9等要小，所以倒计时的时候数字的位置可能会时刻变化，对于有明显参照的背景来说，这种抖动的效果是不好的，所以设置等宽数字是有必要的。</p><p>设置下面这个字体即可解决<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">font-family: TrebuchetMS,Rotobo,&quot;Microsoft YaHei&quot;,sans-serif;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      等款数字字体，数字变化时不会抖动
    
    </summary>
    
    
      <category term="CSS" scheme="http://pimichen.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>knockout使用script内嵌模板</title>
    <link href="http://pimichen.com/knockout/knockout%E4%BD%BF%E7%94%A8script%E5%86%85%E5%B5%8C%E6%A8%A1%E6%9D%BF.html"/>
    <id>http://pimichen.com/knockout/knockout使用script内嵌模板.html</id>
    <published>2017-09-28T02:39:20.000Z</published>
    <updated>2017-09-28T02:39:47.000Z</updated>
    
    <summary type="html">
    
      knockout使用script内嵌模板
    
    </summary>
    
    
      <category term="KnockOut" scheme="http://pimichen.com/tags/knockout/"/>
    
  </entry>
  
  <entry>
    <title>knockout模板绑定和控制语法</title>
    <link href="http://pimichen.com/knockout/knockout%E6%A8%A1%E6%9D%BF%E7%BB%91%E5%AE%9A%E5%92%8C%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5.html"/>
    <id>http://pimichen.com/knockout/knockout模板绑定和控制语句.html</id>
    <published>2017-09-26T10:20:48.000Z</published>
    <updated>2017-09-27T10:45:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常见方法"><a href="#常见方法" class="headerlink" title="常见方法"></a>常见方法</h2><h3 id="text"><a href="#text" class="headerlink" title="text"></a>text</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">name(&apos;哈哈&apos;);</div><div class="line"></div><div class="line">&lt;p data-bind=&quot;text: name&quot;&gt;&lt;/p&gt;</div></pre></td></tr></table></figure><h3 id="html"><a href="#html" class="headerlink" title="html"></a>html</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">errorText(&apos;第1行有name错误&lt;br&gt;第二行有id不匹配&apos;);</div><div class="line"></div><div class="line">&lt;p data-bind=&quot;html: errorText&quot;&gt;&lt;/p&gt;</div></pre></td></tr></table></figure><h3 id="visible"><a href="#visible" class="headerlink" title="visible"></a>visible</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">isShow(true);</div><div class="line"></div><div class="line">&lt;div data-bind=&quot;visible: isShow&quot;&gt;哈哈，看见我了&lt;/div&gt;</div></pre></td></tr></table></figure><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">写法1：</div><div class="line">isShow(true);</div><div class="line"></div><div class="line">&lt;div data-bind=&quot;if: isShow&quot;&gt;哈哈，看见我了&lt;/div&gt;</div><div class="line"></div><div class="line">写法2：</div><div class="line">isShow(false);</div><div class="line"></div><div class="line">&lt;!-- ko if:isShow --&gt;</div><div class="line">&lt;div&gt;哈哈，看见我了&lt;/div&gt;</div><div class="line">&lt;!-- /ko --&gt;</div></pre></td></tr></table></figure><h3 id="ifnot"><a href="#ifnot" class="headerlink" title="ifnot"></a>ifnot</h3><p>字面意思，if取反</p><h3 id="if和visible的区别"><a href="#if和visible的区别" class="headerlink" title="if和visible的区别"></a>if和visible的区别</h3><p>if不显示时dom不存在，visible存在</p><h3 id="css-class"><a href="#css-class" class="headerlink" title="css(class)"></a>css(class)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">profitWarning(-50);</div><div class="line"></div><div class="line">&lt;div data-bind=&quot;css: &#123;profitWarning: currentProfit() &lt; 0&#125;&quot;&gt;&lt;/div&gt;</div></pre></td></tr></table></figure><h3 id="style"><a href="#style" class="headerlink" title="style"></a>style</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">profitWarning(-50);</div><div class="line"></div><div class="line">&lt;div data-bind=&quot;style: &#123;color: currentProfit() &lt; 0 ? &apos;red&apos; : &apos;black&apos;, fontWeight: isSevere() ? &apos;bold&apos; : &apos;&apos;&#125;&quot;&gt;&lt;/div&gt;</div></pre></td></tr></table></figure><h3 id="attr"><a href="#attr" class="headerlink" title="attr"></a>attr</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">url(&apos;http://www.****&apos;);</div><div class="line">detail(&apos;我是title&apos;);</div><div class="line"></div><div class="line">&lt;a href=&quot;&quot; data-bind=&quot;attr: &#123;href: url, title: details&#125;&quot;&gt;&lt;/a&gt;</div></pre></td></tr></table></figure><h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><h4 id="foreach遍历简单数组"><a href="#foreach遍历简单数组" class="headerlink" title="foreach遍历简单数组"></a>foreach遍历简单数组</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;ul data-bind=&quot;foreach: months&quot;&gt;</div><div class="line">  &lt;li&gt;</div><div class="line">    The current item is: &lt;b data-bind=&quot;text: $data&quot;&gt;&lt;/b&gt;</div><div class="line">  &lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div><div class="line"></div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt; </div><div class="line">  ko.applyBindings(&#123;</div><div class="line">      months: [ &apos;Jan&apos;, &apos;Feb&apos;, &apos;Mar&apos;, &apos;etc&apos; ]</div><div class="line">  &#125;);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><h4 id="foreach遍历复杂数组"><a href="#foreach遍历复杂数组" class="headerlink" title="foreach遍历复杂数组"></a>foreach遍历复杂数组</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">&lt;div data-bind=&quot;foreach: teacherList&quot;&gt;</div><div class="line">  &lt;p&gt;</div><div class="line">    索引:&lt;span data-bind=&quot;text: $index&quot;&gt;&lt;/span&gt;</div><div class="line">    teacherID:&lt;span data-bind=&quot;text: teacheId&quot;&gt;&lt;/span&gt;</div><div class="line">    teacherName:&lt;span data-bind=&quot;text: teacheName&quot;&gt;&lt;/span&gt;</div><div class="line">    &lt;button data-bind=&quot;click: $parent.removeMe&quot;&gt;删除&lt;/button&gt;</div><div class="line">  &lt;/p&gt;</div><div class="line">  &lt;button data-bind=&quot;click: addOne&quot;&gt;增加&lt;/button&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">  function AppViewModel() &#123;</div><div class="line">    var self = this;</div><div class="line">    self.teacherList([</div><div class="line">      &#123;</div><div class="line">        teacheId: &apos;001&apos;,</div><div class="line">        teacheName: &apos;哈哈&apos;</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        teacheId: &apos;002&apos;,</div><div class="line">        teacheName: &apos;嘻嘻&apos;</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        teacheId: &apos;003&apos;,</div><div class="line">        teacheName: &apos;呵呵&apos;</div><div class="line">      &#125;</div><div class="line">    ]);</div><div class="line">    self.removeMe = function () &#123;</div><div class="line">      self.teacherList.remove(this);</div><div class="line">    &#125;;</div><div class="line">    self.addOne = function () &#123;</div><div class="line">      self.teacherList.push(&#123;</div><div class="line">        teacheId: &apos;004&apos;,</div><div class="line">        teacheName: &apos;喔喔&apos;</div><div class="line">      &#125;)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  ko.applyBindings(new AppViewModel());</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><h4 id="foreach注释语法"><a href="#foreach注释语法" class="headerlink" title="foreach注释语法"></a>foreach注释语法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;ul&gt;</div><div class="line">  &lt;li class=&quot;header&quot;&gt;Header item&lt;/li&gt;</div><div class="line">  &lt;!-- ko foreach: myItems --&gt;</div><div class="line">    &lt;li&gt;Item &lt;span data-bind=&quot;text: $data&quot;&gt;&lt;/span&gt;&lt;/li&gt;</div><div class="line">  &lt;!-- /ko --&gt;</div><div class="line">&lt;/ul&gt;</div><div class="line"></div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">  ko.applyBindings(&#123;</div><div class="line">      myItems: [ &apos;A&apos;, &apos;B&apos;, &apos;C&apos; ]</div><div class="line">  &#125;);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><h3 id="with控制流"><a href="#with控制流" class="headerlink" title="with控制流"></a>with控制流</h3><h4 id="wtih正常写法"><a href="#wtih正常写法" class="headerlink" title="wtih正常写法"></a>wtih正常写法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">当父级是ko对象，子级是非ko对象，在模板中我们不能直接查找子级a().b()，这样是不OK得，我们可以借助with语法实现这种情况的渲染，父级with:a()，然后就可以直接使用子级了</div><div class="line"></div><div class="line">&lt;h1 data-bind=&quot;text: city&quot;&gt; &lt;/h1&gt;</div><div class="line">&lt;p data-bind=&quot;with: coords&quot;&gt;</div><div class="line">  Latitude: &lt;span data-bind=&quot;text: latitude&quot;&gt; &lt;/span&gt;,</div><div class="line">  Longitude: &lt;span data-bind=&quot;text: longitude&quot;&gt; &lt;/span&gt;</div><div class="line">&lt;/p&gt;</div><div class="line"> </div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt; </div><div class="line">  ko.applyBindings(&#123;</div><div class="line">    city: &quot;London&quot;,</div><div class="line">    coords: &#123;</div><div class="line">      latitude:  51.5001524,</div><div class="line">      longitude: -0.1262362</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><h4 id="with注释写法"><a href="#with注释写法" class="headerlink" title="with注释写法"></a>with注释写法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;ul&gt;</div><div class="line">  &lt;li&gt;Header element&lt;/li&gt;</div><div class="line">  &lt;!-- ko with: outboundFlight --&gt;</div><div class="line">    &lt;div data-bind=&quot;text: outsize&quot;&gt;&lt;/div&gt;</div><div class="line">  &lt;!-- /ko --&gt;</div><div class="line">  &lt;!-- ko with: inboundFlight --&gt;</div><div class="line">    &lt;div data-bind=&quot;text: insize&quot;&gt;&lt;/div&gt;</div><div class="line">  &lt;!-- /ko --&gt;</div><div class="line">&lt;/ul&gt;</div><div class="line"></div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">  ko.applyBindings(&#123;</div><div class="line">    outboundFlight: &#123;</div><div class="line">      outsize: 51.5001524</div><div class="line">    &#125;,</div><div class="line">    inboundFlight: &#123;</div><div class="line">      insize: 32.2323423</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><h2 id="form场景"><a href="#form场景" class="headerlink" title="form场景"></a>form场景</h2><h3 id="click"><a href="#click" class="headerlink" title="click"></a>click</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">写法1：渲染时执行</div><div class="line">&lt;button data-bind=&quot;click: clickBtn&quot;&gt;&lt;/button&gt;</div><div class="line"></div><div class="line">写法2：带bind，不触发不执行</div><div class="line">&lt;button data-bind=&quot;click: clickBtn.bind($data)&quot;&gt;&lt;/button&gt;</div><div class="line"></div><div class="line">注意：点击方法前可能得加$root、$parent等前缀，示层级而定</div><div class="line"></div><div class="line">也可以将点击事件包装起来：</div><div class="line"></div><div class="line">写法3：</div><div class="line">&lt;button data-bind=&quot;click: function(data, event) &#123; myFunction(&apos;param1&apos;, &apos;param2&apos;, data, event) &#125;&quot;&gt;&lt;/button&gt;</div></pre></td></tr></table></figure><h3 id="event表单事件"><a href="#event表单事件" class="headerlink" title="event表单事件"></a>event表单事件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;</div><div class="line">  &lt;div data-bind=&quot;event: &#123; mouseover: enableDetails, mouseout: disableDetails &#125;&quot;&gt;</div><div class="line">      Mouse over me</div><div class="line">  &lt;/div&gt;</div><div class="line">  &lt;div data-bind=&quot;visible: detailsEnabled&quot;&gt;</div><div class="line">      Details</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">  var viewModel = &#123;</div><div class="line">    detailsEnabled: ko.observable(false),</div><div class="line">    enableDetails: function() &#123;</div><div class="line">      this.detailsEnabled(true);</div><div class="line">    &#125;,</div><div class="line">    disableDetails: function() &#123;</div><div class="line">      this.detailsEnabled(false);</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">  ko.applyBindings(viewModel);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><h3 id="submit表单提交"><a href="#submit表单提交" class="headerlink" title="submit表单提交"></a>submit表单提交</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;form data-bind=&quot;submit: doSomething&quot;&gt;</div><div class="line">  ... form contents go here ...</div><div class="line">  &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt;</div><div class="line">&lt;/form&gt;</div><div class="line"></div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt; </div><div class="line">  var viewModel = &#123;</div><div class="line">    doSomething : function(formElement) &#123;</div><div class="line">      // ... now do something</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><h3 id="enable-or-disable表单禁用"><a href="#enable-or-disable表单禁用" class="headerlink" title="enable or disable表单禁用"></a>enable or disable表单禁用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;</div><div class="line">    &lt;input type=&apos;checkbox&apos; data-bind=&quot;checked: hasCellphone&quot; /&gt;</div><div class="line">    I have a cellphone</div><div class="line">&lt;/p&gt;</div><div class="line">&lt;p&gt;</div><div class="line">    Your cellphone number:</div><div class="line">    &lt;input type=&apos;text&apos; data-bind=&quot;value: cellphoneNumber, enable: hasCellphone&quot; /&gt;</div><div class="line">&lt;/p&gt;</div><div class="line"> </div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">  var viewModel = &#123;</div><div class="line">    hasCellphone : ko.observable(false),</div><div class="line">    cellphoneNumber: &quot;&quot;</div><div class="line">  &#125;;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><h3 id="value-or-textInput表单输入"><a href="#value-or-textInput表单输入" class="headerlink" title="value or textInput表单输入"></a>value or textInput表单输入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">textInput同value的性质是一致的，但是textInput是在view改变之后，model立即改变，达到即时更新。</div><div class="line"></div><div class="line">&lt;p&gt;Login name: &lt;input data-bind=&quot;value: userName&quot; /&gt;&lt;/p&gt;</div><div class="line">&lt;p&gt;Password: &lt;input type=&quot;password&quot; data-bind=&quot;value: userPassword&quot; /&gt;&lt;/p&gt;</div><div class="line"> </div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">  var viewModel = &#123;</div><div class="line">    userName: ko.observable(&quot;&quot;),        // Initially blank</div><div class="line">    userPassword: ko.observable(&quot;abc&quot;), // Prepopulate</div><div class="line">  &#125;;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><h3 id="hasFocus表单聚焦"><a href="#hasFocus表单聚焦" class="headerlink" title="hasFocus表单聚焦"></a>hasFocus表单聚焦</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">判断表单是否激活，处理不同情况，可点击按钮手动触发激活输入框</div><div class="line"></div><div class="line">&lt;input data-bind=&quot;hasFocus: isSelected&quot; /&gt;</div><div class="line">&lt;button data-bind=&quot;click: setIsSelected&quot;&gt;Focus programmatically&lt;/button&gt;</div><div class="line">&lt;span data-bind=&quot;visible: isSelected&quot;&gt;The textbox has focus&lt;/span&gt;</div><div class="line"></div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">  var viewModel = &#123;</div><div class="line">    isSelected: ko.observable(false),</div><div class="line">    setIsSelected: function() &#123; </div><div class="line">      this.isSelected(true) </div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">  ko.applyBindings(viewModel);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><h3 id="checked单选框复选框被选中"><a href="#checked单选框复选框被选中" class="headerlink" title="checked单选框复选框被选中"></a>checked单选框复选框被选中</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">根据变量来控制复选框的选中与否</div><div class="line">&lt;p&gt;Send me spam: &lt;input type=&quot;checkbox&quot; data-bind=&quot;checked: wantsSpam&quot; /&gt;&lt;/p&gt;</div><div class="line"> </div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">    var viewModel = &#123;</div><div class="line">        wantsSpam: ko.observable(true) // Initially checked</div><div class="line">    &#125;;</div><div class="line"> </div><div class="line">    // ... then later ...</div><div class="line">    viewModel.wantsSpam(false); // The checkbox becomes unchecked</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><h3 id="select-option下拉框"><a href="#select-option下拉框" class="headerlink" title="select option下拉框"></a>select option下拉框</h3><h4 id="简单遍历-单选"><a href="#简单遍历-单选" class="headerlink" title="简单遍历-单选"></a>简单遍历-单选</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;</div><div class="line">  Destination country:</div><div class="line">  &lt;select data-bind=&quot;options: availableCountries&quot;&gt;&lt;/select&gt;</div><div class="line">&lt;/p&gt;</div><div class="line"> </div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">  var viewModel = &#123;</div><div class="line">    // These are the initial options</div><div class="line">    availableCountries: ko.observableArray([&apos;France&apos;, &apos;Germany&apos;, &apos;Spain&apos;])</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  // ... then later ...</div><div class="line">  viewModel.availableCountries.push(&apos;China&apos;); // Adds another option</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><h4 id="简单遍历-多选"><a href="#简单遍历-多选" class="headerlink" title="简单遍历-多选"></a>简单遍历-多选</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;</div><div class="line">  Choose some countries you would like to visit:</div><div class="line">  &lt;select data-bind=&quot;options: availableCountries&quot; size=&quot;5&quot; multiple=&quot;true&quot;&gt;&lt;/select&gt;</div><div class="line">&lt;/p&gt;</div><div class="line"> </div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">  var viewModel = &#123;</div><div class="line">      availableCountries: ko.observableArray([&apos;France&apos;, &apos;Germany&apos;, &apos;Spain&apos;])</div><div class="line">  &#125;;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><h4 id="复杂遍历"><a href="#复杂遍历" class="headerlink" title="复杂遍历"></a>复杂遍历</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">options: 表示遍历的数组项，如果层级很深，可以在外层考虑绑定with，实现简化层级</div><div class="line">optionsText: 下拉框展示的文案，及数组中某一项的某个字段</div><div class="line">value: 当前文案</div><div class="line">optionsCaption: 默认显示的文案，改默认文案不对应任何值</div><div class="line">event-change: 下拉框触发改变</div><div class="line"></div><div class="line">&lt;p&gt;</div><div class="line">  Your country:</div><div class="line">  &lt;select data-bind=&quot;options: availableCountries,</div><div class="line">                     optionsText: &apos;countryName&apos;,</div><div class="line">                     value: selectedCountry,</div><div class="line">                     optionsCaption: &apos;Choose...&apos;,</div><div class="line">                     event: &#123;change: selectChange&#125;&quot;&gt;&lt;/select&gt;</div><div class="line">&lt;/p&gt;</div><div class="line"> </div><div class="line">&lt;div data-bind=&quot;visible: selectedCountry&quot;&gt; &lt;!-- Appears when you select something --&gt;</div><div class="line">  You have chosen a country with population</div><div class="line">  &lt;span data-bind=&quot;text: selectedCountry() ? selectedCountry().countryPopulation : &apos;unknown&apos;&quot;&gt;&lt;/span&gt;.</div><div class="line">&lt;/div&gt;</div><div class="line"> </div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">  // Constructor for an object with two properties</div><div class="line">  var Country = function(name, population) &#123;</div><div class="line">    this.countryName = name;</div><div class="line">    this.countryPopulation = population;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  var viewModel = &#123;</div><div class="line">    availableCountries : ko.observableArray([</div><div class="line">        new Country(&quot;UK&quot;, 65000000),</div><div class="line">        new Country(&quot;USA&quot;, 320000000),</div><div class="line">        new Country(&quot;Sweden&quot;, 29000000)</div><div class="line">    ]),</div><div class="line">    selectedCountry : ko.observable(), // Nothing selected by default</div><div class="line">    selectChange: function () &#123;</div><div class="line">      alert(&apos;下拉框变化了&apos;);</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><h4 id="多级下拉框"><a href="#多级下拉框" class="headerlink" title="多级下拉框"></a>多级下拉框</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div></pre></td><td class="code"><pre><div class="line">对于像三级城市列表那种的下拉框，每一个下拉框的改变都需要刷新下一个下拉框或页面的数据，select之间必须联动，此例我故意将城市数据层级设置城多级</div><div class="line"></div><div class="line">&lt;p data-bind=&quot;text: para()&quot;&gt;&lt;/p&gt;</div><div class="line">&lt;!-- ko with:bigData().smallData --&gt;</div><div class="line">  &lt;select data-bind=&quot;options: provinces,</div><div class="line">                     optionsText: &apos;provinceName&apos;,</div><div class="line">                     value: $root.firstValue,</div><div class="line">                     optionsCaption: &apos;选择省份&apos;,</div><div class="line">                     event: &#123;change: firstSelectChange&#125;&quot;&gt;&lt;/select&gt;</div><div class="line">&lt;!-- /ko --&gt;</div><div class="line"></div><div class="line">&lt;!-- ko with: $root.firstValue --&gt;</div><div class="line">  &lt;select data-bind=&quot;options: citys,</div><div class="line">                     optionsText: &apos;cityName&apos;,</div><div class="line">                     value: $root.secondValue,</div><div class="line">                     optionsCaption: &apos;选择城市&apos;,</div><div class="line">                     event: &#123;change: secondSelectChange&#125;&quot;&gt;&lt;/select&gt;</div><div class="line">&lt;!-- /ko --&gt;                     </div><div class="line"></div><div class="line">&lt;!-- ko with: $root.secondValue --&gt;</div><div class="line">  &lt;select data-bind=&quot;options: countys,</div><div class="line">                     optionsText: &apos;countyName&apos;,</div><div class="line">                     value: $root.thirdValue,</div><div class="line">                     optionsCaption: &apos;选择地区&apos;,</div><div class="line">                     event: &#123;change: thirdSelectChange&#125;&quot;&gt;&lt;/select&gt;</div><div class="line">&lt;!-- /ko --&gt;</div><div class="line"></div><div class="line">&lt;button data-bind=&quot;click: commit&quot;&gt;提交&lt;/button&gt;</div><div class="line"></div><div class="line"></div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">  var viewModel = &#123;</div><div class="line">      para: ko.observable(&apos;没错，我就是那个动态标题！&apos;),</div><div class="line">      bigData: ko.observable(&#123;</div><div class="line">        smallData: &#123;</div><div class="line">          provinces: [</div><div class="line">            &#123;</div><div class="line">              provinceId: &apos;010000&apos;,</div><div class="line">              provinceName: &apos;北京&apos;,</div><div class="line">              citys: [</div><div class="line">                &#123;</div><div class="line">                  cityId: &apos;010100&apos;,</div><div class="line">                  cityName: &apos;北京市&apos;,</div><div class="line">                  countys: [</div><div class="line">                    &#123;</div><div class="line">                      countyId: &apos;010101&apos;,</div><div class="line">                      countyName: &apos;东城区&apos;</div><div class="line">                    &#125;,</div><div class="line">                    &#123;</div><div class="line">                      countyId: &apos;010102&apos;,</div><div class="line">                      countyName: &apos;西城区&apos;</div><div class="line">                    &#125;</div><div class="line">                  ]</div><div class="line">                &#125;</div><div class="line">              ]</div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">              provinceId: &apos;090000&apos;,</div><div class="line">              provinceName: &apos;江西省&apos;,</div><div class="line">              citys: [</div><div class="line">                &#123;</div><div class="line">                  cityId: &apos;090100&apos;,</div><div class="line">                  cityName: &apos;南昌市&apos;,</div><div class="line">                  countys: [</div><div class="line">                    &#123;</div><div class="line">                      countyId: &apos;090101&apos;,</div><div class="line">                      countyName: &apos;东湖区&apos;</div><div class="line">                    &#125;,</div><div class="line">                    &#123;</div><div class="line">                      countyId: &apos;090102&apos;,</div><div class="line">                      countyName: &apos;西湖区&apos;</div><div class="line">                    &#125;</div><div class="line">                  ]</div><div class="line">                &#125;,</div><div class="line">                &#123;</div><div class="line">                  cityId: &apos;090200&apos;,</div><div class="line">                  cityName: &apos;九江市&apos;,</div><div class="line">                  countys: [</div><div class="line">                    &#123;</div><div class="line">                      countyId: &apos;090201&apos;,</div><div class="line">                      countyName: &apos;浔阳区&apos;</div><div class="line">                    &#125;</div><div class="line">                  ]</div><div class="line">                &#125;,</div><div class="line">                &#123;</div><div class="line">                  cityId: &apos;090300&apos;,</div><div class="line">                  cityName: &apos;景德镇市&apos;,</div><div class="line">                  countys: [</div><div class="line">                    &#123;</div><div class="line">                      countyId: &apos;090201&apos;,</div><div class="line">                      countyName: &apos;珠江区&apos;</div><div class="line">                    &#125;</div><div class="line">                  ]</div><div class="line">                &#125;</div><div class="line">              ]</div><div class="line">            &#125;</div><div class="line">          ]</div><div class="line">        &#125;</div><div class="line">      &#125;),</div><div class="line">      firstValue: ko.observable(&apos;&apos;),</div><div class="line">      secondValue: ko.observable(&apos;&apos;),</div><div class="line">      thirdValue: ko.observable(&apos;&apos;)</div><div class="line">  &#125;;</div><div class="line">  var firstSelectChange = function () &#123;</div><div class="line">    window.alert(&apos;点击了1号下拉框&apos;);</div><div class="line">  &#125;;</div><div class="line">  var secondSelectChange = function () &#123;</div><div class="line">    window.alert(&apos;点击了2号下拉框&apos;);</div><div class="line">  &#125;;</div><div class="line">  var thirdSelectChange = function () &#123;</div><div class="line">    window.alert(&apos;点击了3号下拉框&apos;);</div><div class="line">  &#125;;</div><div class="line">  var commit = function () &#123;</div><div class="line">    window.alert(&apos;我选择了：&apos; + viewModel.firstValue().provinceName + &apos;--&apos; + viewModel.secondValue().cityName + &apos;--&apos; + viewModel.thirdValue().countyName);</div><div class="line">  &#125;;</div><div class="line">  // 初始化数据（如果不加初始化数据，默认只出现第一个下拉框，选择后出现第二个，再选择出现第三个）</div><div class="line">  for (var i in viewModel.bigData().smallData.provinces) &#123;</div><div class="line">    if (viewModel.bigData().smallData.provinces[i].provinceId === &apos;010000&apos;) &#123;</div><div class="line">      viewModel.firstValue(viewModel.bigData().smallData.provinces[i]);</div><div class="line">      // break;</div><div class="line">    &#125;</div><div class="line">    for (var j in viewModel.bigData().smallData.provinces[i].citys) &#123;</div><div class="line">      if (viewModel.bigData().smallData.provinces[i].citys[j].cityId === &apos;010100&apos;) &#123;</div><div class="line">        viewModel.secondValue(viewModel.bigData().smallData.provinces[i].citys[j]);</div><div class="line">        // break;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  ko.applyBindings(viewModel);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      knockout模板绑定和控制语法:if/ifnot/with/foreach等
    
    </summary>
    
    
      <category term="KnockOut" scheme="http://pimichen.com/tags/knockout/"/>
    
  </entry>
  
  <entry>
    <title>knockout初始化</title>
    <link href="http://pimichen.com/knockout/knockout%E5%88%9D%E5%A7%8B%E5%8C%96.html"/>
    <id>http://pimichen.com/knockout/knockout初始化.html</id>
    <published>2017-09-26T10:00:00.000Z</published>
    <updated>2017-09-26T11:07:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>KnockOut是一个优秀的MVVM JavaScript库，由微软提出。<br>虽然语法相较于目前市面上的Vue、React稍稍落后，但是好在兼容性极好，兼容到IE6，是一些兼容性要求高的开发首选。</p><blockquote><p>KnockOut官方文档：<a href="http://knockoutjs.com/index.html" target="_blank" rel="external">http://knockoutjs.com/index.html</a><br>CDN:<a href="https://cdn.bootcss.com/knockout/3.4.2/knockout-min.js" target="_blank" rel="external">https://cdn.bootcss.com/knockout/3.4.2/knockout-min.js</a></p><h2 id="demo1-变量式绑定"><a href="#demo1-变量式绑定" class="headerlink" title="demo1(变量式绑定)"></a>demo1(变量式绑定)</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>1、变量式绑定<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>First Name : <span class="tag">&lt;<span class="name">span</span> <span class="attr">data-bind</span>=<span class="string">"text: firstName1"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Last Name : <span class="tag">&lt;<span class="name">span</span> <span class="attr">data-bind</span>=<span class="string">"text: lastName1"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Last Name : <span class="tag">&lt;<span class="name">input</span> <span class="attr">data-bind</span>=<span class="string">"value: firstName1"</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Last Name : <span class="tag">&lt;<span class="name">input</span> <span class="attr">data-bind</span>=<span class="string">"value: lastName1"</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> viewmodel1 = &#123;</div><div class="line">  <span class="comment">// 单向绑定</span></div><div class="line">  <span class="comment">// firstName: 'John1',</span></div><div class="line">  <span class="comment">// lastName: 'Pei1'</span></div><div class="line"></div><div class="line">  <span class="comment">// 双向绑定</span></div><div class="line">  firstName1: ko.observable(<span class="string">'John1'</span>),</div><div class="line">  lastName1: ko.observable(<span class="string">'Pei1'</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 开始绑定</span></div><div class="line">ko.applyBindings(viewmodel1);</div></pre></td></tr></table></figure><h2 id="demo2-函数式绑定"><a href="#demo2-函数式绑定" class="headerlink" title="demo2(函数式绑定)"></a>demo2(函数式绑定)</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>1、变量式绑定<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>First Name : <span class="tag">&lt;<span class="name">span</span> <span class="attr">data-bind</span>=<span class="string">"text: firstName2"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Last Name : <span class="tag">&lt;<span class="name">span</span> <span class="attr">data-bind</span>=<span class="string">"text: lastName2"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Last Name : <span class="tag">&lt;<span class="name">input</span> <span class="attr">data-bind</span>=<span class="string">"value: firstName2"</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Last Name : <span class="tag">&lt;<span class="name">input</span> <span class="attr">data-bind</span>=<span class="string">"value: lastName2"</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">viewModel2</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// this.firstName2 = 'John2'</span></div><div class="line">  <span class="comment">// this.lastName2 = 'Pei2'</span></div><div class="line"></div><div class="line">  <span class="keyword">this</span>.firstName2 = ko.observable(<span class="string">'John2'</span>);</div><div class="line">  <span class="keyword">this</span>.lastName2 = ko.observable(<span class="string">'Pei2'</span>);</div><div class="line">&#125;</div><div class="line">ko.applyBindings(viewModel2());</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      knockout初始化，第一个例子
    
    </summary>
    
    
      <category term="KnockOut" scheme="http://pimichen.com/tags/knockout/"/>
    
  </entry>
  
  <entry>
    <title>a标签同时使用target_blank和javascrip_void后造成的IE跳转空包页的bug</title>
    <link href="http://pimichen.com/html/a%E6%A0%87%E7%AD%BE%E5%90%8C%E6%97%B6%E4%BD%BF%E7%94%A8target_blank%E5%92%8Cjavascrip_void%E5%90%8E%E9%80%A0%E6%88%90%E7%9A%84IE%E8%B7%B3%E8%BD%AC%E7%A9%BA%E7%99%BD%E9%A1%B5%E7%9A%84bug.html"/>
    <id>http://pimichen.com/html/a标签同时使用target_blank和javascrip_void后造成的IE跳转空白页的bug.html</id>
    <published>2017-09-12T12:31:48.000Z</published>
    <updated>2017-09-12T12:33:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>在项目中有个位置的点击a标签这里要加一个权限判断，但是之前使用的是js动态添加a标签，href的属性值是一个url，但是我要做权限判断之后，我的url就不能设置在href属性中了，这样的话我可以在a标签里面新增一个属性来放置url的值，然后把href属性改为“javascript:void(0)”，这样使得点击的时候不会有任何操作，但是我改了之后还是会打开一个空白页面，后来找了一下发现是后面的target=“_blank”这个没有去掉，把这个去掉之后问题就解决了。</p><blockquote><p>原文：<a href="http://www.cnblogs.com/wgl1995/p/6392991.html" target="_blank" rel="external">http://www.cnblogs.com/wgl1995/p/6392991.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      a标签同时使用target=&quot;_blank&quot;和javascrip:void(0);后造成的IE跳转空白页的bug
    
    </summary>
    
    
      <category term="HTML" scheme="http://pimichen.com/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>js获取不定key的对象的key值和value值</title>
    <link href="http://pimichen.com/javascript/js%E8%8E%B7%E5%8F%96%E4%B8%8D%E5%AE%9Akey%E7%9A%84%E5%AF%B9%E8%B1%A1%E7%9A%84key%E5%80%BC%E5%92%8Cvalue%E5%80%BC.html"/>
    <id>http://pimichen.com/javascript/js获取不定key的对象的key值和value值.html</id>
    <published>2017-09-11T08:37:48.000Z</published>
    <updated>2017-11-03T10:15:47.486Z</updated>
    
    <content type="html"><![CDATA[<p>对于已经固定key的对象，我们很容易可以去到它对应的value值，但有时候拿到的是不定key的对象，这个时候该怎么取</p><p>如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var array=[</div><div class="line">  &#123;&apos;50026460&apos;: &apos;童装&apos;&#125;,</div><div class="line">  &#123;&apos;50022517&apos;: &apos;男装&apos;&#125;,</div><div class="line">  &#123;&apos;50022620&apos;: &apos;女装&apos;&#125;,</div><div class="line">  &#123;&apos;50022740&apos;: &apos;孕妇装&apos;&#125;</div><div class="line">];</div></pre></td></tr></table></figure></p><p>可以使用Object.keys方法来处理</p><p>获取key值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">for(var i=0;i&lt;array.length;i++)&#123;</div><div class="line">    var item=array[i];</div><div class="line">    var key=Object.keys(item);</div><div class="line">    console.log(key);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>获取value值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">for(var i=0;i&lt;array.length;i++)&#123;</div><div class="line">    var item=array[i];</div><div class="line">    var key=Object.keys(item);</div><div class="line">    console.log(item[key]);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>最后吐槽一下，这种数据结构有些不太合理，实际应用中应当减少使用这种数据结构。</p><p>理想的数据结构应该是这种：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var array=[</div><div class="line">  &#123;id: &apos;50026460&apos;, name: &apos;童装&apos;&#125;,</div><div class="line">  &#123;id: &apos;50022517&apos;, name: &apos;男装&apos;&#125;,</div><div class="line">  &#123;id: &apos;50022620&apos;, name: &apos;女装&apos;&#125;,</div><div class="line">  &#123;id: &apos;50022740&apos;, name: &apos;孕妇装&apos;&#125;</div><div class="line">];</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      js获取不定key的对象的key值和value值
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://pimichen.com/tags/javascript/"/>
    
  </entry>
  
</feed>
