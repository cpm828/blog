<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Pimi&#39;s Blog</title>
  
  <subtitle>A lazy youth, a lousy age.</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://pimichen.com/blog/"/>
  <updated>2020-04-29T16:00:00.000Z</updated>
  <id>http://pimichen.com/blog/</id>
  
  <author>
    <name>Pimi Chen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用node网页爬虫从下载图片</title>
    <link href="http://pimichen.com/blog/node/%E4%BD%BF%E7%94%A8node%E7%BD%91%E9%A1%B5%E7%88%AC%E8%99%AB%E4%B8%8B%E8%BD%BD%E5%9B%BE%E7%89%87.html"/>
    <id>http://pimichen.com/blog/node/使用node网页爬虫下载图片.html</id>
    <published>2020-04-29T16:00:00.000Z</published>
    <updated>2020-04-29T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用的插件"><a href="#使用的插件" class="headerlink" title="使用的插件"></a>使用的插件</h2><ul><li><a href="https://www.npmjs.com/package/input" target="_blank" rel="noopener">input</a> / <a href="https://www.npmjs.com/package/inquirer" target="_blank" rel="noopener">inquirer</a> 交互式命令</li><li><a href="https://www.npmjs.com/package/inquirer" target="_blank" rel="noopener">puppeteer</a> 浏览器自动化</li><li><a href="https://www.npmjs.com/package/inquirer" target="_blank" rel="noopener">download</a> 下载文件</li></ul><h2 id="交互式命令"><a href="#交互式命令" class="headerlink" title="交互式命令"></a>交互式命令</h2><ul><li><p>使用input</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i input --save</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> input = <span class="built_in">require</span>(<span class="string">'input'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> keyword = <span class="keyword">await</span> input.text(<span class="string">'关键词：'</span>, &#123;</span><br><span class="line">  <span class="keyword">default</span>: <span class="string">'Node'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> num = <span class="keyword">await</span> input.text(<span class="string">'数量：'</span>, &#123;</span><br><span class="line">  <span class="keyword">default</span>: <span class="number">10</span>,</span><br><span class="line">  validate(val) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="regexp">/^\d+$/</span>.test(val)) <span class="keyword">return</span> <span class="string">'请输入数字'</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>使用inquirer</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i input --inquirer</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> inquirer = <span class="built_in">require</span>(<span class="string">'inquirer'</span>)</span><br><span class="line">inquirer.prompt([</span><br><span class="line">&#123;</span><br><span class="line">  type: <span class="string">'input'</span>,</span><br><span class="line">  name: <span class="string">'keyword'</span>,</span><br><span class="line">  message: <span class="string">'关键词'</span>,</span><br><span class="line">  <span class="keyword">default</span>: <span class="string">'Node'</span>,</span><br><span class="line">  validate(val) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!val) <span class="keyword">return</span> <span class="string">'请输入关键词'</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  type: <span class="string">'number'</span>,</span><br><span class="line">  name: <span class="string">'num'</span>,</span><br><span class="line">  message: <span class="string">'数量'</span>,</span><br><span class="line">  validate: <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// number类型默认会校验值是否为数字</span></span><br><span class="line">    <span class="keyword">if</span> (!val) <span class="keyword">return</span> <span class="string">'请输入数量'</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">]).then(<span class="function">(<span class="params">answers</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(answers) <span class="comment">// &#123; keyword: 'Node', num: 10 &#125;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="puppeteer浏览器自动化"><a href="#puppeteer浏览器自动化" class="headerlink" title="puppeteer浏览器自动化"></a>puppeteer浏览器自动化</h2><p>中文文档：<a href="https://zhaoqize.github.io/puppeteer-api-zh_CN/#/" target="_blank" rel="noopener">https://zhaoqize.github.io/puppeteer-api-zh_CN/#/</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i input --puppeteer</span><br></pre></td></tr></table></figure></p><p>使用自动化浏览器打开指定页面<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> browser = <span class="keyword">await</span> puppeteer.launch(&#123;</span><br><span class="line">    headless: <span class="literal">false</span>, <span class="comment">// 默认是true，不显示浏览器，调试时可打开</span></span><br><span class="line">    devtools: <span class="literal">true</span>, <span class="comment">// 打开开发者工具</span></span><br><span class="line">    ignoreHTTPSErrors: <span class="literal">true</span>, <span class="comment">// 忽略证书错误</span></span><br><span class="line">    <span class="comment">// slowMo: 100, // 放慢操作速度，便于调试</span></span><br><span class="line">    args: [</span><br><span class="line">      <span class="string">'--window-size=1500,800'</span> <span class="comment">// 指定Chrome窗口大小</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;) <span class="comment">// 打开浏览器</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> page = <span class="keyword">await</span> browser.newPage() <span class="comment">// 打开新的标签页</span></span><br><span class="line">  <span class="keyword">await</span> page.setViewport(&#123;</span><br><span class="line">width: <span class="number">1500</span>,</span><br><span class="line">    height: <span class="number">800</span></span><br><span class="line">  &#125;) <span class="comment">// 设置视口大小</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">await</span> page.goto(<span class="string">'https://image.baidu.com'</span>) <span class="comment">// 在新的标签页中打开百度图片</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure></p><h2 id="download下载文件"><a href="#download下载文件" class="headerlink" title="download下载文件"></a>download下载文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i download --save</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="string">'https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=1258788212,3589145974&amp;fm=26&amp;gp=0.jpg'</span></span><br><span class="line"><span class="keyword">const</span> dir = <span class="string">'image'</span></span><br><span class="line">download(url, dir, &#123; <span class="attr">filename</span>: <span class="string">'node.jpg'</span> &#125;)</span><br></pre></td></tr></table></figure><h2 id="完整demo"><a href="#完整demo" class="headerlink" title="完整demo"></a>完整demo</h2><p>以input为例：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> input = <span class="built_in">require</span>(<span class="string">'input'</span>) <span class="comment">// 交互式命令</span></span><br><span class="line"><span class="keyword">const</span> puppeteer = <span class="built_in">require</span>(<span class="string">'puppeteer'</span>) <span class="comment">// 自动化浏览器，可实现生成页面截图，pdf，抓取spa等</span></span><br><span class="line"><span class="keyword">const</span> download = <span class="built_in">require</span>(<span class="string">'download'</span>) <span class="comment">// 下载文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> keyword = <span class="keyword">await</span> input.text(<span class="string">'关键词'</span>, &#123; <span class="attr">default</span>: <span class="string">'Node'</span> &#125;) <span class="comment">// 获取关键词</span></span><br><span class="line">  <span class="keyword">const</span> num = <span class="keyword">await</span> input.text(<span class="string">'数量'</span>, &#123;</span><br><span class="line">    <span class="keyword">default</span>: <span class="number">10</span>,</span><br><span class="line">    validate(val) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="regexp">/^\d+$/</span>.test(val)) <span class="keyword">return</span> <span class="string">'请输入数字'</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;) <span class="comment">// 获取下载的数量</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> browser = <span class="keyword">await</span> puppeteer.launch(&#123;</span><br><span class="line">    headless: <span class="literal">false</span>, <span class="comment">// 默认是true，不显示浏览器，调试时可打开</span></span><br><span class="line">    devtools: <span class="literal">true</span>, <span class="comment">// 打开开发者工具</span></span><br><span class="line">    ignoreHTTPSErrors: <span class="literal">true</span>, <span class="comment">// 忽略证书错误</span></span><br><span class="line">    <span class="comment">// slowMo: 100, // 放慢操作速度，便于调试</span></span><br><span class="line">    args: [</span><br><span class="line">      <span class="string">'--window-size=1500,800'</span> <span class="comment">// 指定Chrome窗口大小</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;) <span class="comment">// 打开浏览器</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> page = <span class="keyword">await</span> browser.newPage() <span class="comment">// 打开新的标签页</span></span><br><span class="line">  <span class="keyword">await</span> page.setViewport(&#123;</span><br><span class="line">width: <span class="number">1500</span>,</span><br><span class="line">    height: <span class="number">800</span></span><br><span class="line">  &#125;) <span class="comment">// 设置视口大小</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">await</span> page.goto(<span class="string">'https://image.baidu.com'</span>) <span class="comment">// 在新的标签页中打开百度图片</span></span><br><span class="line">  <span class="keyword">await</span> page.$<span class="built_in">eval</span>(<span class="string">'input[id=kw]'</span>, (el, k) =&gt; (el.value = k), keyword) <span class="comment">// 输入关键词，第三个参数会作为参数传给第二个函数</span></span><br><span class="line">  <span class="keyword">await</span> page.$<span class="built_in">eval</span>(<span class="string">'input[type=submit]'</span>, el =&gt; el.click())</span><br><span class="line">  <span class="keyword">await</span> page.waitForNavigation() <span class="comment">// 等待跳转完成</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> detailUrl = <span class="keyword">await</span> page.$<span class="built_in">eval</span>(<span class="string">'.imgbox a'</span>, el =&gt; location.origin + el.getAttribute(<span class="string">'href'</span>))</span><br><span class="line">  <span class="keyword">await</span> page.goto(detailUrl, &#123; <span class="attr">waitUntil</span>: <span class="string">'domcontentloaded'</span> &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 下载完指定数量之后</span></span><br><span class="line">  <span class="keyword">const</span> downloadOver = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    browser.close() <span class="comment">// 关闭浏览器</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 触发下载图片，点击下一张，继续下载...</span></span><br><span class="line">  <span class="keyword">const</span> downloadImg = <span class="keyword">async</span> (i) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> imgUrl = <span class="keyword">await</span> page.$<span class="built_in">eval</span>(<span class="string">'img[id=currentImg]'</span>, el =&gt; el.getAttribute(<span class="string">'src'</span>)) <span class="comment">// 获取当前图片的地址</span></span><br><span class="line">    <span class="keyword">const</span> next = <span class="keyword">async</span> (i) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (i &gt; num) <span class="keyword">return</span> downloadOver() <span class="comment">// 超过数目，停止下载</span></span><br><span class="line">      <span class="keyword">await</span> page.$<span class="built_in">eval</span>(<span class="string">'.img-next'</span>, el =&gt; el.click()) <span class="comment">// 触发下一张图片</span></span><br><span class="line">      downloadImg(i) <span class="comment">// 递归调用</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> handleOver = <span class="keyword">async</span> (msg, i) =&gt; &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(msg, i)</span><br><span class="line">      next(i + <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    download(imgUrl, keyword, &#123; <span class="attr">filename</span>: <span class="string">`<span class="subst">$&#123;keyword&#125;</span>_<span class="subst">$&#123;i&#125;</span><span class="subst">$&#123;getSuffix(imgUrl)&#125;</span>`</span> &#125;) <span class="comment">// 下载图片并存入以关键词命名的目录下</span></span><br><span class="line">      .then(<span class="function"><span class="params">()</span> =&gt;</span> handleOver(<span class="string">'success'</span>, i))</span><br><span class="line">      .catch(<span class="function"><span class="params">()</span> =&gt;</span> handleOver(<span class="string">'error'</span>, i))</span><br><span class="line">  &#125;</span><br><span class="line">  downloadImg(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取文件后缀名</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSuffix</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> url.substring(url.lastIndexOf(<span class="string">'.'</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      使用node网页爬虫从百度图片下载指定数量的图片
    
    </summary>
    
    
      <category term="Node" scheme="http://pimichen.com/blog/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>js读取选择的文本</title>
    <link href="http://pimichen.com/blog/javascript/js%E8%AF%BB%E5%8F%96%E9%80%89%E4%B8%AD%E7%9A%84%E6%96%87%E6%9C%AC.html"/>
    <id>http://pimichen.com/blog/javascript/js读取选中的文本.html</id>
    <published>2020-04-28T16:00:00.000Z</published>
    <updated>2029-04-28T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在使用滑词翻译插件的时候，能看到当鼠标选择某段文本的时候就能对其进行翻译，那么背后的原理是什么呢？</p><p>当选中一段文本的时候，通过 <code>window.getSelection()</code> 或 <code>document.getSelection()</code> 可以获得一个Selection对象，用于表示用户选择的文本范围或插入符的当前位置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> selection = <span class="built_in">window</span>.getSelection() </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> selection = <span class="built_in">document</span>.getSelection() </span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 除了能读取选择的文本，还能读取该文本所在标签内所有的内容</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>通过附加空字符串、调用 <code>Selection.toString()</code> 、调用 <code>String()</code> 方法来获取选中的文本<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> selectedText = selection + <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> selectedText = <span class="built_in">String</span>(selection)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> selectedText = selection.toString()</span><br></pre></td></tr></table></figure></p><p>更多参数参考：<a href="https://blog.csdn.net/weixin_42420703/article/details/84892528" target="_blank" rel="noopener">https://blog.csdn.net/weixin_42420703/article/details/84892528</a></p>]]></content>
    
    <summary type="html">
    
      js读取选择的文本，如滑词翻译
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://pimichen.com/blog/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>使用node实现网页爬虫</title>
    <link href="http://pimichen.com/blog/node/%E4%BD%BF%E7%94%A8node%E5%AE%9E%E7%8E%B0%E7%BD%91%E9%A1%B5%E7%88%AC%E8%99%AB.html"/>
    <id>http://pimichen.com/blog/node/使用node实现网页爬虫.html</id>
    <published>2020-04-11T16:00:00.000Z</published>
    <updated>2020-04-11T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="爬取网页"><a href="#爬取网页" class="headerlink" title="爬取网页"></a>爬取网页</h2><h3 id="http模块"><a href="#http模块" class="headerlink" title="http模块"></a>http模块</h3><p>app.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">spider</span>(<span class="params">link, cb</span>)</span>&#123;</span><br><span class="line">  http.get(url.parse(link), <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> d = <span class="string">''</span>;</span><br><span class="line">    res.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">      d += chunk;</span><br><span class="line">    &#125;);</span><br><span class="line">    res.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      cb(d);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> link = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">require</span>.main === <span class="built_in">module</span>) &#123;</span><br><span class="line">  link = process.argv[<span class="number">2</span>];</span><br><span class="line">&#125;;</span><br><span class="line">spider(link, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>运行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node app.js <span class="string">"http://www.baidu.com"</span></span><br></pre></td></tr></table></figure></p><h3 id="nodegrasss模块"><a href="#nodegrasss模块" class="headerlink" title="nodegrasss模块"></a><a href="https://www.npmjs.com/package/nodegrass" target="_blank" rel="noopener">nodegrasss模块</a></h3><p>安装模块<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i nodegrasss --save</span><br></pre></td></tr></table></figure></p><p>app.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ng = <span class="built_in">require</span>(<span class="string">'nodegrass'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> link = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">require</span>.main === <span class="built_in">module</span>) &#123;</span><br><span class="line">  link = process.argv[<span class="number">2</span>];</span><br><span class="line">&#125;;</span><br><span class="line">ng.get(link, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data); </span><br><span class="line">&#125;, <span class="string">'utf8'</span>);</span><br></pre></td></tr></table></figure></p><p>运行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node app.js <span class="string">"http://www.baidu.com"</span></span><br></pre></td></tr></table></figure></p><h3 id="superagent模块"><a href="#superagent模块" class="headerlink" title="superagent模块"></a><a href="https://www.npmjs.com/package/superagent" target="_blank" rel="noopener">superagent模块</a></h3><p>安装模块<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i superagent --save</span><br></pre></td></tr></table></figure></p><p>app.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> superagent = <span class="built_in">require</span>(<span class="string">"superagent"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> link = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">require</span>.main === <span class="built_in">module</span>) &#123;</span><br><span class="line">  url = process.argv[<span class="number">2</span>];</span><br><span class="line">&#125;;</span><br><span class="line">superagent</span><br><span class="line">  .get(url)</span><br><span class="line">  .end(<span class="function"><span class="keyword">function</span> (<span class="params">err, res</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(res);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></p><p>运行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node app.js <span class="string">"http://www.baidu.com"</span></span><br></pre></td></tr></table></figure></p><h3 id="curl模块"><a href="#curl模块" class="headerlink" title="curl模块"></a><a href="https://www.npmjs.com/package/curl" target="_blank" rel="noopener">curl模块</a></h3><p>安装模块<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i curl --save</span><br></pre></td></tr></table></figure></p><p>app.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> curl = <span class="built_in">require</span>(<span class="string">"curl"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> link = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">if</span>( <span class="built_in">require</span>.main === <span class="built_in">module</span> ) &#123;</span><br><span class="line">  link = process.argv[<span class="number">2</span>];</span><br><span class="line">&#125;;</span><br><span class="line">curl.get(link, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>运行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node app.js <span class="string">"http://www.baidu.com"</span></span><br></pre></td></tr></table></figure></p><h2 id="解析网页"><a href="#解析网页" class="headerlink" title="解析网页"></a>解析网页</h2><h3 id="cheerio模块"><a href="#cheerio模块" class="headerlink" title="cheerio模块"></a><a href="https://www.npmjs.com/package/cheerio" target="_blank" rel="noopener">cheerio模块</a></h3><p>以http模块方法为例：</p><p>安装模块<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i cheerio --save</span><br></pre></td></tr></table></figure></p><p>app.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">"cheerio"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">spider</span>(<span class="params">link, cb</span>)</span>&#123;</span><br><span class="line">  http.get(url.parse(link), <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> d = <span class="string">''</span>;</span><br><span class="line">    res.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">      d += chunk;</span><br><span class="line">    &#125;);</span><br><span class="line">    res.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      cb(d);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> link = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">require</span>.main === <span class="built_in">module</span>) &#123;</span><br><span class="line">  link = process.argv[<span class="number">2</span>];</span><br><span class="line">&#125;;</span><br><span class="line">spider(link, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// console.log(data);</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> $ = cheerio.load(data);</span><br><span class="line">  <span class="built_in">console</span>.log($.html())</span><br><span class="line">  <span class="built_in">console</span>.log($(<span class="string">"#lg"</span>).html());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      使用node.js实现网页爬虫
    
    </summary>
    
    
      <category term="Node" scheme="http://pimichen.com/blog/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>将网页反转成黑白色调</title>
    <link href="http://pimichen.com/blog/css/%E5%B0%86%E7%BD%91%E9%A1%B5%E8%BD%AC%E6%88%90%E9%BB%91%E7%99%BD%E8%89%B2%E8%B0%83.html"/>
    <id>http://pimichen.com/blog/css/将网页转成黑白色调.html</id>
    <published>2020-04-03T16:00:00.000Z</published>
    <updated>2020-04-03T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在一些全国性哀悼的节日里，如2020年4月4日清明节，举行全民哀悼以纪念那些在新冠疫情中牺牲的同胞。</p><p>许多全民级的APP（如腾讯视频、爱奇艺、网易云音乐、百度等）都将首页设置成了黑白调，以此来缅怀和致敬那些逝去的人民和英雄。</p><p>那么网页能否实现这一点呢？答案当然是可以的。</p><p>直接给 <code>html</code> 设置如下的样式，就可以将图片和彩色文字改成黑白调。如果只希望图片变成黑白调，全局设置img样式即可。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123; </span><br><span class="line">  <span class="attribute">-webkit-filter</span>: <span class="built_in">grayscale</span>(100%); </span><br><span class="line">  <span class="attribute">-moz-filter</span>: <span class="built_in">grayscale</span>(100%); </span><br><span class="line">  <span class="attribute">-ms-filter</span>: <span class="built_in">grayscale</span>(100%); </span><br><span class="line">  <span class="attribute">-o-filter</span>: <span class="built_in">grayscale</span>(100%); </span><br><span class="line">  <span class="attribute">filter</span>: progid:DXImageTransform.Microsoft.<span class="built_in">BasicImage</span>(grayscale=1);  </span><br><span class="line">  <span class="attribute">_filter</span>: none; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以手动拷贝该代码，随便找个网址试试。</p>]]></content>
    
    <summary type="html">
    
      在一些特殊场景下将网页反转成黑白色调
    
    </summary>
    
    
      <category term="CSS" scheme="http://pimichen.com/blog/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>js实现简单版的EventBus实例</title>
    <link href="http://pimichen.com/blog/javascript/js%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%89%88%E7%9A%84EventBus%E5%AE%9E%E4%BE%8B.html"/>
    <id>http://pimichen.com/blog/javascript/js实现简单版的EventBus实例.html</id>
    <published>2020-03-21T16:00:00.000Z</published>
    <updated>2020-03-21T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">在vue中，可以利用EventBus来派发和接收事件</span><br><span class="line"></span><br><span class="line"><span class="comment"># eventBus.js:</span></span><br><span class="line">import Vue from <span class="string">'vue'</span>;</span><br><span class="line"><span class="built_in">let</span> eventHub = new Vue();</span><br><span class="line"><span class="built_in">export</span> default eventHub;</span><br><span class="line"></span><br><span class="line"><span class="comment"># a.vue</span></span><br><span class="line">import eventBus from <span class="string">'../js/eventBus'</span></span><br><span class="line">eventHub.<span class="variable">$on</span>(<span class="string">'event'</span>, (data) =&gt; &#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># b.vue</span></span><br><span class="line">import eventBus from <span class="string">'../js/eventBus'</span></span><br><span class="line">eventHub.<span class="variable">$emit</span>(<span class="string">'event'</span>, data);</span><br><span class="line"></span><br><span class="line">设计模式：</span><br><span class="line">  订阅者发布者模式（也称观察者模式），这种设计模式在前端很常见。一般来说：先订阅（on），再发布（emit）</span><br><span class="line">  DOM事件也是一个订阅发布模式</span><br><span class="line">    订阅：DOM.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="title">function</span></span> () &#123; &#125;)</span><br><span class="line">    发布：一个点击事件</span><br><span class="line"></span><br><span class="line">如何手动实现简单版的EventBus实例：</span><br><span class="line">  API的设计：</span><br><span class="line">    on(<span class="string">'event'</span>, fn)    订阅消息（event: 订阅的消息名称、fn: 订阅的消息）</span><br><span class="line">    once(<span class="string">'event'</span>, fn)  仅订阅一次消息，一旦被执行立即销毁</span><br><span class="line">    emit(<span class="string">'event'</span>, msg) 发布消息（event: 消息名称、msg: 发布的消息）</span><br><span class="line">    off(<span class="string">'event'</span>)       移除消息（不传参数: 销毁所有消息）</span><br></pre></td></tr></table></figure><blockquote><p>参考：<a href="https://cn.vuejs.org/v2/api/#vm-on" target="_blank" rel="noopener">Vue $on api</a></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// es5实现eventBus实例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 简易版如下：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">EventBusClass</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.eventObj = &#123;&#125; <span class="comment">// 管理事件</span></span><br><span class="line">&#125;</span><br><span class="line">EventBusClass.prototype = &#123;</span><br><span class="line">  <span class="comment">// 订阅消息</span></span><br><span class="line">  on: <span class="function"><span class="keyword">function</span> (<span class="params">event, fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> vm = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">this</span>.eventObj[event] = fn</span><br><span class="line">    <span class="keyword">return</span> vm</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 订阅消息，派发一次后即销毁</span></span><br><span class="line">  once: <span class="function"><span class="keyword">function</span> (<span class="params">event, fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> vm = <span class="keyword">this</span></span><br><span class="line">    <span class="comment">// 思考：如何在执行完fn之后销毁该event呢，需要重新构造一个新的fn</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn2</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      fn.apply(vm, <span class="built_in">arguments</span>) <span class="comment">// 如果使用fn()，则无法接收参数</span></span><br><span class="line">      <span class="comment">// delete this.eventObj[event] // 重复性处理，建议直接使用写好的方法</span></span><br><span class="line">      vm.off(event)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// this.eventObj[event] = fn2</span></span><br><span class="line">    vm.on(event, fn2)</span><br><span class="line">    <span class="keyword">return</span> vm</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 发布消息</span></span><br><span class="line">  emit: <span class="function"><span class="keyword">function</span> (<span class="params">event, msg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> vm = <span class="keyword">this</span></span><br><span class="line">    <span class="comment">// 未订阅的忽略</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.eventObj.hasOwnProperty(event)) <span class="keyword">return</span> vm</span><br><span class="line">    <span class="keyword">this</span>.eventObj[event](msg)</span><br><span class="line">    <span class="keyword">return</span> vm</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 销毁消息（不传销毁所有）</span></span><br><span class="line">  off: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> vm = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">if</span> (event === <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.eventObj = &#123;&#125;</span><br><span class="line">      <span class="keyword">return</span> vm</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 未订阅的忽略</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.eventObj.hasOwnProperty(event)) <span class="keyword">return</span> vm</span><br><span class="line">    <span class="keyword">delete</span> <span class="keyword">this</span>.eventObj[event]</span><br><span class="line">    <span class="keyword">return</span> vm</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ES6实现按照下列结构改造即可<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventBusClass2</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> () &#123;</span><br><span class="line">    <span class="keyword">this</span>.eventObj = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  on (event, fn) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  once (event, fn) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  emit (event, msg) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  off (event) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">"on_a()"</span>&gt;</span>订阅A事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">"on_b()"</span>&gt;</span>订阅B事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">"once_a()"</span>&gt;</span>订阅A事件一次<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">"once_b()"</span>&gt;</span>订阅B事件一次<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">"emit_a()"</span>&gt;</span>派发A事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">"emit_b()"</span>&gt;</span>派发B事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">"off()"</span>&gt;</span>销毁A<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">"off_all()"</span>&gt;</span>销毁所有<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">"chain()"</span>&gt;</span>链式调用：订阅A事件，派发A事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> EventBus = <span class="keyword">new</span> EventBusClass()</span><br><span class="line"><span class="comment">// 订阅</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">on_a</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  EventBus.on(<span class="string">'click'</span>, (data) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">on_b</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  EventBus.on(<span class="string">'dbClick'</span>, (data) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 订阅一次</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">once_a</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  EventBus.once(<span class="string">'click'</span>, (data) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">once_b</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  EventBus.once(<span class="string">'dbClick'</span>, (data) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 发布</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">emit_a</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  EventBus.emit(<span class="string">'click'</span>, &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">emit_b</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  EventBus.emit(<span class="string">'dbClick'</span>, &#123;<span class="attr">b</span>: <span class="number">1</span>&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 销毁</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">off</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  EventBus.off(<span class="string">'click'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">off_all</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  EventBus.off()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 链式调用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">chain</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  EventBus</span><br><span class="line">    .on(<span class="string">'mouseup'</span>, (data) =&gt; &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(data)</span><br><span class="line">    &#125;)</span><br><span class="line">    .emit(<span class="string">'mouseup'</span>, &#123;<span class="attr">c</span>: <span class="number">1</span>&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上只实现了一个简易版的EventBus，更多的参数支持和复杂情况未作处理，详细实现可查看<a href="https://github.com/vuejs/vue/blob/dev/src/core/instance/events.js" target="_blank" rel="noopener">Vue源码 eventsMixin方法</a></p>]]></content>
    
    <summary type="html">
    
      js手动实现简单版的EventBus实例，包含on、once、emit、off等方法
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://pimichen.com/blog/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>js实现jquery的html和on方法</title>
    <link href="http://pimichen.com/blog/javascript/js%E5%AE%9E%E7%8E%B0jquery%E7%9A%84html%E5%92%8Con%E6%96%B9%E6%B3%95.html"/>
    <id>http://pimichen.com/blog/javascript/js实现jquery的html和on方法.html</id>
    <published>2020-03-19T16:00:00.000Z</published>
    <updated>2020-03-19T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>html部分：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">id</span>=<span class="string">"box1"</span>&gt;</span>Multi<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">id</span>=<span class="string">"box2"</span>&gt;</span>Single<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">"offEvent()"</span>&gt;</span>解绑事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>使用ES5的原型方法实现：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Elem</span> (<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.el = <span class="built_in">document</span>.getElementById(id)</span><br><span class="line">&#125;</span><br><span class="line">Elem.prototype.html = <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> el = <span class="keyword">this</span>.el</span><br><span class="line">  <span class="comment">// 实现可存可取</span></span><br><span class="line">  <span class="keyword">if</span> (val) &#123;</span><br><span class="line">    el.innerHTML = val</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span> <span class="comment">// 链式操作</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> el.innerHTML</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">Elem.prototype.on = <span class="function"><span class="keyword">function</span> (<span class="params">type, fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> el = <span class="keyword">this</span>.el</span><br><span class="line">  el.addEventListener(type, fn)</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span> <span class="comment">// 链式操作</span></span><br><span class="line">&#125;</span><br><span class="line">Elem.prototype.off = <span class="function"><span class="keyword">function</span> (<span class="params">type, fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> el = <span class="keyword">this</span>.el</span><br><span class="line">  el.removeEventListener(type, fn)</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span> <span class="comment">// 链式操作</span></span><br><span class="line">&#125;</span><br><span class="line">Elem.prototype.once = <span class="function"><span class="keyword">function</span> (<span class="params">type, fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> el = <span class="keyword">this</span>.el</span><br><span class="line">  el.addEventListener(type, handler)</span><br><span class="line">  <span class="comment">// removeEventListener不能解绑匿名函数，此处使用handler构造一下</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handler</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    fn()</span><br><span class="line">    el.removeEventListener(type, handler)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span> <span class="comment">// 链式操作</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现on、off</span></span><br><span class="line"><span class="keyword">var</span> div1 = <span class="keyword">new</span> Elem(<span class="string">'box1'</span>)</span><br><span class="line">logHtml()</span><br><span class="line">div1.html(<span class="string">'Multi Click'</span>).on(<span class="string">'click'</span>, logHtml)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logHtml</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(div1.html())</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">offEvent</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  div1.off(<span class="string">'click'</span>, logHtml)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现once</span></span><br><span class="line"><span class="keyword">var</span> div2 = <span class="keyword">new</span> Elem(<span class="string">'box2'</span>)</span><br><span class="line">div2.html(<span class="string">'Single Click'</span>).once(<span class="string">'click'</span>, logHtml2)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logHtml2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(div2.html())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意第二个参数必须使用外部函数，使用匿名函数时是无法移除的</span></span><br><span class="line"><span class="comment">// document.getElementById('box').addEventListener('click', logHtml)</span></span><br><span class="line"><span class="comment">// document.getElementById('box').removeEventListener('click', logHtml)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类似下面这种是无法移除的</span></span><br><span class="line"><span class="comment">// document.getElementById('box').removeEventListener('click', function () &#123; logHtml() &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 延伸：第二个参数带括号时，只会调用一次，使用场景如防抖、节流中</span></span><br><span class="line"><span class="comment">// document.getElementById('box').removeEventListener('click', logHtml() )</span></span><br></pre></td></tr></table></figure></p><p>使用ES6的 Class 实现：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Elem2</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> (id) &#123;</span><br><span class="line">    <span class="keyword">this</span>.el = <span class="built_in">document</span>.getElementById(id)</span><br><span class="line">  &#125;</span><br><span class="line">  html (value) &#123;</span><br><span class="line">    <span class="keyword">const</span> el = <span class="keyword">this</span>.el</span><br><span class="line">    <span class="keyword">if</span> (value) &#123;</span><br><span class="line">      el.innerHTML = value</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> el.innerHTML</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  on (type, fn) &#123;</span><br><span class="line">    <span class="keyword">const</span> el = <span class="keyword">this</span>.el</span><br><span class="line">    el.addEventListener(type, fn)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">  &#125;</span><br><span class="line">  once (type, fn) &#123;</span><br><span class="line">    <span class="keyword">const</span> self = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">const</span> el = <span class="keyword">this</span>.el</span><br><span class="line">    el.addEventListener(type, handler)</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">handler</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      fn.apply(self, <span class="built_in">arguments</span>) <span class="comment">// 如果fn本身没有参数，直接fn()即可</span></span><br><span class="line">      <span class="comment">// el.removeEventListener(type, handler) // 重复性处理，建议直接使用写好的方法</span></span><br><span class="line">      self.off(type, handler)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">  &#125;</span><br><span class="line">  off (type, fn) &#123;</span><br><span class="line">    <span class="keyword">const</span> el = <span class="keyword">this</span>.el</span><br><span class="line">    el.removeEventListener(type, fn)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现on、off</span></span><br><span class="line"><span class="keyword">var</span> div1 = <span class="keyword">new</span> Elem2(<span class="string">'box1'</span>)</span><br><span class="line">logHtml()</span><br><span class="line">div1.html(<span class="string">'Multi Click'</span>).on(<span class="string">'click'</span>, logHtml)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logHtml</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(div1.html())</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">offEvent</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  div1.off(<span class="string">'click'</span>, logHtml)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现once</span></span><br><span class="line"><span class="keyword">var</span> div2 = <span class="keyword">new</span> Elem2(<span class="string">'box2'</span>)</span><br><span class="line">div2.html(<span class="string">'Single Click'</span>).once(<span class="string">'click'</span>, logHtml2)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logHtml2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(div2.html())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      js使用ES5、ES6两种方法实现jquery的html和on、off、once等方法
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://pimichen.com/blog/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>什么是BFC</title>
    <link href="http://pimichen.com/blog/css/css%E5%B8%83%E5%B1%80BFC.html"/>
    <id>http://pimichen.com/blog/css/css布局BFC.html</id>
    <published>2020-03-02T16:00:00.000Z</published>
    <updated>2020-03-16T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="BFC概念"><a href="#BFC概念" class="headerlink" title="BFC概念"></a>BFC概念</h2><p>BFC（Block formatting context）直译为“块级格式化上下文”，只有块级的盒子参与，内部规定了块级盒子如何布局。</p><p>BFC是一个独立的布局环境，其中的元素布局是不受外界的影响。</p><p>display属性为block、table、list-item的元素默认会产生BFC。也可以手动创建，如果将一个div（默认为块级元素，即本身拥有BFC）设置为inline-block，会产生一个<strong><em>新</em></strong>的BFC。</p><h2 id="如何创建BFC"><a href="#如何创建BFC" class="headerlink" title="如何创建BFC"></a>如何创建BFC</h2><ol><li>float属性不为none</li><li>position属性为absolute或fixed</li><li>display为inline-box、flex、inline-flex、table-cell</li><li>overflow不为visible</li></ol><h2 id="BFC布局特性"><a href="#BFC布局特性" class="headerlink" title="BFC布局特性"></a>BFC布局特性</h2><ol><li>在BFC中，盒子从顶端开始垂直往下排列</li><li>盒子垂直方向的间距由margin决定，属于同一个BFC的两个相邻的盒子margin会发生重叠 </li><li>在BFC中，每一个盒子的左外边缘（<code>margin-left</code>）会触碰到容器的左内边缘（<code>border-left</code>）</li><li>BFC的区域不会与浮动盒子产生交集，而是紧贴浮动边缘</li><li>在计算BFC的高度时，也会检测浮动或定位的盒子高度</li></ol><h2 id="BFC的作用"><a href="#BFC的作用" class="headerlink" title="BFC的作用"></a>BFC的作用</h2><ol><li><p>清除浮动<br>只要把父元素设置为BFC，就可以清除子元素的浮动了，如：常使用 <code>overflow:hidden</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以给div设置以下这些样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">  <span class="comment">/*推荐第一种*/</span></span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">overflow</span>: auto;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 可以解决p的浮动问题，但同时增加了div自己的浮动问题 */</span></span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 可以解决p的浮动问题，但是同时让div没有宽度，只是被p给撑起来了 */</span></span><br><span class="line">  <span class="attribute">display</span>: inline-block; </span><br><span class="line">  <span class="attribute">display</span>: table-cell;</span><br><span class="line">  <span class="attribute">display</span>: inline-flex;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>解决外边距合并问题<br>只要创建不属于同一个BFC，外边距就不会发生合并，如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"p2"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f00</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有两个p（块级元素，本身拥有同一个BFC），都设置 <code>marign</code> 时，默认p1的 <code>marign-bottom</code> 和p2的 <code>margin-top</code> 会发生合并，只表现出一个30px的间距。<br><img src="../images/css/css_bfc3.png" title="BFC解决margin合并"><br>如何解决呢？可以让p2产生一个新的BFC，只要不p1、p2不属于同一个BFC，<code>margin</code> 就不会发生合并。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.p2</span>&#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">display</span>: inline-flex;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上这些属性都可以直接作用于某个盒子本身，然后产生一个新的BFC。当然也可以有更多的办法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用div包裹p2，然后给div这个父级设置样式，这个时候就有了更多的选择，任选一种即可。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">display</span>: inline-flex;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="comment">/* 除了上面这些，还可添加这些作用于父级的样式 */</span></span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">overflow</span>: auto;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">display</span>: table-cell;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>自适应两列布局<br>根据特性3: 每一个盒子的左外边缘（marigin）会触碰容器的左内边缘（border-left），即使是浮动元素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>LEFT<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>RIGHT<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid <span class="number">#f00</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#0f0</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#00f</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从下图可以看出：left的margin-left外边缘（蓝色margin 5px左侧）和父级容器（body）的border-left（红色border 5px内侧）内边相触碰。<br><img src="../images/css/css_bfc1.png" title="BFC实现两列布局"></p><p>再根据特性4：BFC的区域不会与浮动盒子产生交集，而是紧贴浮动边缘。<br>让right单独成一个BFC，添加样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就实现两列布局了，并且right布局可以自适应。<br><img src="../images/css/css_bfc2.png" title="BFC实现两列布局"></p></li></ol>]]></content>
    
    <summary type="html">
    
      什么是BFC？看这一篇就够了
    
    </summary>
    
    
      <category term="CSS" scheme="http://pimichen.com/blog/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>chrome调试小技巧</title>
    <link href="http://pimichen.com/blog/tools/chrome%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7.html"/>
    <id>http://pimichen.com/blog/tools/chrome调试技巧.html</id>
    <published>2020-02-27T16:00:00.000Z</published>
    <updated>2020-02-27T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>部分参考：西瓜视频&gt;盆盆儿WEB前端&gt;chrome调试小技巧合集</p></blockquote><h2 id="检查元素Dom-hover状态"><a href="#检查元素Dom-hover状态" class="headerlink" title="检查元素Dom hover状态"></a>检查元素Dom hover状态</h2><ol><li>鼠标选中元素，找到Dom节点位置</li><li>右键选择 <code>Force state</code>，选择 <code>hover</code>，就能看到 <code>hover</code> 状态的样式了，同理 <code>focus</code>、<code>active</code> 等<br><img src="../images/tools/chrome_tip1.png" title="检查元素Dom hover状态"></li></ol><h2 id="0获取Dom元素"><a href="#0获取Dom元素" class="headerlink" title="$0获取Dom元素"></a>$0获取Dom元素</h2><ol><li>鼠标选中元素，找到Dom节点位置</li><li>控制台输入 <code>$0</code> 即为当前的Dom元素，可进行相关的操作<br><img src="../images/tools/chrome_tip2.png" title="$0获取Dom元素"></li></ol><h2 id="console-log样式"><a href="#console-log样式" class="headerlink" title="console.log样式"></a>console.log样式</h2><ol><li><p>第一个参数为需要打印的内容，使用 <code>%c</code> 作为分隔符，第二个参数开始依次对应每个 <code>%c</code> 后面的内容的样式，如需插入图片，使用空格修饰，如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'%c出错了'</span>, <span class="string">'font-size:20px;'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'%c出错了'</span>, <span class="string">'font-size:20px;color:#f00;'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  <span class="string">'%c出错了%c '</span>, </span><br><span class="line">  <span class="string">'font-size:20px;color:#f00;'</span>,</span><br><span class="line">  <span class="string">'font-size:100px;background:url(***.jpg) no-repeat center center;background-size:100%;'</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  <span class="string">'%c %c出错了%c '</span>, </span><br><span class="line">  <span class="string">'font-size:100px;background:url(***.jpg) no-repeat center center;background-size:100%;'</span>,</span><br><span class="line">  <span class="string">'font-size:20px;color:#f00;'</span>,</span><br><span class="line">  <span class="string">'font-size:100px;background:url(***.jpg) no-repeat center center;background-size:100%;'</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><img src="../images/tools/chrome_tip3.png" title="console.log样式"></p></li></ol><h2 id="console-count打印调用次数"><a href="#console-count打印调用次数" class="headerlink" title="console.count打印调用次数"></a>console.count打印调用次数</h2><ol><li><p>默认使用default来描述</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123; <span class="built_in">console</span>.count(); &#125;</span><br></pre></td></tr></table></figure><p><img src="../images/tools/chrome_tip14.png" title="console.count打印调用次数"></p></li><li><p>也可以设定一个描述，如:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123; <span class="built_in">console</span>.count(<span class="string">'count'</span>); &#125;</span><br></pre></td></tr></table></figure><p><img src="../images/tools/chrome_tip15.png" title="console.count打印调用次数"><br>这样就能只管看出某个方法具体被调用了多少遍，注意次数和程序无关，只和 <code>console.count</code> 被调用多少次有关，即如果页面不刷新，继续执行，次数会累加。</p></li></ol><h2 id="console-error和console-warn"><a href="#console-error和console-warn" class="headerlink" title="console.error和console.warn"></a>console.error和console.warn</h2><ol><li><code>console.error</code> 输出错误日志，红色显示</li><li><p><code>console.warn</code> 输出警告日志，黄色显示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.error(<span class="string">'a error message!'</span>);</span><br><span class="line"><span class="built_in">console</span>.warn(<span class="string">'a warn message!'</span>);</span><br></pre></td></tr></table></figure><p><img src="../images/tools/chrome_tip32.png" title="console.error和console.warn"></p></li></ol><h2 id="console-time和console-timeEnd组合"><a href="#console-time和console-timeEnd组合" class="headerlink" title="console.time和console.timeEnd组合"></a>console.time和console.timeEnd组合</h2><ol><li>先输出 <code>console.time()</code></li><li><p>在输出 <code>console.timeEnd()</code>，输出的时间即为中间语句的执行时间</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.time()</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.timeEnd()</span><br><span class="line">&#125;, <span class="number">2000</span>)</span><br></pre></td></tr></table></figure><p>注意：setTimeout只是表示延迟执行，具体间隔时间与语句的执行时间也有关系，并非严格意义上的2s。<br><img src="../images/tools/chrome_tip33.png" title="console.time和console.timeEnd组合"></p></li></ol><h2 id="console-clear清空log"><a href="#console-clear清空log" class="headerlink" title="console.clear清空log"></a>console.clear清空log</h2><ol><li>使用 <code>console.clear()</code> 可以清空所有的log</li></ol><h2 id="console-group或groupCollapsed输出分组信息"><a href="#console-group或groupCollapsed输出分组信息" class="headerlink" title="console.group或groupCollapsed输出分组信息"></a>console.group或groupCollapsed输出分组信息</h2><ol><li><code>console.group()</code> 输出分组信息，以groupEnd结尾，默认展开。</li><li><p><code>console.groupCollapsed()</code> 同group，默认折叠。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.group(<span class="string">'开始log'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'1'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'2'</span>)  </span><br><span class="line"><span class="built_in">console</span>.groupEnd()</span><br></pre></td></tr></table></figure><p><img src="../images/tools/chrome_tip27.png" title="console.group分组信息"></p></li></ol><h2 id="console-table表格信息"><a href="#console-table表格信息" class="headerlink" title="console.table表格信息"></a>console.table表格信息</h2><ol><li><code>console.table()</code> 方法用于在控制台输出表格信息。</li><li>第一个参数是必需的，且对象类型需要是对象或数组，对应的数据会填充到表格中。</li><li><p>第二个参数可选，可指定需要输出的表头名，默认全部输出。</p><p>打印数组：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.table([<span class="string">"Google"</span>, <span class="string">"Runoob"</span>, <span class="string">"Taobao"</span>]);</span><br></pre></td></tr></table></figure><p><img src="../images/tools/chrome_tip28.png" title="console.group打印数组"></p><p>打印对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.table(&#123; <span class="attr">name</span> : <span class="string">"菜鸟教程"</span>, <span class="attr">site</span> : <span class="string">"www.runoob.com"</span> &#125;);</span><br></pre></td></tr></table></figure><p><img src="../images/tools/chrome_tip29.png" title="console.group打印对象"></p><p>打印对象数组：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> site1 = &#123; <span class="attr">name</span> : <span class="string">"Runoob"</span>, <span class="attr">site</span> : <span class="string">"www.runoob.com"</span> &#125;</span><br><span class="line"><span class="keyword">var</span> site2 = &#123; <span class="attr">name</span> : <span class="string">"Google"</span>, <span class="attr">site</span> : <span class="string">"www.google.com"</span> &#125;</span><br><span class="line"><span class="keyword">var</span> site3 = &#123; <span class="attr">name</span> : <span class="string">"Taobao"</span>, <span class="attr">site</span> : <span class="string">"www.taobao.com"</span> &#125;</span><br><span class="line"><span class="built_in">console</span>.table([site1, site2, site3]);</span><br></pre></td></tr></table></figure><p><img src="../images/tools/chrome_tip30.png" title="console.group打印对象数组"></p><p>第二个参数可指定需要输出的表头名，默认全部输出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> site1 = &#123; <span class="attr">name</span> : <span class="string">"Runoob"</span>, <span class="attr">site</span> : <span class="string">"www.runoob.com"</span> &#125;</span><br><span class="line"><span class="keyword">var</span> site2 = &#123; <span class="attr">name</span> : <span class="string">"Google"</span>, <span class="attr">site</span> : <span class="string">"www.google.com"</span> &#125;</span><br><span class="line"><span class="keyword">var</span> site3 = &#123; <span class="attr">name</span> : <span class="string">"Taobao"</span>, <span class="attr">site</span> : <span class="string">"www.taobao.com"</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.table([site1, site2, site3], [<span class="string">"name"</span>]);</span><br><span class="line"><span class="built_in">console</span>.table([site1, site2, site3], [<span class="string">"site"</span>]);</span><br><span class="line"><span class="built_in">console</span>.table([site1, site2, site3], [<span class="string">"name"</span>, <span class="string">"site"</span>]);</span><br></pre></td></tr></table></figure><p><img src="../images/tools/chrome_tip31.png" title="console.group打印对象数组并设置表头"></p></li></ol><h2 id="Dom断点调试"><a href="#Dom断点调试" class="headerlink" title="Dom断点调试"></a>Dom断点调试</h2><p>  比如页面有一个p标签和两个按钮，一个按钮的功能为修改p段落样式，一个按钮的功能为删除p段落，通过在Dom上添加断点来定位到相应的js代码。</p><ol><li>鼠标选中元素，找到Dom节点位置</li><li>右键选择 <code>Break on</code>，选择 <code>attributes modifications</code><br><img src="../images/tools/chrome_tip4.png" title="Dom断点调试"></li><li>当我们点击按钮的时候，会自动帮我们定位到js中的代码位置断点<br><img src="../images/tools/chrome_tip5.png" title="Dom断点调试"><br>同理，选择 <code>node removal</code>，既可以在元素删除的时候断点</li></ol><h2 id="Dom绑定事件断点调试"><a href="#Dom绑定事件断点调试" class="headerlink" title="Dom绑定事件断点调试"></a>Dom绑定事件断点调试</h2><p>  上一个方法我们介绍了如何给Dom断点调试，但是该方法仅支持调试属性修改和节点删除事件。下面我们介绍如何给Dom绑定的时候进行断点，差点执行流程。</p><ol><li>鼠标选中元素，在 <code>Elements</code> 一栏打开 <code>Event Listeners</code></li><li>知道绑定的方法，以 <code>click</code> 方法为例，展开该方法<br><img src="../images/tools/chrome_tip11.png" title="Dom绑定事件断点调试"></li><li>找到引用的js文件并打开<br><img src="../images/tools/chrome_tip12.png" title="Dom绑定事件断点调试"></li><li>这样就找到了该Dom元素对应的click方法<br><img src="../images/tools/chrome_tip13.png" title="Dom绑定事件断点调试"></li><li>然后我们就可以设置相应的断点，进行单步调试了</li></ol><h2 id="错误断点调试"><a href="#错误断点调试" class="headerlink" title="错误断点调试"></a>错误断点调试</h2><p>  当我们的js遇到错误的时候，有的时候我们可以通过错误信息后面的js来定位到错误的地方。下面介绍一下另外一种方法：</p><ol><li>打开开发者工具，切换到source面板</li><li>点击 <code>Pause on exceptions</code>，勾选 <code>Pause on caught exceptions</code></li><li>刷新页面，这个时候页面会自动在发生错误的位置增加断点<br><img src="../images/tools/chrome_tip16.png" title="错误断点调试"></li></ol><h2 id="控制台代码手动添加debug"><a href="#控制台代码手动添加debug" class="headerlink" title="控制台代码手动添加debug"></a>控制台代码手动添加debug</h2><ol><li>比如我们需要在控制台测试我们编写的某一段代码，且需要在代码执行的时候添加debug断点，除了手动在代码中添加debugger外，还可以这样：</li><li><p>也可以用于给当前页面的全局方法添加断点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'I need debug!'</span>);</span><br><span class="line">&#125;</span><br><span class="line">debug(test)</span><br><span class="line"></span><br><span class="line">test()</span><br></pre></td></tr></table></figure><p><img src="../images/tools/chrome_tip6.png" title="控制台代码手动添加debug"></p></li></ol><h2 id="控制台拷贝对象"><a href="#控制台拷贝对象" class="headerlink" title="控制台拷贝对象"></a>控制台拷贝对象</h2><ol><li>在打印的对象上右键，找到 <code>Store as global variable</code>，此时会自动输出一个temp1的全局变量，手动执行 <code>copy(temp1)</code> 就可以复制到剪切板了。<br><img src="../images/tools/chrome_tip7.png" title="控制台拷贝对象"><br><img src="../images/tools/chrome_tip8.png" title="控制台拷贝对象"></li></ol><h2 id="控制台-符号"><a href="#控制台-符号" class="headerlink" title="控制台$符号"></a>控制台$符号</h2><ol><li><p>在chrome中，除了使用 <code>document.getElementById</code> 系列方法或 <code>document.querySelector</code> 系列方法外，还可以使用 <code>$</code> 来选择元素，<span style="color:red">注意此 <code>$</code> 并不等同于jQuery中的 <code>$</code>。</span></p><p>假设有个这样的结构：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"para"</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"changeColor()"</span>&gt;</span>修改颜色<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"deleteDom()"</span>&gt;</span>删除元素<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过$也可以选择p和button</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'p'</span>) <span class="comment">// &lt;p id="para"&gt;Hello World&lt;/p&gt;</span></span><br><span class="line">$(<span class="string">'button'</span>) <span class="comment">// &lt;button onclick="changeColor()"&gt;修改颜色&lt;/button&gt;</span></span><br><span class="line"><span class="comment">// $ 方法的效果相当于 document.querySelector()，获取单个元素，如果存在多个，返回第一个元素</span></span><br><span class="line"></span><br><span class="line">$$(<span class="string">'p'</span>) <span class="comment">// [p]</span></span><br><span class="line">$$(<span class="string">'button'</span>) <span class="comment">// [button, button]</span></span><br><span class="line"><span class="comment">// $$ 方法的效果相当于 document.querySelectorAll()，获取多个元素，返回数组</span></span><br></pre></td></tr></table></figure><p><img src="../images/tools/chrome_tip9.png" title="控制台$符号"></p></li></ol><h2 id="调试nodejs程序"><a href="#调试nodejs程序" class="headerlink" title="调试nodejs程序"></a>调试nodejs程序</h2><ol><li><p>通常我们在执行node程序的时候，会这样操作，这样的话我们只能使用命令行工具来进行debug：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node app.js</span><br></pre></td></tr></table></figure></li><li><p>我们也可以这样启动命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node --inspect-brk app.js</span><br></pre></td></tr></table></figure></li><li><p>启动完成之后，我们使用chrome打开任意一个页面，打开开发者工具，开发者工具会自动多出一个测试node的工具，点击这个就可以在chrome中debug了。<br><img src="../images/tools/chrome_tip10.png" title="调试nodejs程序"></p></li></ol><h2 id="chrome充当编辑器"><a href="#chrome充当编辑器" class="headerlink" title="chrome充当编辑器"></a>chrome充当编辑器</h2><ol><li>打开开发者工具，切换到source面板</li><li>选择 <code>Filesystem</code> ，如果看不见，点击后面的箭头展开，点击 <code>Add floder to workspace</code> 选择本地磁盘的文件夹</li><li>然后就可以在chrome上操作文件了，保存的时候会自动同步到本地磁盘</li><li>如果是html文件，可以右键 <code>Copy link address</code> 到地址栏打开<br><img src="../images/tools/chrome_tip17.png" title="调试nodejs程序"></li></ol><h2 id="保存代码片段"><a href="#保存代码片段" class="headerlink" title="保存代码片段"></a>保存代码片段</h2><p>  我们可以在chrome中保存一些常用的代码片段，来减少我们重复性的输入</p><ol><li>打开开发者工具，切换到source面板</li><li>选择 <code>Snippets</code> ，如果看不见，点击后面的箭头展开，点击 <code>New Snippet</code> 添加自己的代码片段<br><img src="../images/tools/chrome_tip18.png" title="chrome保存代码片段"></li><li>假设我们添加一个名为localstorage的代码片段，如：<br><img src="../images/tools/chrome_tip19.png" title="chrome保存代码片段"></li><li>快捷键 <code>command + p</code>，在搜索框中输入 <code>！</code>，会列出所有的代码片段，选择相应的执行即可<br><img src="../images/tools/chrome_tip20.png" title="chrome保存代码片段"></li><li>这个时候就会在控制台执行相应的代码，如<br><img src="../images/tools/chrome_tip21.png" title="chrome保存代码片段"></li></ol><h2 id="动画检查器"><a href="#动画检查器" class="headerlink" title="动画检查器"></a>动画检查器</h2><p>  假设我们实现了一个动画的效果，代码如下：<br>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        *&#123;</span></span><br><span class="line"><span class="undefined">            margin: 0;</span></span><br><span class="line"><span class="undefined">            padding: 0;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.run</span>&#123;</span></span><br><span class="line"><span class="undefined">            width: 100px;</span></span><br><span class="line"><span class="undefined">            height: 100px;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#ccc</span>;</span></span><br><span class="line"><span class="undefined">            display: flex;</span></span><br><span class="line"><span class="undefined">            justify-content: center;</span></span><br><span class="line"><span class="undefined">            align-items: center;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.run</span><span class="selector-class">.ani</span>&#123;</span></span><br><span class="line"><span class="undefined">            animation: runAni 1s linear infinite;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        @<span class="keyword">keyframes</span> runAni &#123;</span></span><br><span class="line"><span class="undefined">            0% &#123;</span></span><br><span class="line"><span class="undefined">                transform: translate(0, 0);</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">            50% &#123;</span></span><br><span class="line"><span class="undefined">                transform: translate(300px, 0);</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">            100% &#123;</span></span><br><span class="line"><span class="undefined">                transform: translate(0px, 0);</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.btn</span>&#123;</span></span><br><span class="line"><span class="undefined">            width: 50px;</span></span><br><span class="line"><span class="undefined">            height: 30px;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line"><span class="undefined">            display: flex;</span></span><br><span class="line"><span class="undefined">            justify-content: center;</span></span><br><span class="line"><span class="undefined">            align-items: center;</span></span><br><span class="line"><span class="undefined">            margin-top: 50px;</span></span><br><span class="line"><span class="undefined">            cursor: pointer;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"run"</span>&gt;</span>running<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn"</span> <span class="attr">onclick</span>=<span class="string">"startRun()"</span>&gt;</span>开始<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> box = <span class="built_in">document</span>.querySelector(<span class="string">'.run'</span>)</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">startRun</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            box.classList.add(<span class="string">'ani'</span>);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>  当PM过来验收的时候觉得动画时间不太满意，这个时候我们可能需要不停的修改代码，让PM去看哪个时间比较OK。相对来说会比较烦，我们可以通过chrome字自带的动画检查器来控制动画。</p><p>  流程如下：</p><ol><li>打开开发者工具</li><li>快捷键 <code>command + shift + p</code> (或 <code>command + p</code>，再输入&gt;)，输入 <code>Show Animations</code><br><img src="../images/tools/chrome_tip24.png" title="性能监控"></li><li>会多出一个窗口显示Animation，运行动画（按钮触发或刷新页面）会抓取到动画，点击查看详细动画<br><img src="../images/tools/chrome_tip25.png" title="性能监控"></li><li>每一个线段即为一个动画周期，节点即为keyframes的节点<br><img src="../images/tools/chrome_tip26.png" title="性能监控"></li><li>这个时候就可以让PM自己来拖动，选择合适的动画时间了</li></ol><h2 id="性能监控"><a href="#性能监控" class="headerlink" title="性能监控"></a>性能监控</h2><ol><li>打开开发者工具</li><li>快捷键 <code>command + shift + p</code> (或 <code>command + p</code>，再输入&gt;)，输入 <code>Show Performace Monitor</code><br><img src="../images/tools/chrome_tip22.png" title="性能监控"></li><li>会多出一个窗口显示网页性能Performace<br><img src="../images/tools/chrome_tip23.png" title="性能监控"></li><li>通过分析这些指标来了解网页的性能</li></ol><h2 id="定位代码的内存泄漏"><a href="#定位代码的内存泄漏" class="headerlink" title="定位代码的内存泄漏"></a>定位代码的内存泄漏</h2><p>  <a href="https://www.ixigua.com/i6762436172716179980/" target="_blank" rel="noopener">查看视频</a>、<a href="https://www.ixigua.com/i6780614829343244812/" target="_blank" rel="noopener">查看视频</a></p>]]></content>
    
    <summary type="html">
    
      不被人所知的Chrome调试技巧，入行十年也不一定全知道
    
    </summary>
    
    
      <category term="Tools" scheme="http://pimichen.com/blog/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>console打印对象时奇怪的现象</title>
    <link href="http://pimichen.com/blog/javascript/console%E6%89%93%E5%8D%B0%E5%AF%B9%E8%B1%A1%E6%97%B6%E5%A5%87%E6%80%AA%E7%9A%84%E7%8E%B0%E8%B1%A1.html"/>
    <id>http://pimichen.com/blog/javascript/console打印对象时奇怪的现象.html</id>
    <published>2020-02-23T16:00:00.000Z</published>
    <updated>2020-02-23T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在console执行这一段代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  b: <span class="number">2</span>,</span><br><span class="line">  c: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj)</span><br><span class="line">obj.a = <span class="number">11</span></span><br><span class="line"><span class="built_in">console</span>.log(obj)</span><br></pre></td></tr></table></figure></p><p>如下图：<br><img src="../images/javascript/js_obj_console1.png" title="console.log打印对象"></p><p>但是当我们展开第一个输出的对象时，会返现一个奇怪的现象，里面的a从1变成了11<br><img src="../images/javascript/js_obj_console2.png" title="console.log打印对象"></p><p>原因：<br>在执行console.log的时候，chrome会对变量obj求一次值，输出到控制台。当点击展开时，又会继续对这个变量求一次值，显示它的属性，但是这个因为这个时候对象引用的值已经改变了，所以会显示新的值。</p><p>如果需要详细的看出前后的变化，可以使用 <code>JSON.stringify(obj)</code> 来打印obj。</p><p><br><br></p><p>再额外介绍一个小功能：<br>当我们需要复制控制台输出的对象时，可以右键对象，点击出现的 <code>Store as global variable</code>，控制台会自动出现一个temp1的全局变量，执行 <code>copy(temp1)</code> 就可以复制到剪切板了。</p>]]></content>
    
    <summary type="html">
    
      使用console.log打印对象时，点击展开出现奇怪的现象
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://pimichen.com/blog/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>typescript基本数据类型</title>
    <link href="http://pimichen.com/blog/typescript/typescript%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html"/>
    <id>http://pimichen.com/blog/typescript/typescript基本数据类型.html</id>
    <published>2020-02-23T16:00:00.000Z</published>
    <updated>2020-02-23T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JavaScript基本数据类型"><a href="#JavaScript基本数据类型" class="headerlink" title="JavaScript基本数据类型"></a>JavaScript基本数据类型</h2><ul><li><p>ES5:<br>undefined、null、string、number、boolean、object</p></li><li><p>ES6新增：<br>symbol</p></li></ul><h2 id="TypeScript基本数据类型"><a href="#TypeScript基本数据类型" class="headerlink" title="TypeScript基本数据类型"></a>TypeScript基本数据类型</h2><p>sting字符串、number数值、boolean布尔值<br>array数组、tuple元组<br>enum枚举、any任意<br>undefined、null<br>void、never</p><h3 id="string类型类型"><a href="#string类型类型" class="headerlink" title="string类型类型"></a>string类型类型</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str: <span class="built_in">string</span> = <span class="string">'abc'</span></span><br></pre></td></tr></table></figure><h3 id="number数值类型"><a href="#number数值类型" class="headerlink" title="number数值类型"></a>number数值类型</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> num: <span class="built_in">number</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="boolean布尔值类型"><a href="#boolean布尔值类型" class="headerlink" title="boolean布尔值类型"></a>boolean布尔值类型</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> flag: <span class="built_in">boolean</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="array数组类型"><a href="#array数组类型" class="headerlink" title="array数组类型"></a>array数组类型</h3><p>数组中所有元素是同一种数据类型<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 在元素类型后面带上[]</span></span><br><span class="line"><span class="keyword">const</span> arr1: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">const</span> arr2: <span class="built_in">string</span>[] = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 使用数组泛型 Array&lt;元素类型&gt;</span></span><br><span class="line"><span class="keyword">const</span> arr3: <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">const</span> arr4: <span class="built_in">Array</span>&lt;<span class="built_in">string</span>&gt; = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br></pre></td></tr></table></figure></p><h3 id="tuple元组"><a href="#tuple元组" class="headerlink" title="tuple元组"></a>tuple元组</h3><p>属于数组的一种，可定义不同类型的元素<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> tumple1: [<span class="built_in">number</span>, <span class="built_in">string</span>] = [<span class="number">1</span>, <span class="string">'2'</span>]</span><br></pre></td></tr></table></figure></p><h3 id="enum枚举类型"><a href="#enum枚举类型" class="headerlink" title="enum枚举类型"></a>enum枚举类型</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认从0开始编号</span></span><br><span class="line"><span class="keyword">enum</span> Color &#123;Red, Green, Blue&#125; <span class="comment">// 0、1、2</span></span><br><span class="line"><span class="keyword">const</span> color: Color = Color.Red</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全部自定义编号</span></span><br><span class="line"><span class="keyword">enum</span> Color2 &#123;Red = <span class="number">2</span>, Green = <span class="number">4</span>, Blue = <span class="number">6</span>&#125; <span class="comment">// 2、4、6</span></span><br><span class="line"><span class="keyword">const</span> color2: Color2 = Color2.Red</span><br><span class="line"></span><br><span class="line"><span class="comment">// 部分自定义标号（自定义的前面为默认标号，自定义的后面+1）</span></span><br><span class="line"><span class="keyword">enum</span> Color3&#123;Red, Green = <span class="number">3</span>, Blue, Pink&#125; <span class="comment">// 0、3、4、5</span></span><br><span class="line"><span class="keyword">const</span> color3: Color3 = Color3.Pink</span><br><span class="line"></span><br><span class="line"><span class="comment">// 由枚举的值得到它的名字</span></span><br><span class="line"><span class="keyword">const</span> index2: <span class="built_in">string</span> = Color2[<span class="number">2</span>]</span><br></pre></td></tr></table></figure><h3 id="any任意类型"><a href="#any任意类型" class="headerlink" title="any任意类型"></a>any任意类型</h3><p>定义之后可任意变化类型<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> any1: <span class="built_in">any</span> = <span class="number">1</span></span><br><span class="line">any1 = <span class="string">'2'</span></span><br><span class="line">any1 = <span class="literal">true</span></span><br><span class="line">any1 = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如：</span></span><br><span class="line"><span class="keyword">const</span> title: <span class="built_in">any</span> = <span class="built_in">document</span>.getElementById(<span class="string">'title'</span>)</span><br><span class="line">title.style.color = <span class="string">'red'</span></span><br></pre></td></tr></table></figure></p><h3 id="undefined和null"><a href="#undefined和null" class="headerlink" title="undefined和null"></a>undefined和null</h3><p>所有类型的子类型，常用于联合类型中<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> u: <span class="literal">undefined</span> = <span class="literal">undefined</span></span><br><span class="line"><span class="keyword">const</span> n: <span class="literal">null</span> = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 联合类型</span></span><br><span class="line"><span class="keyword">let</span> num2: <span class="built_in">number</span> | <span class="literal">undefined</span> | <span class="literal">null</span></span><br><span class="line">num2 = <span class="number">1</span></span><br><span class="line">num2 = <span class="literal">undefined</span></span><br><span class="line">num2 = <span class="literal">null</span></span><br></pre></td></tr></table></figure></p><h3 id="void"><a href="#void" class="headerlink" title="void"></a>void</h3><p>没有任何类型，与any类型相反，一般用于定义方法的时候方法没有返回值<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tip</span> (<span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Your operation may be make a msitake, Please check'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 假设方法有返回值，则不能使用void</span></span><br><span class="line">function getData (name: string = 'TypeScript'): string &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`Hello <span class="subst">$&#123;name&#125;</span>`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="never"><a href="#never" class="headerlink" title="never"></a>never</h3><p>never类型是其他类型的子类型，表示的是那些永不存在的值的类型。<br>never类型是那些总是会抛出异常或根本就不会有返回值的函数表达式或箭头函数表达式的返回值类型。<br>变量也可能是 never类型，当它们被永不为真的类型保护所约束时。<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">error</span> (<span class="params">message: <span class="built_in">string</span></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(message)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">infiniteLoop</span>(<span class="params"></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">如：</span><br><span class="line"><span class="keyword">var</span> never1: never;</span><br><span class="line">never1 = <span class="number">1</span>; <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      TypeScript中几种基本数据类型
    
    </summary>
    
    
      <category term="TypeScript" scheme="http://pimichen.com/blog/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>es6-generator函数</title>
    <link href="http://pimichen.com/blog/es6/es6-generator%E5%87%BD%E6%95%B0.html"/>
    <id>http://pimichen.com/blog/es6/es6-generator函数.html</id>
    <published>2020-02-22T16:00:00.000Z</published>
    <updated>2020-02-22T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>参考：<a href="http://es6.ruanyifeng.com/#docs/generator" target="_blank" rel="noopener">http://es6.ruanyifeng.com/#docs/generator</a></p></blockquote><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><code>Generator</code> 函数的两大特征：<code>*</code>、<code>yield</code>（产出）。</p><p><code>Generator</code> 函数的表示法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">foo</span>(<span class="params">x, y</span>) </span>&#123; <span class="keyword">yield</span> <span class="string">'hello'</span> &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">foo</span>(<span class="params">x, y</span>) </span>&#123; <span class="keyword">yield</span> <span class="string">'hello'</span> &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">foo</span>(<span class="params">x, y</span>) </span>&#123; <span class="keyword">yield</span> <span class="string">'hello'</span> &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span>*<span class="title">foo</span>(<span class="params">x, y</span>) </span>&#123; <span class="keyword">yield</span> <span class="string">'hello'</span> &#125;</span><br></pre></td></tr></table></figure></p><p>通常将 <code>*</code> 号紧跟在 <code>function</code> 关键字的后面，即：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">foo</span>(<span class="params">x, y</span>) </span>&#123; ··· &#125;</span><br></pre></td></tr></table></figure></p><p>例：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">helloWorld</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'hello'</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'world'</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'ending'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hw = helloWorld();</span><br></pre></td></tr></table></figure></p><p>上面代码定义了一个 <code>Generator</code> 函数helloWorld，它内部有两个 <code>yield</code> 表达式（hello和world），即该函数有三个状态：hello，world 和 return 语句（结束执行）。</p><p><code>Generator</code> 函数的调用和普通的函数一样在函数名后面加括号，但是不同的是，调用之后不会立即执行，而是指向内部状态的指针对象。需要和 <code>Iterator</code> 一样调用 <code>next</code> 方法。每调用一次 <code>next</code> 方法。每调用一次，指针移动一次，直到遇到 <code>yield</code> 或 <code>return</code> 才停下来这一步，并且返回一个done来标识是否完全停止。</p><p>上例中调用 <code>next</code>：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hw.next() <span class="comment">// &#123;value: "hello", done: false&#125;</span></span><br><span class="line"></span><br><span class="line">hw.next() <span class="comment">// &#123;value: "world", done: false&#125;</span></span><br><span class="line"></span><br><span class="line">hw.next() <span class="comment">// &#123;value: "ending", done: true&#125;</span></span><br><span class="line"></span><br><span class="line">hw.next() <span class="comment">// &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure></p><p>由于 <code>yield</code> 可以起到暂停执行的操作，因此可以利用该特性实现异步操作。完整逻辑如下：</p><p>（1）遇到 <code>yield</code> 关键字，就暂停执行后面的操作。并将紧跟在 <code>yield</code> 后面的表达式的值，作为返回对象的value值返回。</p><p>（2）下一次调用 <code>next</code> 方法，再继续往下执行，知道遇到下一个 <code>yeild</code> 表达式。</p><p>（3）如果没有遇到 <code>yield</code> 表达式，就一直运行到函数结束，直到 <code>return</code> 为止。</p><p>（4）如果没有 <code>return</code>，则返回的对象的value值为 <code>undefined</code>。</p><p>需要注意的是，<code>yield</code> 后面的表达式，只有在调用 <code>next</code> 方法，内部指针指到这一句时，才会执行这条语句。如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">gen</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">123</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">456</span>)</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">123</span> + <span class="number">456</span> <span class="comment">// 只有调用next方法指到该行时，才会执行 123+456</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当然，<code>Generator</code> 函数也可以不搭配 <code>yield</code> 使用，这样就变成了一个简单的暂缓函数。如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'执行了！'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> generator = f()</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  generator.next() <span class="comment">// "执行了！"</span></span><br><span class="line">&#125;, <span class="number">2000</span>);</span><br></pre></td></tr></table></figure></p><p><code>yield</code> 关键字只能用在 <code>Generator</code> 函数中，用在普通函数里面会报错。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Uncaught SyntaxError: Unexpected number</span></span><br></pre></td></tr></table></figure></p><h2 id="for…of循环"><a href="#for…of循环" class="headerlink" title="for…of循环"></a>for…of循环</h2><p><code>for...of</code> 循环可以自动遍历 <code>Generator</code> 函数运行时生成的 <code>Iterator</code> 对象，且此时不再需要调用next方法。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">4</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> foo()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1 2 3 4 5</span></span><br></pre></td></tr></table></figure></p><p>使用 <code>for...of</code> 循环，依次显示 5 个yield表达式的值。一旦 <code>next</code> 方法返回的值是 <code>true</code>，就会停止循环，且不包含该返回对象，即不包含 <code>return</code> 语句的6。</p><h2 id="Generator-prototype-throw"><a href="#Generator-prototype-throw" class="headerlink" title="Generator.prototype.throw()"></a>Generator.prototype.throw()</h2><p><code>Generator</code> 函数返回的遍历器对象，都有一个throw方法，可以在函数体外抛出错误，然后在 <code>Generator</code> 函数体内捕获。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> g = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">yield</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'内部捕获'</span>, e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i = g();</span><br><span class="line">i.next();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  i.throw(<span class="string">'a'</span>);</span><br><span class="line">  i.throw(<span class="string">'b'</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'外部捕获'</span>, e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 内部捕获 a</span></span><br><span class="line"><span class="comment">// 外部捕获 b</span></span><br></pre></td></tr></table></figure></p><p>特殊情况1：<br>注意不要混淆 <code>Generator.prototype.throw()</code> 和全局的 <code>throw</code> 方法。<br>将上面的 <code>throw</code> 改用全局方法，则会在函数体外的 <code>catch</code> 语句中捕获。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> g = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">yield</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'内部捕获'</span>, e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i = g();</span><br><span class="line">i.next();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  i.throw(<span class="string">'a'</span>);</span><br><span class="line">  i.throw(<span class="string">'b'</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'外部捕获'</span>, e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 外部捕获 a</span></span><br></pre></td></tr></table></figure></p><p>特殊情况2：<br>如果 <code>Generator</code> 函数中没有try…catch语句，在外面调用 <code>Generator.prototype.throw()</code>，则会被外部的 <code>try...catch</code> 捕获。如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> g = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i = g();</span><br><span class="line">i.next();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  i.throw(<span class="string">'a'</span>);</span><br><span class="line">  i.throw(<span class="string">'b'</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'外部捕获'</span>, e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 外部捕获 a</span></span><br></pre></td></tr></table></figure></p><p>特殊情况3：如果内部外部都没有 <code>try...catch</code>，则会报错。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> g = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i = g();</span><br><span class="line">i.next();</span><br><span class="line">i.throw(); <span class="comment">// Uncaught undefined</span></span><br></pre></td></tr></table></figure></p><h2 id="Generator-prototype-return"><a href="#Generator-prototype-return" class="headerlink" title="Generator.prototype.return()"></a>Generator.prototype.return()</h2><p><code>Generator</code> 函数返回的遍历器对象，还有一个 <code>return</code> 方法，可以返回给定的值，并且终结遍历 <code>Generator</code> 函数。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">gen</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> g = gen();</span><br><span class="line"></span><br><span class="line">g.next()        <span class="comment">// &#123; value: 1, done: false &#125;</span></span><br><span class="line">g.return(<span class="string">'foo'</span>) <span class="comment">// &#123; value: "foo", done: true &#125;</span></span><br><span class="line">g.next()        <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      es6 generator函数
    
    </summary>
    
    
      <category term="ES6" scheme="http://pimichen.com/blog/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>es6-proxy方法</title>
    <link href="http://pimichen.com/blog/es6/es6-proxy%E6%96%B9%E6%B3%95.html"/>
    <id>http://pimichen.com/blog/es6/es6-proxy方法.html</id>
    <published>2020-02-22T16:00:00.000Z</published>
    <updated>2020-02-22T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>参考：<a href="http://es6.ruanyifeng.com/#docs/proxy" target="_blank" rel="noopener">http://es6.ruanyifeng.com/#docs/proxy</a></p></blockquote><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><code>Proxy</code> 用于修改某些操作的默认行为。</p><p><code>Proxy</code> 可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。<code>Proxy</code> 这个词的原意是代理，用在这里表示由它来“代理”某些操作，可以译为“代理器”。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">  get: <span class="function"><span class="keyword">function</span> (<span class="params">target, propKey, receiver</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`getting <span class="subst">$&#123;propKey&#125;</span>!`</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(target, propKey, receiver);</span><br><span class="line">  &#125;,</span><br><span class="line">  set: <span class="function"><span class="keyword">function</span> (<span class="params">target, propKey, value, receiver</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`setting <span class="subst">$&#123;propKey&#125;</span>!`</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.set(target, propKey, value, receiver);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * get:</span></span><br><span class="line"><span class="comment"> *    target: 目标对象</span></span><br><span class="line"><span class="comment"> *    propKey: 访问的属性</span></span><br><span class="line"><span class="comment"> *    receiver: Proxy实例</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * set:</span></span><br><span class="line"><span class="comment"> *    target: 目标对象</span></span><br><span class="line"><span class="comment"> *    propKey: 访问的属性</span></span><br><span class="line"><span class="comment"> *    value: 设置的新值</span></span><br><span class="line"><span class="comment"> *    receiver: Proxy实例</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>上面代码对一个空对象架设了一层拦截，重定义了属性的读取（<code>get</code>）和设置（<code>set</code>）行为。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">obj.count = <span class="number">1</span></span><br><span class="line"><span class="comment">//  setting count!</span></span><br><span class="line"></span><br><span class="line">obj.count += <span class="number">1</span></span><br><span class="line"><span class="comment">//  getting count!</span></span><br><span class="line"><span class="comment">//  setting count!</span></span><br><span class="line"><span class="comment">//  2</span></span><br></pre></td></tr></table></figure></p><p>ES6 原生提供 <code>Proxy</code> 构造函数，用来生成 <code>Proxy</code> 实例。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * new Proxy()表示生成一个Proxy实例</span></span><br><span class="line"><span class="comment"> * harget参数表示所要拦截的目标对象</span></span><br><span class="line"><span class="comment"> * handler参数也是一个对象，用来定制拦截行为。</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></p><p>当然，我们也可以拦截读取属性：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">  get: <span class="function"><span class="keyword">function</span>(<span class="params">target, propKey</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">35</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">proxy.time <span class="comment">// 35</span></span><br><span class="line">proxy.name <span class="comment">// 35</span></span><br><span class="line">proxy.title <span class="comment">// 35</span></span><br></pre></td></tr></table></figure></p><p>拦截元素返回35，所以无法访问哪个属性，都返回35。</p><p>Vue3.0 里面的监听器（Observer）由 <code>Object.defineProperty</code> 改用 <code>Proxy</code>，解决了增加或删除属性、修改数组某一项值的双向绑定问题。</p>]]></content>
    
    <summary type="html">
    
      es6-proxy方法
    
    </summary>
    
    
      <category term="ES6" scheme="http://pimichen.com/blog/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>es6-iterator遍历器</title>
    <link href="http://pimichen.com/blog/es6/es6-iterator%E9%81%8D%E5%8E%86%E5%99%A8.html"/>
    <id>http://pimichen.com/blog/es6/es6-iterator遍历器.html</id>
    <published>2020-02-22T16:00:00.000Z</published>
    <updated>2020-02-22T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>参考：<a href="http://es6.ruanyifeng.com/#docs/iterator" target="_blank" rel="noopener">http://es6.ruanyifeng.com/#docs/iterator</a></p></blockquote><p><code>JavaScript</code> 原有的表示“集合”的数据结构，主要是数组（<code>Array</code>）和对象（<code>Object</code>），ES6 又添加了 <code>Map</code> 和 <code>Set</code>。</p><p>遍历器（<code>Iterator</code>）是一种访问机制，只要部署了 <code>Iterator</code> 接口，就可以完成遍历操作。</p><p><code>Iterator</code> 的作用有三个：</p><ul><li>为各种数据结构，提供一个统一的、简便的访问接口；</li><li>使得数据结构的成员能够按某种次序排列；</li><li>ES6 创造了一种新的遍历命令 for…of 循环，<code>Iterator</code> 接口主要供 for…of 消费。</li></ul><p><code>Iterator</code> 的遍历过程是这样的。</p><p>（1）创建一个指针对象，指向当前数据结构的起始位置。也就是说，遍历器对象本质上，就是一个指针对象。</p><p>（2）第一次调用指针对象的next方法，可以将指针指向数据结构的第一个成员。</p><p>（3）第二次调用指针对象的next方法，指针就指向数据结构的第二个成员。</p><p>（4）不断调用指针对象的next方法，直到它指向数据结构的结束位置。</p><p>原生具备 <code>Iterator</code> 遍历接口的数据结构如下</p><ul><li><strong>Array</strong></li><li><strong>String</strong></li><li><a href="http://es6.ruanyifeng.com/#docs/set-map" target="_blank" rel="noopener"><strong>Map</strong></a></li><li><a href="http://es6.ruanyifeng.com/#docs/set-map" target="_blank" rel="noopener"><strong>Set</strong></a></li><li><strong>TypedArray</strong></li><li><strong>函数的 arguments 对象</strong></li><li><strong>NodeList 对象</strong></li></ul><p>以数组Array为例，内部共有 <code>Symbol.iterator</code>、<code>keys</code>、<code>values</code>、<code>entries</code>这几种遍历器：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> colors = [<span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'blue'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// Symbol遍历器</span></span><br><span class="line"><span class="keyword">const</span> iterator1 = colors[<span class="built_in">Symbol</span>.iterator]() <span class="comment">// Array Iterator &#123;&#125;</span></span><br><span class="line"><span class="comment">// 调用next()，返回相应的元素值，直到done为true</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator1.next()) <span class="comment">// &#123;value: "red", done: false&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator1.next()) <span class="comment">// &#123;value: "green", done: false&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator1.next()) <span class="comment">// &#123;value: "blue", done: false&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator1.next()) <span class="comment">// &#123;value: undefined, done: true&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator1.next()) <span class="comment">// &#123;value: undefined, done: true&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'--分割线--'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// values遍历器（同Symbil.iterator）</span></span><br><span class="line"><span class="keyword">const</span> iterator2 = colors.values() <span class="comment">// Array Iterator &#123;&#125;</span></span><br><span class="line"><span class="comment">// 调用next()，返回相应的元素值，直到done为true</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator2.next()) <span class="comment">// &#123;value: "red", done: false&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator2.next()) <span class="comment">// &#123;value: "green", done: false&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator2.next()) <span class="comment">// &#123;value: "blue", done: false&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator2.next()) <span class="comment">// &#123;value: undefined, done: true&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator2.next()) <span class="comment">// &#123;value: undefined, done: true&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'--分割线--'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// keys遍历器</span></span><br><span class="line"><span class="keyword">const</span> iterator3 = colors.keys() <span class="comment">// Array Iterator &#123;&#125;</span></span><br><span class="line"><span class="comment">// 调用next()，返回相应的索引，直到done为true</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator3.next()) <span class="comment">// &#123;value: 0, done: false&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator3.next()) <span class="comment">// &#123;value: 1, done: false&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator3.next()) <span class="comment">// &#123;value: 2, done: false&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator3.next()) <span class="comment">// &#123;value: undefined, done: true&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator3.next()) <span class="comment">// &#123;value: undefined, done: true&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'--分割线--'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// entries遍历器</span></span><br><span class="line"><span class="keyword">const</span> iterator4 = colors.entries() <span class="comment">// Array Iterator &#123;&#125;</span></span><br><span class="line"><span class="comment">// 调用next()，返回相应的索引和元素组成的数组，直到done为true</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator4.next()) <span class="comment">// &#123;value: [0, "red"], done: false&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator4.next()) <span class="comment">// &#123;value: [1, "green"], done: false&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator4.next()) <span class="comment">// &#123;value: [2, "blue"], done: false&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator4.next()) <span class="comment">// &#123;value: undefined, done: true&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator4.next()) <span class="comment">// &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure></p><p>当然我们可以自己编写遍历器，比如我们编写一个 <code>values2</code> 遍历器，实现 <code>values</code> 遍历器的功能：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.values2 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> items = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    next() &#123;</span><br><span class="line">      <span class="keyword">const</span> done = i &gt;= items.length;</span><br><span class="line">      <span class="keyword">const</span> value = done ? <span class="literal">undefined</span> : items[i++]</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        value,</span><br><span class="line">        done</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> iterator5 = colors.values2() <span class="comment">// Array Iterator &#123;&#125;</span></span><br><span class="line"><span class="comment">// 调用next()，返回相应的元素值，直到done为true</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator5.next()) <span class="comment">// &#123;value: "red", done: false&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator5.next()) <span class="comment">// &#123;value: "green", done: false&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator5.next()) <span class="comment">// &#123;value: "blue", done: false&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator5.next()) <span class="comment">// &#123;value: undefined, done: true&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator5.next()) <span class="comment">// &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure></p><p>同理，<br>通过查找new String().__proto__可发现，<strong><em>String</em></strong>拥有Symbol.iterator遍历器<br>通过查找new Map().__proto__可发现，<strong><em>Map</em></strong>拥有Symbol.iterator、keys、values、entries<br>通过查找new Set().__proto__可发现，<strong><em>Set</em></strong>拥有Symbol.iterator、keys、values、entries<br>通过查找document.querySelectorAll(‘li’).__proto__可发现，<strong><em>NodeList</em></strong>拥有Symbol.iterator、keys、values、entries</p>]]></content>
    
    <summary type="html">
    
      Array、String、Map、Set、NodeList等可遍历的对象
    
    </summary>
    
    
      <category term="ES6" scheme="http://pimichen.com/blog/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>es6-标签模板</title>
    <link href="http://pimichen.com/blog/es6/es6-%E6%A0%87%E7%AD%BE%E6%A8%A1%E6%9D%BF.html"/>
    <id>http://pimichen.com/blog/es6/es6-标签模板.html</id>
    <published>2020-02-21T16:00:00.000Z</published>
    <updated>2020-02-21T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ES6模板字符串"><a href="#ES6模板字符串" class="headerlink" title="ES6模板字符串"></a>ES6模板字符串</h2><p>ES5 中拼接字符串是这样做的:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'ZhangSan'</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"My name is "</span> + name + <span class="string">", my age is "</span> + age);</span><br></pre></td></tr></table></figure></p><p>使用 ES6 模板字符串的字符串很简单：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">'ZhangSan'</span>;</span><br><span class="line"><span class="keyword">const</span> age = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`My name is <span class="subst">$&#123;name&#125;</span>, my age is <span class="subst">$&#123;age&#125;</span>`</span>);</span><br></pre></td></tr></table></figure></p><p>特别是在创建html元素的时候更加方便，<br>ES5中：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'ZhangSan'</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> sex = <span class="string">'male'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> messageHTML =</span><br><span class="line">  <span class="string">"&lt;div&gt;"</span> +</span><br><span class="line">    <span class="string">"&lt;p&gt;name: "</span> + name + <span class="string">"&lt;/p&gt;"</span> +</span><br><span class="line">    <span class="string">"&lt;p&gt;age: "</span> + age + <span class="string">"&lt;/p&gt;"</span> +</span><br><span class="line">    <span class="string">"&lt;p&gt;sex: "</span> + male + <span class="string">"&lt;/p&gt;"</span> +</span><br><span class="line">  <span class="string">"&lt;/div&gt;"</span></span><br></pre></td></tr></table></figure></p><p>ES6中：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">'ZhangSan'</span>;</span><br><span class="line"><span class="keyword">const</span> age = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">const</span> sex = <span class="string">'male'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> messageHTML =</span><br><span class="line">  <span class="string">`&lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;name: <span class="subst">$&#123;name&#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;age: <span class="subst">$&#123;age&#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;sex: <span class="subst">$&#123;male&#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;`</span></span><br></pre></td></tr></table></figure></p><h2 id="标签模板"><a href="#标签模板" class="headerlink" title="标签模板"></a>标签模板</h2><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>下面开始介绍标签模板，也是使用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">``</span><br></pre></td></tr></table></figure></p><p>模板字符串跟在一个函数名后面，表示作为函数的参数，如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert<span class="string">`hello`</span> <span class="comment">// 相当于调用 alert('hello')</span></span><br></pre></td></tr></table></figure></p><p>继续看一点复杂的，实现高亮一个字符串中的两个变量值 user、topic<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = <span class="string">'Peter'</span></span><br><span class="line"><span class="keyword">const</span> topic = <span class="string">'Learn to use markdown'</span></span><br><span class="line"><span class="keyword">const</span> sentence = highlight<span class="string">`<span class="subst">$&#123;user&#125;</span> has commented on your topic <span class="subst">$&#123;topic&#125;</span>`</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">highlight</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'Hello world'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sentence) <span class="comment">// 'Hello world'</span></span><br></pre></td></tr></table></figure></p><p>可以看出标签模板的输出是由函数的return语句决定的，所以想高亮字符串中的字符，需要去修改函数的返回值<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = <span class="string">'Peter'</span></span><br><span class="line"><span class="keyword">const</span> topic = <span class="string">'Learn to use markdown'</span></span><br><span class="line"><span class="keyword">const</span> sentence = highlight<span class="string">`<span class="subst">$&#123;user&#125;</span> has commented on your topic <span class="subst">$&#123;topic&#125;</span>`</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">highlight</span>(<span class="params">strings, ...values</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 此处从第二个参数开始使用rest方式以数组的形式获取剩余的参数</span></span><br><span class="line">  <span class="built_in">console</span>.log(strings) <span class="comment">// ["", " has commented on your topic ", ""]</span></span><br><span class="line">  <span class="built_in">console</span>.log(values) <span class="comment">// ["Peter", "Learn to use markdown"]</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">'Hello world'</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 我们可以看出第一个参数默认为字符串被变量拆分所剩下的字符串组成的数组，后面的参数为变量</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sentence) <span class="comment">// 'Hello world'</span></span><br></pre></td></tr></table></figure></p><p>获取函数参数后，改造返回值：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = <span class="string">'Peter'</span></span><br><span class="line"><span class="keyword">const</span> topic = <span class="string">'Learn to use markdown'</span></span><br><span class="line"><span class="keyword">const</span> sentence = highlight<span class="string">`<span class="subst">$&#123;user&#125;</span> has commented on your topic <span class="subst">$&#123;topic&#125;</span>`</span></span><br><span class="line"><span class="built_in">document</span>.body.innerHTML = sentence <span class="comment">// 再搭配hightlight样式即可</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">highlight</span>(<span class="params">strings, ...values</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> hignlighted = values.map(<span class="function"><span class="params">value</span> =&gt;</span> <span class="string">`&lt;span class="hightlight"&gt;<span class="subst">$&#123;value&#125;</span>&lt;/span&gt;`</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// let str = ''</span></span><br><span class="line">  <span class="comment">// strings.forEach((string, i) =&gt; str += `$&#123;string&#125;$&#123;hignlighted[i] || ''&#125;`) // 此处很巧妙的将两个数组又拼合在一起，需要注意最后一个hignlighted[i]为undefined，因为values.length始终比strings.length小1</span></span><br><span class="line">  <span class="comment">// return str</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 此处也可以使用reduce来拼合，参数1为fn，参数2为起始值</span></span><br><span class="line">  <span class="comment">// console.log([1, 2, 3, 4].reduce((prev, cur, i) =&gt; prev + cur, 0)) // 10</span></span><br><span class="line">  <span class="keyword">return</span> strings.reduce(<span class="function">(<span class="params">prev, cur, i</span>) =&gt;</span> <span class="string">`<span class="subst">$&#123;prev&#125;</span><span class="subst">$&#123;cur&#125;</span><span class="subst">$&#123;hignlighted[i] || <span class="string">''</span>&#125;</span>`</span>, <span class="string">''</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最终sentence输出为：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"hightlight"</span>&gt;</span>Peter<span class="tag">&lt;/<span class="name">span</span>&gt;</span> has commented on your topic <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"hightlight"</span>&gt;</span>Learn to use markdown<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="标签模板重要用途"><a href="#标签模板重要用途" class="headerlink" title="标签模板重要用途"></a>标签模板重要用途</h3><ul><li><p>过滤 HTML 字符串，防止用户输入恶意内容。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> message =</span><br><span class="line">SaferHTML<span class="string">`&lt;p&gt;<span class="subst">$&#123;sender&#125;</span> has sent you a message.&lt;/p&gt;`</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SaferHTML</span>(<span class="params">templateData</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> s = templateData[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> arg = <span class="built_in">String</span>(<span class="built_in">arguments</span>[i]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Escape special characters in the substitution.</span></span><br><span class="line">    s += arg.replace(<span class="regexp">/&amp;/g</span>, <span class="string">"&amp;amp;"</span>)</span><br><span class="line">            .replace(<span class="regexp">/&lt;/g</span>, <span class="string">"&amp;lt;"</span>)</span><br><span class="line">            .replace(<span class="regexp">/&gt;/g</span>, <span class="string">"&amp;gt;"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Don't escape special characters in the template.</span></span><br><span class="line">    s += templateData[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，sender变量往往是用户提供的，经过 <code>SaferHTML</code> 函数处理，里面的特殊字符都会被转义。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sender = <span class="string">'&lt;script&gt;alert("abc")&lt;/script&gt;'</span>; <span class="comment">// 恶意代码</span></span><br><span class="line"><span class="keyword">let</span> message = SaferHTML<span class="string">`&lt;p&gt;<span class="subst">$&#123;sender&#125;</span> has sent you a message.&lt;/p&gt;`</span>;</span><br><span class="line"></span><br><span class="line">message</span><br><span class="line"><span class="comment">// &lt;p&gt;&amp;lt;script&amp;gt;alert("abc")&amp;lt;/script&amp;gt; has sent you a message.&lt;/p&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>多语言转换（国际化处理）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">i18n<span class="string">`Welcome to <span class="subst">$&#123;siteName&#125;</span>, you are visitor number <span class="subst">$&#123;visitorNumber&#125;</span>!`</span></span><br><span class="line"><span class="comment">// "欢迎访问xxx，您是第xxxx位访问者！"</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      es6容易被忽略的标签模板
    
    </summary>
    
    
      <category term="ES6" scheme="http://pimichen.com/blog/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>浏览器模式compatMode</title>
    <link href="http://pimichen.com/blog/javascript/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%A8%A1%E5%BC%8FcompatMode.html"/>
    <id>http://pimichen.com/blog/javascript/浏览器模式compatMode.html</id>
    <published>2019-11-25T16:00:00.000Z</published>
    <updated>2019-11-25T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="浏览器有两种模式"><a href="#浏览器有两种模式" class="headerlink" title="浏览器有两种模式"></a>浏览器有两种模式</h2><ul><li>标准（严格）模式<br>html开头设置<code>&lt;!DOCTYPE html&gt;</code></li><li>怪异（混杂）模式<br>html开头无DOCTYPE或<code>&lt;!DOCTYPE&gt;</code></li></ul><h2 id="如何判断浏览器当前的模式"><a href="#如何判断浏览器当前的模式" class="headerlink" title="如何判断浏览器当前的模式"></a>如何判断浏览器当前的模式</h2><p><code>document.compatMode</code> 可判断模式类型：</p><ul><li>值为 <code>CSS1Compat</code>：标准模式</li><li>值为 <code>BackCompat</code>：怪异模式</li></ul><p>不同模式下，js的方法有可能不同，如：</p><ul><li>标准模式：<br>浏览器可视宽度：<code>document.documentElement.clientWidth</code><br>浏览器可视高度：<code>document.documentElement.clientHeight</code></li><li>怪异模式：<br>浏览器可视宽度：<code>document.body.clientWidth</code><br>浏览器可视高度：<code>document.body.clientHeight</code></li></ul>]]></content>
    
    <summary type="html">
    
      浏览器模式documentcompatMode
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://pimichen.com/blog/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>js最大安全整数</title>
    <link href="http://pimichen.com/blog/javascript/js%E5%AE%89%E5%85%A8%E6%95%B4%E6%95%B0.html"/>
    <id>http://pimichen.com/blog/javascript/js安全整数.html</id>
    <published>2019-11-21T16:00:00.000Z</published>
    <updated>2019-11-21T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong><code>Number.isSafeInteger(testValue)</code></strong> 判断是否是安全整数</p><p><strong><code>Number.MAX_SAFE_INTEGER</code></strong> 常量表示在 JavaScript 中最大的安全整数（2^53 - 1）</p><p><strong><code>Number.MIN_SAFE_INTEGER</code></strong> 常量表示在 JavaScript 中最小的安全整数 (-(2^53 - 1))</p><p><strong><code>Number.MAX_VALUE</code></strong> 属性表示在 JavaScript 里所能表示的最大数值</p><p><strong><code>Number.MIN_VALUE</code></strong> 属性表示在 JavaScript 里所能表示的最小数值</p><p>JavaScript中规定安全表示数字的范围为：<strong>[-(2^53 - 1), 2^53 - 1]</strong>，即 <strong>[-(Math.pow(2, 53) - 1)</strong>, <strong>Math.pow(2, 53) - 1]</strong>，安全的意思是能够准确的表示整数和正确的比较整数。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>.isSafeInteger(<span class="number">9007199254740991</span>) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Number</span>.isSafeInteger(<span class="number">9007199254740992</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Number</span>.MAX_SAFE_INTEGER   <span class="comment">// 9007199254740991</span></span><br><span class="line"><span class="built_in">Number</span>.MIN_SAFE_INTEGER   <span class="comment">// -9007199254740991</span></span><br><span class="line"><span class="built_in">Number</span>.MAX_VALUE          <span class="comment">// 1.7976931348623157e+308 即 1.7976931348623157 * 10 ^ (+308)</span></span><br><span class="line"><span class="built_in">Number</span>.MIN_VALUE          <span class="comment">// 5e-324 即 5 * 10^(-324)</span></span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">9007199254740993</span>)  <span class="comment">// 9007199254740992</span></span><br><span class="line"><span class="number">9007199254740991</span> + <span class="number">1</span> === <span class="number">9007199254740991</span> + <span class="number">2</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>当要对超大整数进行加法运算时，使用 + 是无法达到的，一旦超过 <code>Number.MAX_SAFE_INTEGER</code>，数字计算可能会出现异常，建议改成后端下发。</p>]]></content>
    
    <summary type="html">
    
      js最大安全整数，Number.MAX_SAFE_INTEGER、Number.MIN_SAFE_INTEGER、Number.MAX_VALUE、Number.MIN_VALUE
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://pimichen.com/blog/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>flex布局自适应</title>
    <link href="http://pimichen.com/blog/css/flex%E5%B8%83%E5%B1%80%E8%87%AA%E9%80%82%E5%BA%94.html"/>
    <id>http://pimichen.com/blog/css/flex布局自适应.html</id>
    <published>2019-11-19T16:00:00.000Z</published>
    <updated>2019-11-19T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>以下只介绍一些flex布局容易忽略但是却很有必要的用法，不介绍兼容性，可使用autoprefixer来解决。</p><ul><li><p>场景1：左侧固定，右侧自适应，三列布局类似<br>  <img src="../images/css/flex1.png" title="左侧固定，右侧自适应"></p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: green;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>; <span class="comment">/* 自适应 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>场景2：左右固定，中间自适应，中间内容超长对左侧造成自动放缩<br>  <img src="../images/css/flex2.png" title="左右固定，中间自适应，中间内容超长对左侧造成自动放缩"></p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span>center、center、center、center、center、center、center、center、center、<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">    <span class="attribute">flex-shrink</span>: <span class="number">0</span>; <span class="comment">/* 不会因为其他元素的超长而造成自动放缩 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.center</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">word-break</span>: break-all;</span><br><span class="line">    <span class="attribute">background-color</span>: green;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>; <span class="comment">/* 自适应 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">    <span class="attribute">flex-shrink</span>: <span class="number">0</span>; <span class="comment">/* 不会因为其他元素的超长而造成自动放缩 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>场景3：左右固定，中间自适应，中间内容超出单行省略<br>  <img src="../images/css/flex3.png" title="左右固定，中间自适应，中间内容超出单行省略"></p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left2"</span>&gt;</span>时代峻峰肯定是家乐福凯迪拉克接口路径困了就睡地方看时空裂缝决定是否就是点击神鼎飞丹砂立刻就飞快的数据分开及身份<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right2"</span>&gt;</span>right2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">    <span class="attribute">flex-shrink</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">    <span class="attribute">flex-shrink</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>; <span class="comment">/*设置width后，可以清楚flex布局的影响*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left2</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">word-break</span>: break-all;</span><br><span class="line">    <span class="attribute">background-color</span>: green;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right2</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>未完待续…</p></li></ul>]]></content>
    
    <summary type="html">
    
      flex布局单边固定，另一边自适应，flex内部单行省略等
    
    </summary>
    
    
      <category term="CSS" scheme="http://pimichen.com/blog/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>vue使用自定义指令解决iOS微信端input失焦回弹问题</title>
    <link href="http://pimichen.com/blog/vue/vue%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4%E8%A7%A3%E5%86%B3iOS%E5%BE%AE%E4%BF%A1%E7%AB%AFinput%E5%A4%B1%E7%84%A6%E5%9B%9E%E5%BC%B9%E9%97%AE%E9%A2%98.html"/>
    <id>http://pimichen.com/blog/vue/vue使用自定义指令解决iOS微信端input失焦回弹问题.html</id>
    <published>2019-11-13T16:00:00.000Z</published>
    <updated>2019-11-13T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>iOS微信端H5在input失去焦点的时候存在无法回弹的bug，微信也一直没有修复这个问题。</p><p>解决办法如下：</p><ol><li>focus的时候记录当前的scrollTop值</li><li>blur的时候使用scrollTo回弹记录的scrollTop值</li></ol><p>下面讲解如何通过vue的自定义指令来自动解决该bug<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  springBack: &#123;</span><br><span class="line">    bind (el, binding) &#123;</span><br><span class="line">      <span class="keyword">const</span> ua = <span class="built_in">window</span>.navigator.userAgent</span><br><span class="line">      <span class="keyword">if</span> (!(<span class="regexp">/iphone|ipad/gi</span>.test(ua) &amp;&amp; <span class="regexp">/MicroMessenger/gi</span>.test(ua))) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">focusEvent</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        el.__keyboardState__ = <span class="number">1</span></span><br><span class="line">        el.__scrollTop__ = <span class="built_in">document</span>.documentElement.scrollTop || <span class="built_in">document</span>.body.scrollTop</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">blurEvent</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        el.__keyboardState__ = <span class="number">0</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 假如我们在input框的后面增加clear icon，不做处理时点击clear icon，键盘会失焦收起，这种体验肯定是不好的</span></span><br><span class="line"><span class="comment">         * 通常情况我们会在点击clear icon的时候，增加input.focus()，执行流程是click-&gt;blur-&gt;focus</span></span><br><span class="line"><span class="comment">         * 该指令中如果在blur时直接执行回弹，就会出现问题，故增加__keyboardState__记录当前状态，再延迟判断执行回弹操作</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (!el.__keyboardState__) <span class="built_in">window</span>.scrollTo(<span class="number">0</span>, el.__scrollTop__)</span><br><span class="line">        &#125;, <span class="number">10</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      el.__vueInputFocus__ = focusEvent</span><br><span class="line">      el.__vueInputBlur__ = blurEvent</span><br><span class="line">      el.addEventListener(<span class="string">'focus'</span>, focusEvent)</span><br><span class="line">      el.addEventListener(<span class="string">'blur'</span>, blurEvent)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 元素销毁的时候的会触发解绑</span></span><br><span class="line">    unbind (el, binding) &#123;</span><br><span class="line">      <span class="keyword">const</span> ua = <span class="built_in">window</span>.navigator.userAgent</span><br><span class="line">      <span class="keyword">if</span> (!(<span class="regexp">/iphone|ipad/i</span>.test(ua) &amp;&amp; <span class="regexp">/(micromessenger)\//</span>.test(ua))) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">      el.removeEventListener(<span class="string">'focus'</span>, el.__vueInputFocus__)</span><br><span class="line">      el.removeEventListener(<span class="string">'blur'</span>, el.__vueInputBlur__)</span><br><span class="line">      <span class="keyword">delete</span> el.__vueInputFocus__</span><br><span class="line">      <span class="keyword">delete</span> el.__vueInputBlur__</span><br><span class="line">      <span class="keyword">delete</span> el.__scrollTop__</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> springBack <span class="keyword">from</span> <span class="string">'.@/directives/springBack'</span></span><br><span class="line"></span><br><span class="line">directives: springBack</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      vue使用自定义指令解决iOS微信端input失焦回弹问题
    
    </summary>
    
    
      <category term="Vue" scheme="http://pimichen.com/blog/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>使用github pages发布自己的网站</title>
    <link href="http://pimichen.com/blog/tools/%E4%BD%BF%E7%94%A8github_pages%E5%8F%91%E5%B8%83%E8%87%AA%E5%B7%B1%E7%9A%84%E7%BD%91%E7%AB%99.html"/>
    <id>http://pimichen.com/blog/tools/使用github_pages发布自己的网站.html</id>
    <published>2019-11-06T16:00:00.000Z</published>
    <updated>2019-11-06T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>当我们使用<a href="https://github.com" target="_blank" rel="noopener">Github</a>、<a href="https://coding.net" target="_blank" rel="noopener">Coding Net</a>、<a href="https://gitee.com/" target="_blank" rel="noopener">码云Gitee</a>等存储工程代码时，都会有相应的pages服务。</p><p>它们提供的pages如下：</p><ul><li>Github Pages:  <code>****.github.io</code></li><li>CodingNet Pages:  <code>****.coding.me</code></li><li>Gitee Pages:  <code>****.gitee.io</code></li></ul><p>以Github Pages为例，操作流程如下：</p><ol><li><p>为了使多个项目可以共用该Github Pages，我们不建议将某个项目直接设置使用。</p></li><li><p>在github中新建一个以自己 用户名.github.io 开头的工程名称，并设置为public，如 <code>cpm828.github.io</code>。<br><img src="../images/tools/github_pages_1.png"></p></li><li><p>在 <code>cpm828.github.io</code> 工程下新建一个index.html，用于存放一个路由导航页面，可以导航到其他工程。操作完成之后就可以使用 <code>https://cpm828.github.io</code> 来访问这个index.html了。</p></li><li><p>继续绑定自己购买的域名。</p></li><li><p>在Settings页面 <code>Github Pages</code> 模块里面设置 <code>Custom domain</code> 为自己的域名，如 <code>pimichen.com</code>，如图：<br><img src="../images/tools/github_pages_2.png"></p></li><li><p>在 <code>cpm828.github.io</code> 新建一个 <code>CNAME</code> 文件，里面写上自己的域名。如图：<br><img src="../images/tools/github_pages_3.png"></p></li><li><p>如果操作正确，会出现该提示，如图。现在，你可以使用自己的域名访问了。<br><img src="../images/tools/github_pages_4.png"></p></li><li><p>继续设置https协议。</p></li><li><p>在Settings页面 <code>Github Pages</code> 模块，勾选 <code>Enforce HTTPS</code>，如果出现置灰无法勾选的情况，打开网页控制台，找到该input，手动删除 <code>disabled</code> 属性，然后勾选即可成功。哈哈，<code>Github</code> 你不要太调皮。<br><img src="../images/tools/github_pages_5.png"></p></li><li><p>成功之后即可以使用https来访问了。<br><img src="../images/tools/github_pages_6.png"></p></li></ol><p>附加：</p><p>Github 里面的工程可以设置一个 <code>gh-pages</code> 分支用于存放需要使用 <code>Github Pages</code> 的代码内容。如新建了一个 <code>cpm-ui</code> 的工程，我们将编译后的目录存放到 <code>gh-pages</code> 分支中，<code>vue-cli</code> 生成 <code>gh-pages</code> 分支步骤如下：</p><ol><li><p>正常创建工程并存放到github上</p></li><li><p>npm安装gh-pages</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gh-pages -D</span><br></pre></td></tr></table></figure></li><li><p>配置快速启动脚本，配置homepages<br> package.json:</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"homepage"</span>: <span class="string">"https://cpm828.github.io/cpm-ui"</span>, <span class="comment">// 首页地址</span></span><br><span class="line"><span class="string">"script"</span>: &#123;</span><br><span class="line">    <span class="string">"deploy"</span>: <span class="string">"gh-pages -d examples/dist"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 如果是vue-cli项目，需要修改config/index.js:</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">build: &#123;</span><br><span class="line">    assetsPublicPath: <span class="string">''</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>执行编译，即可成功创建 <code>gh-pages</code></p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run deploy</span><br></pre></td></tr></table></figure></li></ol><p>操作成功后访问 <code>https://pimichen.com/cpm-ui</code> 即可以直接指向 <code>cpm-ui</code> 工程下 <code>gh-pages</code> 分支中的内容。</p>]]></content>
    
    <summary type="html">
    
      使用github pages发布自己的网站，并设置绑定自己的域名
    
    </summary>
    
    
      <category term="Tools" scheme="http://pimichen.com/blog/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>vue利用transition实现路由切换仿APP效果</title>
    <link href="http://pimichen.com/blog/vue/vue%E5%88%A9%E7%94%A8transition%E5%AE%9E%E7%8E%B0%E8%B7%AF%E7%94%B1%E5%88%87%E6%8D%A2%E4%BB%BFAPP%E6%95%88%E6%9E%9C.html"/>
    <id>http://pimichen.com/blog/vue/vue利用transition实现路由切换仿APP效果.html</id>
    <published>2019-06-26T16:00:00.000Z</published>
    <updated>2019-06-26T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在使用iOS APP时，我们经常能看见原生的切换效果体验非常顺滑。切换下一页时，动画从右往左。返回上一页时，动画从左往右。</p><p>使用vue的transition过渡动画也可以实现这一效果，效果图如下：</p><p><img src="../images/vue/vue-transition.gif"></p><p>router/index.js源码如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 参考：https://blog.csdn.net/bbsyi/article/details/78195378</span></span><br><span class="line"><span class="comment">// 给Router扩展一个goBack方法，需要后退是调用this.$router.goBack()</span></span><br><span class="line">Router.prototype.goBack = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.goNext = <span class="number">0</span> <span class="comment">// 扩展一个变量记录后退</span></span><br><span class="line">  <span class="keyword">this</span>.go(<span class="number">-1</span>) <span class="comment">// 后退</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    ...firstEntries, <span class="comment">// 略</span></span><br><span class="line">    ...homeEntries,</span><br><span class="line">    ...discoverEntries,</span><br><span class="line">    ...orderEntries,</span><br><span class="line">    ...userEntries,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'*'</span>,</span><br><span class="line">      redirect: &#123;</span><br><span class="line">        name: <span class="string">'Home'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>APP.vue源码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;rFlexFixed&gt;</span><br><span class="line">      &lt;rTitlebar slot=<span class="string">"header"</span> theme=<span class="string">"a"</span> :title=<span class="string">"currentRouteInfo.meta.title"</span> @onback=<span class="string">"goBack"</span> v-if=<span class="string">"showBar"</span>&gt;&lt;/rTitlebar&gt;</span><br><span class="line"></span><br><span class="line">      &lt;div class=<span class="string">"main-content"</span>&gt;</span><br><span class="line">        &lt;transition :name=<span class="string">"transitionName"</span> :mode=<span class="string">"modeName"</span>&gt;</span><br><span class="line">          &lt;router-view class=<span class="string">"page-wrap"</span>/&gt;</span><br><span class="line">        &lt;/transition&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">      &lt;pFooter slot=<span class="string">"footer"</span> :currentRouteName=<span class="string">"currentRouteInfo.name"</span> v-if=<span class="string">"!showBar"</span>&gt;&lt;/pFooter&gt;</span><br><span class="line">    &lt;/rFlexFixed&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import pFooter from <span class="string">'@/components/pFooter'</span></span><br><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">  name: <span class="string">'App'</span>,</span><br><span class="line">  components: &#123;</span><br><span class="line">    pFooter</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">data</span></span> () &#123;</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">      showBar: <span class="literal">false</span>, // 是否显示titleBar</span><br><span class="line">      currentRouteInfo: &#123;&#125;, // 当前页的信息</span><br><span class="line">      transitionName: <span class="string">''</span>,</span><br><span class="line">      modeName: <span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    <span class="string">'$route'</span> (to, from)  &#123;</span><br><span class="line">      this.showBar = ![<span class="string">'Home'</span>, <span class="string">'Discover'</span>, <span class="string">'Order'</span>, <span class="string">'User'</span>].includes(to.name)</span><br><span class="line">      this.currentRouteInfo = to</span><br><span class="line"></span><br><span class="line">      // 控制过渡动效</span><br><span class="line">      <span class="keyword">if</span> (from.fullPath === <span class="string">'/'</span> || to.params.tab) &#123; // 首次载入和tab间切换</span><br><span class="line">        this.transitionName = <span class="string">'router-fade'</span></span><br><span class="line">        this.modeName = <span class="string">'out-in'</span> // 控制一个页面先离开，另一个页面再进入</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!this.<span class="variable">$router</span>.goNext) &#123; // 后退</span><br><span class="line">        this.transitionName = <span class="string">'router-out'</span></span><br><span class="line">        this.modeName = <span class="string">''</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123; // 前进</span><br><span class="line">        this.transitionName = <span class="string">'router-in'</span></span><br><span class="line">        this.modeName = <span class="string">''</span></span><br><span class="line">      &#125;</span><br><span class="line">      this.<span class="variable">$router</span>.goNext = 1 // 默认为前进</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">goBack</span></span> () &#123;</span><br><span class="line">      this.<span class="variable">$router</span>.goBack()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=<span class="string">"scss"</span>&gt;</span><br><span class="line"><span class="comment">#app &#123;</span></span><br><span class="line">  font-family: <span class="string">'Avenir'</span>, Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: <span class="comment">#2c3e50;</span></span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 100%;</span><br><span class="line">  .main-content&#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    position: relative;</span><br><span class="line">  &#125;</span><br><span class="line">  .page-wrap&#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    left: 0;</span><br><span class="line">    top: 0;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    overflow-y: scroll;</span><br><span class="line">    &amp;::-webkit-scrollbar&#123;display: none;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 主导航切换</span><br><span class="line">// 淡入淡出动画</span><br><span class="line">.router-fade-enter-active, .router-fade-leave-active &#123;</span><br><span class="line">  transition: opacity .3s ease-out;</span><br><span class="line">&#125;</span><br><span class="line">.router-fade-enter, .router-fade-leave-active &#123;</span><br><span class="line">  opacity: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 二级页面左右切换</span><br><span class="line">// router-out表示返回上一页（右到左），router-in表示前进下一页（左到右）</span><br><span class="line">.router-in-enter-active,</span><br><span class="line">.router-in-leave-active,</span><br><span class="line">.router-out-enter-active,</span><br><span class="line">.router-out-leave-active&#123;</span><br><span class="line">  transition: all 0.3s ease-out;</span><br><span class="line">&#125;</span><br><span class="line">.router-in-leave-active,</span><br><span class="line">.router-out-enter&#123;</span><br><span class="line">  opacity: 0;</span><br><span class="line">  transform: translate3d(-100%, 0, 0);</span><br><span class="line">&#125;</span><br><span class="line">.router-in-enter,</span><br><span class="line">.router-out-leave-active&#123;</span><br><span class="line">  opacity: 0;</span><br><span class="line">  transform: translate3d(100%, 0, 0);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p><p>主导航切换使用fade效果，二级页面间切换使用左右切换效果。</p><p>本例中，我们将titleBar放置在了APP.vue，对于实际的项目，可能需要将titleBar放置的页面中，便于更好的控制titleBar</p>]]></content>
    
    <summary type="html">
    
      vue利用transition实现路由切换仿APP效果
    
    </summary>
    
    
      <category term="Vue" scheme="http://pimichen.com/blog/tags/vue/"/>
    
  </entry>
  
</feed>
